;**********************************************************************;
;                                                                      ;
;   This file is part of RSX180, a multi-tasking OS for the Z180.      ;
;   Copyright (C) 1985-2022, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

;----------------------------------------------------------------------;
;                                                                      ;
;       LOADER task. Runs in a separate partition.                     ;
;                                                                      ;
;----------------------------------------------------------------------;

	.Z80

	ident	'V6.14'

	include	SYSCONF.INC
	include	SYSFN.INC
	include	SYSTEM.INC
	include	DCB.INC
	include	QIO.INC
	include	TCB.INC
	include	PCB.INC
	include	THDR.INC
	include	TKN.INC
	include	ERRORS.INC

LUN	equ	1		; LUN for file I/O
EFN	equ	9		; event flag number for file I/O

	public	LOADER

KCALL	MACRO	addr
	call	$SWSTK
	dw	addr
	ENDM

;-----------------------------------------------------------------------

	cseg

LOADER:	ld	sp,stack

	ld	c,1
	SC	.SUPER		; we always run in kernel mode
	jr	c,exit

next:	ld	iy,($CTCB)
	ld	l,(iy+T.RCVL)	; check loader queue
	ld	h,(iy+T.RCVL+1)
	ld	a,h
	or	l		; got anything?
	jr	z,wait		; jump if not

	push	hl
	pop	ix		; else get TCB address into IX
	ld	a,(ix+T.LNK)
	ld	(iy+T.RCVL),a	; unlink TCB
	ld	a,(ix+T.LNK+1)
	ld	(iy+T.RCVL+1),a
	call	TLOAD		; and load the task
	jr	next		; loop for more

wait:	SC	.WTDAT		; wait until something arrives
	jr	next		; then loop to process it
				; (this task never terminates)

exit:	ld	hl,EX.SEV
	SC	.EXIT

;-----------------------------------------------------------------------

; Process kernel task load request.

; Load the requested task image from disk and then call the kernel to 
; start execution. Memory for task has been already allocated. Aborts
; task if it could not be loaded.
; Input:
;   IX = TCB addr
; Returns:
;   CY set on error and error code in A.

;  T2.OUT  T2.CKP
;    0       0      not allowed
;    0       1      checkpoint write
;    1       0      initial load
;    1       1      checkpoint read

TLOAD:	IF	F$CHKP

	bit	T2.CKP,(ix+T.ST+1) ; is this a checkpoint request?
	jp	z,iload		   ; branch if not (initial task load)

	; checkpoint file operation

	ld	l,(ix+T.CPCB)
	ld	h,(ix+T.CPCB+1)
	ld	a,h		; ensure checkpoint PCB is allocated
	or	l
	ld	a,TK.CAF
	jp	z,lderr

	push	hl
	pop	iy
	ld	e,(iy+P.UCB)	; get UCB of checkpoint device
	ld	d,(iy+P.UCB+1)
	call	SETLUN		; assign LUN to checkpoint device

	ld	l,(iy+P.LBN)	; get starting block number of checkpoint file
	ld	h,(iy+P.LBN+1)
	ld	e,(iy+P.LBN+2)
	ld	d,(iy+P.LBN+3)

	ld	c,(iy+P.REL)	; get relative block number within file
	ld	b,(iy+P.REL+1)

	add	hl,bc		; compute absolute block number
	ld	bc,0
	ex	de,hl
	adc	hl,bc
	ex	de,hl

	ld	(QIOBLK+Q.BLK),hl ; set block number in QIO block
	ld	(QIOBLK+Q.BLK+2),de

	ld	l,(ix+T.PCB)
	ld	h,(ix+T.PCB+1)
	ld	de,P.BASE
	add	hl,de
	ld	a,(hl)		; get task bank number
	ld	(TBASE),a

	ld	hl,0		; starting address
	ld	c,(iy+P.SIZE)	; number of blocks to read/write in BC
	ld	b,(iy+P.SIZE+1)

	bit	T2.OUT,(ix+T.ST+1) ; checkpoint read?
	jp	z,ckpwr		   ; branch if not (checkpoint write)

	ex	de,hl		; dst

ckprd:	; checkpoint read

	push	bc

	call	DSKRD		; read from checkpoint file
	jp	c,rderr		; abort task on read error

	ld	hl,IOBUF	; src
	ld	bc,512		; len
	di
	exx
	ld	a,($UBANK)
	ld	l,a		; src bank
	ld	a,(TBASE)
	ld	e,a		; dst bank
	exx
	call	$MCOPY		; copy block to task area
	ei

	call	NXTBL
	pop	bc
	dec	bc
	ld	a,b
	or	c
	jr	nz,ckprd

	KCALL	$LDCKR		; move task to ready list to resume execution
	ret	nc
	ld	e,TK.CAF	; tktn code = checkpoint failure
	jp	lderr

ckpwr:	; checkpoint write

	push	bc

	ld	de,IOBUF	; dst
	ld	bc,512		; len
	di
	exx
	ld	a,($UBANK)
	ld	e,a		; dst bank
	ld	a,(TBASE)
	ld	l,a		; src bank
	exx
	call	$MCOPY		; get block from task area
	ei

	push	hl
	call	DSKWR		; write to checkpoint file
	pop	hl		; src
	jp	c,rderr		; abort task on write error

	push	hl
	call	NXTBL
	pop	hl
	pop	bc
	dec	bc
	ld	a,b
	or	c
	jr	nz,ckpwr

	KCALL	$LDCKW		; move task to partition wait list
	ret	nc
	ld	e,TK.CAF	; tktn code = checkpoint failure
	jp	lderr

	ENDIF

iload:	; initial task load

	ld	e,(ix+T.LDEV)	; get UCB of task load device into DE
	ld	d,(ix+T.LDEV+1)
	call	SETLUN		; assign LUN

	ld	l,(ix+T.SBLK)	; get starting block number
	ld	h,(ix+T.SBLK+1)
	ld	(QIOBLK+Q.BLK),hl ; set block number in QIO block
	ld	l,(ix+T.SBLK+2)
	ld	h,(ix+T.SBLK+3)
	ld	(QIOBLK+Q.BLK+2),hl

	call	DSKRD		; read 1st block (task header) into IOBUF
	ld	e,TK.LDR	; abort code = read error
	jp	c,lderr		; abort task on error

	ld	hl,IOBUF
	ld	de,TSKHDR
	ld	bc,256
	ldir

	call	CHKHDR		; validate header
	ld	e,TK.ITH	; abort code = invalid task header
	jp	c,lderr		; abort task if header is invalid

	ld	l,(ix+T.PCB)
	ld	h,(ix+T.PCB+1)
	ld	de,P.BASE
	add	hl,de
	ld	a,(hl)
	ld	(TBASE),a

	ld	hl,(TSKHDR+TH.END)
	ld	de,(TSKHDR+TH.STRT)
	or	a
	sbc	hl,de		; compute code size

	ld	de,255		; convert value to 256-byte records
	add	hl,de		; round to upper 256-byte record limit
	ld	l,h		; divide by 256
	ld	h,0
	ex	de,hl		; result in DE
	ld	l,(ix+T.NBLK)	; get file size in blocks
	ld	h,(ix+T.NBLK+1)
	add	hl,hl		; compute file size in 256-byte records
	jr	c,ld1		; CY means file size is larger than code length
	dec	hl		; don't count header
	ex	de,hl
	call	CPHLDE		; compare
	jr	c,ld1		; file size is shorter, use T.NBLK*2-1 in DE
	ex	de,hl		; else use computed code records
ld1:	ld	l,(ix+T.PCB)
	ld	h,(ix+T.PCB+1)
	ld	bc,P.SIZE
	add	hl,bc
	ld	a,(hl)		; now get (sub)partition size
	inc	hl
	ld	h,(hl)
	ld	l,a
	add	hl,hl		; convert pages to 256-byte records
	add	hl,hl
	add	hl,hl
	add	hl,hl
	jr	c,ld2		; CY here means partition is large enough
	ex	de,hl
	call	CPHLDE		; compare
	jr	c,ld2		; use P.SIZE*16 in DE if smaller
	ex	de,hl		; else use computed code records
ld2:	ld	c,e		; result in BC
	ld	b,d

	ld	e,(ix+T.STRT)	; program load address
	ld	d,(ix+T.STRT+1)

	ld	hl,IOBUF+256	; src in HL, dst in DE
	push	bc		; save block counter
	ld	bc,256		; length
	di
	exx
	ld	a,($UBANK)
	ld	l,a		; src bank
	ld	a,(TBASE)
	ld	e,a		; dst bank
	exx
	call	$MCOPY		; copy 1st 256 bytes 
	ei
	pop	bc
	dec	bc		; decrement record count
	ld	a,b
	or	c		; done?
	jr	z,ldend		; yes

load:	push	bc

	call	NXTBL		; prepare to read next block
	call	DSKRD		; read from task image file
	jp	c,rderr		; abort task on error

	ld	hl,IOBUF	; src
	ld	bc,256		; len
	di
	exx
	ld	a,($UBANK)
	ld	l,a		; src bank
	ld	a,(TBASE)
	ld	e,a		; dst bank
	exx
	call	$MCOPY		; copy block to task area
	ei
	pop	bc
	dec	bc		; decrement record count
	ld	a,b
	or	c		; done?
	jr	z,ldend		; yes

	push	bc
	ld	bc,256		; len
	di
	exx
	ld	a,($UBANK)
	ld	l,a		; src bank
	ld	a,(TBASE)
	ld	e,a		; dst bank
	exx
	call	$MCOPY		; copy block to task area
	ei
	pop	bc
	dec	bc		; decrement record count
	ld	a,b
	or	c		; done?
	jr	nz,load

ldend:	call	INILUN		; initialize LUN table
	ld	e,TK.MEM	; abort code = not enough pool
	jr	c,lderr		; initiate task abort on error

	KCALL	$LDGO		; move task to ready list to start execution
	ret	nc
	ld	e,TK.RUN	; tktn code = start failed

; Free allocated task memory in case of start failure.

lderr:	push	af
	push	ix
	pop	bc
	set	T2.LDR,(ix+T.ST+1)
	KCALL	TKILL		; abort task
	pop	af
	ret

rderr:	pop	bc
	ld	e,TK.LDR	; abort code = read error
	jr	lderr

; Compare HL and DE. Returns Z if HL == DE, CY if HL > DE

CPHLDE:	ld	a,d
	cp	h
	ret	nz
	ld	a,e
	cp	l
	ret

;-----------------------------------------------------------------------

; Validate task header. Right now it simply checks signature and
; version number.

CHKHDR:	ld	hl,TSKHDR
	ld	de,thid
	ld	b,6
ckhdr:	ld	a,(de)		; check task header ID
	cp	(hl)
	ld	a,E.BADTH
	scf
	ret	nz		; return CY if header is invalid
	inc	hl
	inc	de
	djnz	ckhdr
	ld	hl,(TSKHDR+TH.VER)
	ld	de,0102h	; 1.2
	or	a
	sbc	hl,de
	ret	z
	scf
	ret

thid:	db	'TSK180'

;-----------------------------------------------------------------------

; Initialize task's LUN table.

INILUN:	ld	l,(ix+T.CTX)	; get address of task context block
	ld	h,(ix+T.CTX+1)
	ld	a,h
	or	l
	scf
	ret	z		; error if not set
	ld	hl,TSKHDR+TH.LUNT
	ld	b,1
ini1:	ld	e,(hl)		; get device name into DE-C
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	c,(hl)
	inc	hl
	inc	hl
	push	hl
	ld	hl,'OV'		; check for special OV: pseudo-device
	or	a
	sbc	hl,de
	jr	nz,ini2		; not OV:, proceed as usual
	ld	a,c
	or	a
	jr	nz,ini2
	ld	l,(ix+T.CTX)	; get address of task context block
	ld	h,(ix+T.CTX+1)
	ld	de,TX.LUT
	add	hl,de		; point to start of LUN table
	ld	a,b
	dec	a		; make LUN number 0-based
	add	a,a
	add	a,a
	ld	e,a
	ld	d,0
	add	hl,de		; index into table
	ld	a,(ix+T.LDEV)	; get UCB address of task load device
	ld	(hl),a		; store in LUN table
	inc	hl
	ld	a,(ix+T.LDEV+1)
	ld	(hl),a
	jr	ini3
ini2:	push	bc
	KCALL	$ALUN		; assign device to LUN
	pop	bc
ini3:	pop	hl
	inc	b
	ld	a,b
	cp	16+1		; all LUNs processed?
	jr	c,ini1		; no, loop
	xor	a		; else return success
	ret

;-----------------------------------------------------------------------

; Set LUN for subsequent file I/O. DE = UCB address.

SETLUN:	push	hl
	push	bc
	ld	hl,($CTCB)
	ld	bc,T.CTX
	add	hl,bc
	ld	c,(hl)		; get context address
	inc	hl
	ld	b,(hl)
	ld	hl,TX.LUT
	add	hl,bc		; point to LUN table
	ld	bc,4*(LUN-1)
	add	hl,bc		; index into LUN table
	ld	(hl),e		; set LUN
	inc	hl
	ld	(hl),d
	pop	bc
	pop	hl
	ret

; Write IOBUF contents to disk block (number already in QIO block).

	IF	F$CHKP

DSKWR:	ld	a,IO.WLB
	jr	dskio

	ENDIF

; Read disk block (number already in QIO block) into buffer IOBUF.

DSKRD:	ld	a,IO.RLB
dskio:	ld	(QIOBLK+Q.FUNC),a
	ld	hl,0
	ld	(QIOSB+2),hl	; clear count of bytes read
	ld	hl,QIOBLK
	SC	.QIO		; .QIOW
	ret	c		; if queueing failed
	ld	hl,(QIOSB+2)	; fetch byte count
	ld	a,(QIOSB)	; fetch return code
	or	a		; check result
	ret	z
	scf
	ret

; Set next block number in QIO block

NXTBL:	ld	hl,QIOBLK+Q.BLK
	inc	(hl)
	ret	nz
	inc	hl
	inc	(hl)
	ret	nz
	inc	hl
	inc	(hl)
	ret	nz
	inc	hl
	inc	(hl)
	ret

;-----------------------------------------------------------------------

	dseg

TSKHDR:	ds	256		; buffer for task header
IOBUF:	ds	512		; buffer for file I/O
TBASE:	ds	1		; task base page

QIOBLK:	QIOW$	IO.RLB,LUN,EFN,QIOSB,,<IOBUF,512,0,0,0>
QIOSB:	ds	4

RCVBUF:	ds	2		; receive buffer

	ds	128		; stack space
stack	equ	$

	end
