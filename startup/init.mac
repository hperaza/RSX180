;**********************************************************************;
;                                                                      ;
;   This file is part of RSX180, a multi-tasking OS for the Z180.      ;
;   Copyright (C) 1985-2022, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

	.Z80

; Note: compile with ZSM4 (M80 reverses chars in 'LB', 'SY', etc.)

	include	DCB.INC
	include	TCB.INC
	include	LCB.INC
	include	QIO.INC
	include	CLICB.INC
	include	SYSFN.INC
	include	SYSCONF.INC
	include	ERRORS.INC

	public	INIT_S,INIT_E

	extrn	$ASGN,$FNDEV,$FNTSK,MSIZE,$LOGIN,$ALLOC
	extrn	TRQST,MCRTCB,$CLIST

CR	equ	0Dh
LF	equ	0Ah
ESC	equ	1Bh

SYSCMD	equ	80h		; boot loader stores boot device name here

	cseg

KCALL	MACRO	addr
	call	$SWSTK##
	dw	addr
	ENDM

;-----------------------------------------------------------------------

; System initialization task. Mounts the system disk, creates logical
; devices, and installs the CLI and other necessary tasks to continue
; booting the system.

INIT_S:	ld	sp,INISTK

	ld	hl,SYSCMD+1
	ld	de,sydev
	ld	bc,3
	ldir			; get boot device passed by boot loader

	call	QIOINI

	ld	hl,LOGMSG
	call	PUTSTR		; display header
	push	hl
	KCALL	MSIZE		; show system memory size
	call	HLDEC
	pop	hl
	inc	hl
	call	PUTSTR
	push	hl
	ld	hl,CMDBUF
	ld	c,I.VERS
	SC	.GIN		; get system version into CMDBUF
	ld	a,(CMDBUF+1)
	ld	l,a
	ld	h,0
	call	HLDEC		; show major version number
	ld	c,'.'
	call	PUTCH
	ld	a,(CMDBUF)
	call	ADEC2		; show minor version number
	pop	hl
	inc	hl
	call	PUTSTR

	; login SYSTEM user

	ld	iy,SYSACN	; login SYSTEM user
	KCALL	$LOGIN
	jp	c,sserr

	ex	de,hl
	ld	hl,L.ST
	add	hl,de
	set	LS.PRV,(hl)	; set privileged bit

	ld	hl,L.CDIR
	add	hl,de
	ex	de,hl
	ld	hl,SYSACN
	ld	bc,9
	ldir			; set current directory in LCB

	; start MCR

	ld	ix,MCRTDB	; request MCR... task
	xor	a
	set	TA.MCR,a	; set MCR bit (else TRQST will clear it)
	set	TA.CLI,a	; set CLI bit
	ld	(ix+TD.ATTR),a

	ld	hl,CLIBSZ
	ld	bc,DPRL
	add	hl,bc
	ld	bc,CPRL
	add	hl,bc
	ld	c,l
	ld	b,h
	KCALL	$ALLOC		; create CLI control block for MCR
	jp	c,mcrerr	; should not happen

	ld	($CLIST),hl	; add it to CLICB list
	push	hl
	pop	ix
	xor	a
	ld	(ix+CL.LNK),a	; clear link field
	ld	(ix+CL.LNK+1),a
	ld	de,CL.NAM
	add	hl,de
	ex	de,hl
	ld	hl,MCRTDB+TD.NAME
	ld	bc,6
	ldir			; set name
	push	ix
	pop	hl
	ld	de,CL.DAT	; point to data area
	add	hl,de
	ex	de,hl
	ld	hl,DPR
	ld	bc,DPRL
	ld	(ix+CL.DPL),c
	ldir
	ld	hl,CPR
	ld	bc,CPRL
	ld	(ix+CL.CPL),c
	ldir

	ld	hl,MCRTDB
	KCALL	TRQST		; start MCR
	jp	c,mcrerr
	ld	(MCRTCB),ix
	set	TA.PRV,(ix+T.ATTR)
	set	TA.CLI,(ix+T.ATTR)
	set	TA.MCR,(ix+T.ATTR)

	; execute startup commands

	ld	hl,cmdseq	; implicit startup commands
cmloop:	ld	a,(hl)
	or	a
	jr	z,done
	push	af
	inc	hl
	call	DEVCMD		; build command
	pop	af
	ld	e,a
	push	hl
	call	SNDMCR		; execute command
	pop	hl
;;	jr	c,mcrerr
	inc	hl
	jr	cmloop

done:	; exit, the startup file will do the rest

	ld	hl,EX.SUC
	SC	.EXIT
	jr	done

; Build MCR command inserting the boot device name in the reserved
; placeholder for it.

DEVCMD:	ld	de,CMDBUF
dvcm1:	ld	a,(hl)
	dec	a		; placeholder for device name?
	jr	nz,dvcm2	; branch if not
	push	hl
	ld	hl,sydev
	ld	bc,2
	ldir			; else insert device name
	ld	a,(hl)
	ex	de,hl
	call	CVTBD		; and unit number
	ex	de,hl
	ld	a,':'
	ld	(de),a
	pop	hl
	jr	dvcm3
dvcm2:	inc	a		; end of string?
	ld	(de),a
	jr	z,dvcm4		; exit loop if yes
dvcm3:	inc	hl
	inc	de
	jr	dvcm1
dvcm4:	push	hl
	ld	hl,CMDBUF
	call	PRMSTR		; display the resulting command
	pop	hl
	ret

; Convert byte value in A to unsigned decimal string @HL, no leading zeros.

CVTBD:	push	de
	push	bc
	ld	d,0
	ld	b,100
	call	ad1
	ld	b,10
	call	ad1
	add	a,'0'
	ld	(hl),a
	inc	hl
	inc	d
	ld	a,d		; return length in A
	pop	bc
	pop	de
	ret

ad1:	ld	c,'0'-1
ad2:	inc	c
	sub	b
	jr	nc,ad2
	add	a,b
	push	af
	ld	a,c
	cp	'0'
	jr	nz,ad4
	inc	d
	dec	d
	jr	z,ad5
ad4:	ld	(hl),a
	inc	hl
	inc	d
ad5:	pop	af
	ret

LOGMSG:	db	CR,LF,'P112 ',0,'K RSX180 V',0,CR,LF,0

cmdseq:	db	1,'RED ',1,'=LB:',CR,0		   ; via .RQST + .WTSE
	db	1,'RED ',1,'=SY:',CR,0
	db	1,'MOU ',1,CR,0
	db	2,'@SY0:[SYSTEM]STARTUP.CMD',CR,0  ; via .RPOI w/o waiting
	db	0

sydev:	db	'DY',0

DPR:	db	CR,LF,'>',0
DPRL	equ	$-DPR

CPR:	db	CR,LF,'MCR>',0
CPRL	equ	$-CPR

SYSACN:	db	'SYSTEM   ',1,1
TKTNAM:	db	'TKTN  '

sserr:	ld	de,serr
	jr	fatal

serr:	db	'Failed to initialize system session',0

mcrerr:	ld	de,cerr
fatal:	push	af
	ld	hl,fterr
	call	PUTSTR
	ex	de,hl
	call	PUTSTR
	ex	de,hl
	inc	hl
	call	PUTSTR
	ld	hl,5*TCKSEC
	call	SLEEP
	pop	af
  IF 0
	call	INTOFF
  ELSE
	call	$DBTRP##
  ENDIF
	di
	halt

cerr:	db	'Failed to run MCR',0

fterr:	db	CR,LF,'RSX180 -- ',0,', system halted.',CR,LF,0

;-----------------------------------------------------------------------

PUTCH:	push	hl
	ld	hl,(BUFPTR)
	ld	(hl),c
	inc	hl
	ld	(BUFPTR),hl
	ld	a,(BUFCNT)
	inc	a
	ld	(BUFCNT),a
	cp	80		; buffer full?
	jr	z,pc1		; then output it
	ld	a,c
	cp	CR		; CR?
	jr	z,pc1		; then force output
	pop	hl
	ret

TTFLSH:	push	hl
pc1:	ld	a,(BUFCNT)	; bytes to write
	ld	l,a
	ld	h,0
	ld	(ttqio+Q.LEN),hl
	ld	hl,ttqio
	SC	.QIO		; .QIOW
	jr	c,pc2		; if queueing failed
	ld	a,(iosb)	; fetch return code
	or	a		; check result
	scf
	jr	nz,pc2
	call	inibuf
	xor	a
pc2:	pop	hl
	ret

QIOINI:	ld	de,'LB'
	ld	c,0
	ld	b,1
	SC	.ALUN		; use LUN 1 for disk I/O (LB0:)
	ld	de,'TI'
	ld	c,0
	ld	b,5
	SC	.ALUN		; use LUN 5 for console I/O (TI:)
inibuf:	ld	hl,BUF		; initialize console I/O buffer
	ld	(BUFPTR),hl
	xor	a
	ld	(BUFCNT),a
	ret

;-----------------------------------------------------------------------

PRMSTR:	push	hl
	ld	hl,DPR
	call	PUTSTR
	call	TTFLSH
	ld	a,(TICSEC##)
	srl	a
	srl	a
	srl	a		; 1/8 sec
	ld	l,a
	ld	h,0
	call	SLEEP		; give TI: some time
	pop	hl
PUTSTR:	ld	a,(hl)
	or	a
	ret	z
	push	bc
	push	de
	ld	c,a
	call	PUTCH
	pop	de
	pop	bc
	inc	hl
	jr	PUTSTR

;-----------------------------------------------------------------------

; Display A as two-digit decimal number

ADEC2:	ld	c,'0'
a2:	cp	10
	jr	c,a1
	inc	c
	sub	10
	jr	a2
a1:	push	af
	call	PUTCH
	pop	af
	add	a,'0'
	ld	c,a
	call	PUTCH
	ret

; Display HL decimal, no trailing zeros or spaces

HLDEC:	push	hl
	push	de
	push	bc
	ld	b,0
	ld	de,-10000
	call	sbcnt
	ld	de,-1000
	call	sbcnt
	ld	de,-100
	call	sbcnt
	ld	de,-10
	call	sbcnt
	ld	a,l
	add	a,'0'
	ld	c,a
	call	PUTCH
	pop	bc
	pop	de
	pop	hl
	ret

sbcnt:	ld	C,'0'-1
sb1:	inc	c
	add	hl,de
	jr	c,sb1
	sbc	hl,de
	ld	a,b
	or	a
	jr	nz,PUTC
	ld	a,c
	cp	'0'
	ret	z
	ld	b,1
PUTC:	call	PUTCH
	ret

; Sleep for the specified number of ticks

SLEEP:	push	de
	push	bc
	ld	d,1
	ld	e,8
	ld	bc,0
	SC	.MRKT
	pop	bc
	pop	de
	ret	c
	ld	e,8
	SC	.WTSE
	ret

; Send command to MCR and wait until it is processed

SNDMCR:	ld	hl,CMDBUF
	call	STRLEN
	ld	b,0
	ld	(MCRTDB+TD.CML),bc
	ld	hl,CMDBUF
	ld	(MCRTDB+TD.CMD),hl
	ld	hl,0
	ld	(EXSTAT),hl
	ld	hl,MCRTDB
	dec	e
	jr	z,snd1
	SC	.RPOI
	ret
snd1:	ld	e,2
	ld	bc,EXSTAT
	SC	.RQST
	ret	c
	ld	e,2
	SC	.WTSE
	ret

; Compute string length

STRLEN:	ld	c,0
slen:	ld	a,(hl)
	or	a
	ret	z
	inc	hl
	inc	c
	jr	slen

;-----------------------------------------------------------------------

;!!	dseg

lbqio:	QIOW$	IO.RVB,1,9,iosb,,<,,,,,>
iosb:	ds	4

ttqio:	QIOW$	IO.WLB,5,3,iosb,,<BUF,,0,,,>
BUF:	ds	80	; terminal output buffer
BUFPTR:	ds	2
BUFCNT:	ds	1

MCRTDB:	db	'MCR...'
	dw	0,0
	db	0
	db	1,1
	db	'TT',0
	dw	0,0

CMDBUF:	ds	80
EXSTAT:	ds	2

	ds	128	; space for init stack
INISTK	equ	$

INIT_E	equ	$

	end	;INIT_S
