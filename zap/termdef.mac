;**********************************************************************;
;                                                                      ;
;   This file is part of ZAP - an hexadecimal file editor for RSX180.  ;
;   Copyright (C) 2019-2022, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

	.Z80

FALSE	equ	0
TRUE	equ	NOT FALSE

CR	equ	0Dh
LF	equ	0Ah
ESC	equ	1Bh

VT100	equ	TRUE

	public	HOME,CLS,CLREOS,CLREOL,SETCUR,FWDIDX,REVIDX,TRMNAM
	public	HASSRG,SCRLRG,REVVID,BOLD,NORMAL,GRAPH,ALPHA

	extrn	PUTCH,TTFLSH

	cseg

; display patch area, defaults to VT100 sequences

	org	10h-3

	if	VT100

vtname:	db	'VT100',0,0,0,0,0,0,0,0,0
vtsize:	db	80,24
vclscr:	db	4,ESC,'[2J',0,0,0
vcleos:	db	3,ESC,'[J',0,0,0,0
vcleol:	db	3,ESC,'[K',0,0,0,0
vgraph:	db	3,ESC,'(0',0,0,0,0
valpha:	db	3,ESC,'(B',0,0,0,0
vhome:	db	3,ESC,'[H',0,0,0,0
vbold:	db	4,ESC,'[1m',0,0,0
vrev:	db	4,ESC,'[7m',0,0,0
vnorm:	db	4,ESC,'[0m',0,0,0
vcurprf:db	2,ESC,'[',0,0,0,0,0
vcursep:db	1,';',0,0,0,0,0,0
vcurpst:db	1,'H',0,0,0,0,0,0
vcurbcd:db	TRUE
vcuryof:db	1
vcurxof:db	1
vxfirst:db	FALSE
vfwdidx:db	2,ESC,'D',0,0,0,0,0
vrevidx:db	2,ESC,'M',0,0,0,0,0
vscrlrg:db	1,'r',0,0,0,0,0,0

	else

vtname:	db	'VT52',0,0,0,0,0,0,0,0,0,0
vtsize:	db	80,24
vclscr:	db	4,ESC,'H',ESC,'J',0,0,0
vcleos:	db	2,ESC,'J',0,0,0,0,0
vcleol:	db	2,ESC,'K',0,0,0,0,0
vgraph:	db	2,ESC,'F',0,0,0,0,0
valpha:	db	2,ESC,'G',0,0,0,0,0
vhome:	db	2,ESC,'H',0,0,0,0,0
vbold:	db	0,0,0,0,0,0,0,0
vrev:	db	0,0,0,0,0,0,0,0
vnorm:	db	0,0,0,0,0,0,0,0
vcurprf:db	2,ESC,'Y',0,0,0,0,0
vcursep:db	0,0,0,0,0,0,0,0
vcurpst:db	0,0,0,0,0,0,0,0
vcurbcd:db	FALSE
vcuryof:db	32
vcurxof:db	32
vxfirst:db	FALSE
vfwdidx:db	1,LF,0,0,0,0,0,0
vrevidx:db	2,ESC,'I',0,0,0,0,0
vscrlrg:db	0,0,0,0,0,0,0,0

	endif

	org	0C0h-3

;-----------------------------------------------------------------------

; screen output routines

CLS:	push	hl
	ld	hl,vclscr
	jp	pseq

CLREOS:	push	hl
	ld	hl,vcleos
	jp	pseq

CLREOL:	push	hl
	ld	hl,vcleol
	jp	pseq

FWDIDX:	push	hl
	ld	hl,vfwdidx
	jp	pseq

REVIDX:	push	hl
	ld	hl,vrevidx
	jp	pseq

BOLD:	push	hl
	ld	hl,vbold
	jp	pseq

REVVID:	push	hl
	ld	hl,vrev
	jp	pseq

NORMAL:	push	hl
	ld	hl,vnorm
	jp	pseq

GRAPH:	push	hl
	ld	hl,vgraph
	jp	pseq

ALPHA:	push	hl
	ld	hl,valpha
pseq:	call	putseq
	pop	hl
	ret

HOME:	push	hl
	ld	hl,vhome
	ld	a,(hl)
	or	a
	jp	nz,pseq
	ld	hl,0
	call	SETCUR
	pop	hl
	ret

TRMNAM:	ld	hl,vtname
	ret

HASSRG:	ld	a,(vscrlrg)
	or	a		; return NZ if terminal supports scroll region
	ret

; H = x coord, L = y coord

SETCUR:	push	hl
	push	de
	push	bc
	ld	de,vcurpst	; postfix
s1:	push	de
  if 0
	ex	de,hl
	ld	hl,(vcuryof)	; H = vcurxof, L = vcuryof
	add	hl,de		; should not generate any CY from L to H
	ex	de,hl
  else
	ld	a,(vcurxof)
	add	a,h
	ld	d,a
	ld	a,(vcuryof)
	add	a,l
	ld	e,a
  endif
	ld	a,(vxfirst)
	or	a
	jr	z,noswap
	ld	a,e
	ld	e,d
	ld	d,a
noswap:	ld	hl,vcurprf	; prefix
	call	putseq
	ld	c,e		; y coord
	call	pcurnum
	ld	hl,vcursep	; separator
	call	putseq
	ld	c,d		; x coord
	call	pcurnum
	pop	hl		; postfix
	call	putseq
;;	call	TTFLSH
	pop	bc
	pop	de
	pop	hl
	ret

; H = bottom line, L = top line

SCRLRG:	push	hl
	push	de
	push	bc
	ld	de,vscrlrg	; postfix
	jr	s1		; continue via common code

pcurnum:ld	a,(vcurbcd)
	or	a
	jp	z,PUTCH
	ld	a,c
adec:	push	de
	push	bc
	ld	d,0
	ld	b,100
	call	ad1
	ld	b,10
	call	ad1
	add	a,'0'
	ld	c,a
	call	PUTCH
	pop	bc
	pop	de
	ret

ad1:	ld	c,'0'-1
ad2:	inc	c
	sub	b
	jr	nc,ad2
	add	a,b
	push	af
	ld	a,c
	cp	'0'
	jr	nz,ad4
	inc	d
	dec	d
	jr	z,ad5
ad4:	call	PUTCH
	ld	d,1
ad5:	pop	af
	ret

putseq:	ld	a,(hl)
	or	a
	ret	z
	push	bc
	ld	b,a
	inc	hl
pseq1:	ld	c,(hl)
	call	PUTCH
	inc	hl
	djnz	pseq1
	pop	bc
	ret

	end
