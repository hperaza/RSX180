;**********************************************************************;
;                                                                      ;
;   This file is part of ICP, an Indirect Command Processor for        ;
;   RSX180. Copyright (C) 2015-2021, Hector Peraza.                    ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

;   Special variables.

	.Z80

; Note: compile with ZSM4 (M80 reverts order of 'xy', etc.)

	include	ICP.INC
	include	SYSFN.INC
	include	LCB.INC
	include	ERRORS.INC

	public	SPECV,SPECW,FNDEV

	extrn	UCASE,BCD2BIN,FNDCMD,LNPTR,FREMEM,ADDHLA,AHEX2
	extrn	STYPE,SLEN,SNUM,SALNM,SVEOF,SVESC,SYSERR,EXSTAT
	extrn	SVDFLT,SVTMO,DECSTR,FDB,FNBSTR,FILERR,EXSTRI
	extrn	ERRCTL,ERRNUM,ERSEEN,STRCPY,ERROR,ERRSET,DSPTR

	cseg

;-----------------------------------------------------------------------

; Get value of special variable

SPECV:	ex	de,hl
	ld	de,PVTBL
	call	FNDCMD
	ret	c		; error if not found
	ld	a,(hl)		; fetch first argument (get)
	inc	hl
	ld	h,(hl)
	ld	l,a
	jp	(hl)		; go to processing routine (note: CY clear)

; Set value of special variable (for the few R/W ones)

SPECW:	push	hl		; push value
	ex	de,hl
	ld	de,PVTBL
	push	bc
	call	FNDCMD
	pop	bc
	pop	de		; value now in DE
	ret	c
	inc	hl
	inc	hl
	ld	a,(hl)		; fetch second argument (set)
	inc	hl
	ld	h,(hl)
	ld	l,a
	jp	(hl)		; go to processing routine (note: CY clear)

; Special <variables>

PVTBL:	db	4		; arg length

	; logical

	CMD	'ALPHAN',	valnum,	werr
	CMD	'ALTMOD',	vesc,	werr
	CMD	'DEFAUL',	vdeflt,	werr
	CMD	'EOF',		veof,	weof
	CMD	'ERSEEN',	veseen,	weseen
	CMD	'ESCAPE',	vesc,	werr
	CMD	'FALSE',	vfalse,	werr
;;	CMD	'LOCAL',	vlocal,	werr
	CMD	'NUMBER',	vnumb,	werr
	CMD	'PRIVIL',	vpriv,	werr
	CMD	'TIMOUT',	vtmout,	werr
	CMD	'TRUE',		vtrue,	werr

	; numeric

	CMD	'ERRCTL',	verctl,	werctl
	CMD	'ERRNUM',	verrno,	werrno
	CMD	'ERROR',	verror,	werr
	CMD	'ERRSEV',	versev,	wersev
	CMD	'EXSTAT',	vexst,	werr
	CMD	'FILERR',	vferr,	wferr
	CMD	'FORATT',	vfattr,	wfattr
	CMD	'MEMSIZ',	vmemsz,	werr
	CMD	'SEVERE',	vsev,	werr
	CMD	'SPACE',	vspace,	werr
	CMD	'STRLEN',	vstrl,	werr
	CMD	'SUCCES',	vsucc,	werr
	CMD	'SYMTYP',	vstype,	werr
	CMD	'SYSTEM',	vsys,	werr
	CMD	'SYUNIT',	vsyun,	werr
	CMD	'WARNIN',	vwarn,	werr

	; string

	CMD	'CLI',		vcli,	werr
	CMD	'DATE',		vdat,	werr
	CMD	'DIR',		vcdir,	werr
	CMD	'EXSTRI',	vexstr,	wexstr
	CMD	'FILATR',	vfattr,	werr
	CMD	'FILSPC',	vfspec,	werr
	CMD	'LIBDIR',	vlibd,	werr
	CMD	'LOGDEV',	vldev,	werr
	CMD	'LOGDIR',	vldir,	werr
	CMD	'LOGUIC',	vluic,	werr
	CMD	'NETNOD',	vhost,	werr
	CMD	'SYSDEV',	vsydev,	werr
	CMD	'SYDISK',	vsydsk,	werr
	CMD	'SYSID',	vsysv,	werr
	CMD	'SYSVER',	vsysv,	werr
	CMD	'TIME',		vtim,	werr
	CMD	'USER',		vldir,	werr
	CMD	'UIC',		vcuic,	werr

	db	0

; <SYMTYP>

vstype:	ld	a,(STYPE)
	jr	vna

; <STRLEN>

vstrl:	ld	a,(SLEN)
vna:	ld	l,a
	ld	h,0
	ld	c,V.NUM
	ret

; <ALPHAN>

valnum:	ld	a,(SALNM)
	jr	vtf

; <NUMBER>

vnumb:	ld	a,(SNUM)
vtf:	or	a
	jr	z,vfalse
	; continue below

; <TRUE>

vtrue:	ld	hl,0FFFFh
	ld	c,V.LOG		; variable type = logical
	ret

; <FALSE>

vfalse:	ld	hl,0
	ld	c,V.LOG		; variable type = logical
	ret

; <SUCCES>

vsucc:	ld	hl,EX.SUC
	ld	c,V.NUM
	ret

; <ERROR>

verror:	ld	hl,EX.ERR
	ld	c,V.NUM
	ret

; <WARNIN>

vwarn:	ld	hl,EX.WRN
	ld	c,V.NUM
	ret

; <SEVERE>

vsev:	ld	hl,EX.SEV
	ld	c,V.NUM
	ret

; <PRIVIL>

vpriv:	ld	hl,lcbbuf
	ld	c,I.USCB
	SC	.GIN
	ret	c		; TODO: error
	ld	hl,lcbbuf+L.ST
	bit	LS.PRV,(hl)
	jp	nz,vtrue
	jp	vfalse

; <LOCAL>

;;vlocal:
;;	scf
;;	ret

; <TIMOUT>

vtmout:	ld	a,(SVTMO)
	jp	vtf

; <DEFAUL>

vdeflt:	ld	a,(SVDFLT)
	jp	vtf

; <EOF>

veof:	ld	a,(SVEOF)
	jp	vtf

weof:	ld	a,c
	cp	V.LOG
	jp	nz,ERRSET
	ld	a,e
	ld	(SVEOF),a
	xor	a
	ret

; <ERSEEN> - returns TRUE if any of the following conditions is met:
; * <FILERR> < 0
; * <EXSTAT> worse than <WARNIN>
; * <EOF> is true
; * <ERRNUM> != 0
; * <ERSEEN> was set explicitly to <TRUE>

veseen:	ld	a,(FILERR)
	or	a
	jp	m,vtrue		; true if <FILERR> < 0
	ld	a,(EXSTAT)
	cp	EX.ERR
	jr	nc,vtrue	; true if <EXSTAT> worse than <WARNIN>
	ld	a,(SVEOF)
	or	a
	jr	nz,vtrue	; true if <EOF> is set
	ld	a,(ERRNUM)
	or	a
	jr	nz,vtrue
	ld	a,(ERSEEN)	; else return user-set <ERSEEN>
	jr	vtf

weseen:	ld	a,c
	cp	V.LOG
	jp	nz,ERRSET
	ld	a,e
	ld	(ERSEEN),a	; set user-set <ERSEEN>
	or	d
	ret	nz
	ld	(SVEOF),a	; if false, reset <EOF>,
	ld	(FILERR),a	;  <FILERR>,
	ld	(EXSTAT),de	;   <EXSTAT>,
	ld	(ERRNUM),a	;    and <ERRNUM>
	xor	a
	ret

; <ERRCTL>

verctl:	ld	a,(ERRCTL)
	jp	vna

werctl:	ld	a,c
	cp	V.NUM
	jp	nz,ERRSET
	ld	a,e
	ld	(ERRCTL),a
	xor	a
	ret

; <ERRNUM>

verrno:	ld	a,(ERRNUM)
	jp	vna

werrno:	ld	a,c
	cp	V.NUM
	jp	nz,ERRSET
	ld	a,e
	ld	(ERRNUM),a
	xor	a
	ret

; <EXSTAT>

vexst:	ld	hl,(EXSTAT)
	ld	c,V.NUM
	ret

; <ERRSEV>

versev:
	scf
	ret

wersev:	ld	a,c
	cp	V.NUM
	jp	nz,ERRSET
	scf
	ret

; <FILERR>

vferr:	ld	a,(FILERR)
	ld	l,a
	ld	h,0		; TODO: sign extend
	ld	c,V.NUM
	or	a
	ret	p
	dec	h
	ret

wferr:	ld	a,c
	cp	V.NUM
	jp	nz,ERRSET
	ld	a,e
	ld	(FILERR),a
	xor	a
	ret

; <ESCAPE>

vesc:	ld	a,(SVESC)
	jp	vtf

; <EXSTRI>

vexstr:	ld	hl,EXSTRI
	ld	c,V.STR
	or	a
	ret

wexstr:	ld	a,c
	cp	V.STR
	jp	nz,ERRSET
	ld	hl,(DSPTR)
	ld	de,EXSTRI
	call	STRCPY
	xor	a
	ret

; <MEMSIZ>

vmemsz:
	scf
	ret

; <LOGDEV>

vldev:
	scf
	ret

; <SYUNIT>

vsyun:	ld	de,'SY'
	ld	c,0
	call	FNDEV
	ld	l,c
	ld	h,0
	ld	c,V.NUM
	or	a
	ret

; <SYDISK>

vsydsk:	ld	de,'SY'
	ld	c,0
	call	FNDEV
	ld	hl,tmpbuf
	ld	(hl),e
	inc	hl
	ld	(hl),d
	inc	hl
	ld	(hl),0
	dec	hl
	dec	hl
	ld	c,V.STR
	or	a
	ret

; <SYSDEV>

vsydev:	ld	de,'LB'
	ld	c,0
	call	FNDEV
	ld	hl,tmpbuf
	push	hl
	ld	(hl),e
	inc	hl
	ld	(hl),d
	inc	hl
	ex	de,hl
	ld	l,c
	ld	h,0
	xor	a
	call	DECSTR
	pop	hl
	ld	c,V.STR
	or	a
	ret

FNDEV:	push	de
	push	bc
	ld	b,LUNDEV
	SC	.ALUN		; assign to misc LUN
	jr	c,fndv1
	ld	hl,tmpbuf
	ld	c,LUNDEV
	SC	.GTLUN		; det device info
	jr	c,fndv1
	ld	de,(tmpbuf)	; get physical device number
	ld	a,(tmpbuf+2)
	ld	c,a
	pop	hl
	pop	hl
	ld	hl,tmpbuf
	ret
fndv1:	pop	bc		; on error, return logical device name
	pop	de
	ret

; <LOGDIR> <USER>

vldir:	ld	hl,tmpbuf
	ld	c,GD.LOG
	SC	.GDIR
	ret	c		; TODO: error
	ld	c,V.STR
	ret

; <CURDIR>

vcdir:	ld	hl,tmpbuf
	ld	c,GD.TI
	SC	.GDIR
	ret	c		; TODO: error
	ld	c,V.STR
	ret

; <LOGUIC>
; <CURUIC>

vcuic:
vluic:	ld	hl,lcbbuf
	ld	c,I.USCB
	SC	.GIN
	ret	c		; TODO: error
	ld	hl,tmpbuf
	push	hl
	ld	(hl),'['
	inc	hl
	ex	de,hl
	ld	a,(lcbbuf+L.GRP)
	ld	l,a
	ld	h,0
	xor	a
	call	DECSTR
	ld	a,','
	ld	(de),a
	inc	de
	ld	a,(lcbbuf+L.USR)
	ld	l,a
	ld	h,0
	xor	a
	call	DECSTR
	ex	de,hl
	ld	(hl),']'
	inc	hl
	ld	(hl),0
	pop	hl
	ld	c,V.STR
	or	a
	ret

; <FILATR> <FORATT>

vfattr:
	scf
	ret

wfattr:
	scf
	ret

; <FILSPC>

vfspec:	ld	ix,FDB
	ld	hl,tmpbuf
	push	hl
	call	FNBSTR
	pop	hl
	ld	c,V.STR
	or	a
	ret

; <LIBDIR>

vlibd:	ld	hl,libdir
	ld	de,tmpbuf
	push	de
	call	STRCPY
	pop	hl
	ld	c,V.STR
	or	a
	ret

libdir:	db	'[SYSTEM]',0

; <SYSID> <SYSVER>

vsysv:	ld	hl,tmpbuf
	ld	c,I.VERS
	SC	.GIN
	ret	c
	push	hl
	ld	bc,(tmpbuf)
	ex	de,hl
	ld	l,b
	ld	h,0
	xor	a
	call	DECSTR
	ld	a,'.'
	ld	(de),a
	inc	de
	ld	l,c
	ld	h,0
	xor	a
	call	DECSTR
	pop	hl
	ld	c,V.STR
	ret

; <NETNOD>

vhost:	ld	hl,tmpbuf
	ld	c,I.HOST
	SC	.GIN
	jp	c,SYSERR
	ld	hl,tmpbuf
	ld	b,8
	push	hl
	call	trim
	pop	hl
	ld	c,V.STR
	or	a
	ret

trim:	ld	a,(hl)
	cp	' '
	jr	z,trm1
	inc	hl
	djnz	trim
trm1:	ld	(hl),0
	ret

; <SYSTEM>

; 1 = RSX180
; 2 = RSX280

vsys:	ld	hl,tmpbuf
	ld	c,I.VERS
	SC	.GIN
	ret	c
	ld	hl,(tmpbuf+2)
	ld	c,V.NUM
	ret

; <CLI>

vcli:	ld	hl,mcrcli
	ld	de,tmpbuf
	push	de
	call	STRCPY
	pop	hl
	ld	c,V.STR
	or	a
	ret

mcrcli:	db	'MCR',0

; <SPACE>

vspace:	call	FREMEM
	ld	c,V.NUM
	or	a
	ret

; <DATE>

vdat:	ld	hl,-8
	add	hl,sp
	ld	sp,hl		; allocate 8-byte buffer
	SC	.GDAT
	jp	c,vdt1
	ld	ix,0
	add	ix,sp
	ld	de,tmpbuf
	ld	a,(ix+3)	; day
	call	AHEX2
	ld	a,(ix+2)
	call	BCD2BIN
	dec	a		; make it base 0
	add	a,a
	add	a,a		; *4
	ld	hl,months
	call	ADDHLA
	ld	bc,5
	ldir
	ld	a,(ix+0)	; year
	call	AHEX2
	ld	a,(ix+1)
	call	AHEX2
	xor	a
	ld	(de),a
	jr	vdt1

months:	db	'-JAN-FEB-MAR-APR-MAY-JUN-JUL-AUG-SEP-OCT-NOV-DEC-'

; <TIME>

vtim:	ld	hl,-8
	add	hl,sp
	ld	sp,hl		; allocate 8-byte buffer
	SC	.GDAT
	jr	c,vdt1
	ld	ix,0
	add	ix,sp
	ld	de,tmpbuf
	ld	a,(ix+4)	; hours
	call	AHEX2
	ld	a,':'
	ld	(de),a
	inc	de
	ld	a,(ix+5)	; min
	call	AHEX2
	ld	a,':'
	ld	(de),a
	inc	de
	ld	a,(ix+6)	; secs
	call	AHEX2
	xor	a
	ld	(de),a
vdt1:	ld	hl,8
	add	hl,sp
	ld	sp,hl		; cleanup stack
	ld	hl,tmpbuf
	ld	c,V.STR
	or	a
	ret	z
	scf
	ret

werr:	ld	hl,roerr	; redefining a read-only symbol
	jp	ERROR

roerr:	db	'Redefining a read-only symbol',0

;-----------------------------------------------------------------------

	dseg

tmpbuf:	ds	40		; large enough for host name, full filespec
				;  and date and time time strings
lcbbuf:	ds	LCBSZ

	end
