;**********************************************************************;
;                                                                      ;
;   This file is part of ICP, an Indirect Command Processor for        ;
;   RSX180. Copyright (C) 2015-2021, Hector Peraza.                    ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

;   Indirect Command Processor - Main Section

; Note: assemble with ZSM4

	.Z80

	ident	'2.60'

	include	ICP.INC
	include	SYSFN.INC
	include	CLICB.INC
	include	TCB.INC
	include	FCB.INC
	include	DCB.INC
	include	QIO.INC
	include	SYSTEM.INC
	include	ERRORS.INC

CR	equ	0Dh
LF	equ	0Ah
TAB	equ	09h
ESC	equ	1Bh

	cseg

	public	PRMSG,ERRMSG,GPRMPT,MODE,LNBUF,LNPTR,MEMTOP,$MEMRY
	public	GETPOS,SETPOS,RDCMD,STPFLG,INPBUF,SYSERR,PROCLN
	public	EOFMSG,INDSTP,INDEOF,GSBTBL,GSBLVL,GTBUF,PRCMD
	public	ERROR,CMDERR,EXSTAT,XQTMOD,PRMCR,FDB,EXTEND,ADDEXT
	public	CHNIND,COMMAN,SETDIR,INDLVL,INDPDL,BLKLVL,BASEBL

	extrn	INTCMD,SKIPBL,SKPNAM,STRLEN,CLRVAR,SUBST,GCCL,PFN
	extrn	STRPEL,PUTCH,PUTSTR,TTFLSH,PERROR,HLDEC,CRLF,GETLNL
	extrn	ADDHLA,INIBUF,ALLOC,SETSV,PARSE,EXSTRI,STRCPY,FNDEV
	extrn	ERRLBL,DELLCL,ISBLNK,FNDCMD,UCASE,CPHLDE,PSHFIL
	extrn	POPFIL,POPBLK,ERRMEM,ERRCTL,FILERR,ERRNUM,ERSEEN
	extrn	ERRSEV,ERRTRP

;-----------------------------------------------------------------------

START::	ld	sp,stack	; setup stack

	call	INIT		; perform initializations

	call	GCCL		; get MCR command line
	call	STRPEL		; strip EOL
	call	SKIPBL		; skip any blanks
	call	SKPNAM		; skip first name (AT.)
	ld	(LNPTR),hl	; init pointer to user command line
	ld	de,LNBUF
	call	STRCPY		; copy to LNBUF for possible error message
	call	OPNCMD		; set COMMAN variable and open CMD file
	jr	c,exsev		; on error, exit

loop:	call	RDCMD		; read line from CMD file or device
	jr	c,quit		; quit on E.EOF
	call	PROCLN		; process the command line
	jr	nc,loop		; loop unless error happened
	ld	a,(STPFLG)
	or	a		; .STOP encountered?
	jr	nz,quit		; if yes, exit normally
fatal:	ld	a,(INDLVL)
	or	a		; all command files closed?
	jr	z,exsev		; exit loop if yes
	call	CLSIND		; else close current level
	jr	fatal		; and loop

exsev:	ld	hl,EX.SEV	; else exit with error code
	SC	.EXIT

quit:	ld	a,(INDLVL)
	or	a		; at nesting level 0?
	jr	z,exit		; exit if yes
	call	CLSIND		; else close current level
	ld	a,(STPFLG)
	or	a
	jr	nz,quit		; if .STOP, close all files and exit
	jr	loop		; loop to continue one level higher

exit:	call	EOFMSG
	ld	hl,(EXSTAT)	; exit normally with latest status code
	SC	.EXIT

;-----------------------------------------------------------------------

INIT:	ld	hl,0
	ld	de,GTBUF
	SC	.GTSK		; get task info
	ld	hl,(GTBUF+GT.END)
	ld	(MEMTOP),hl	; save address of top of memory
	call	INIBUF		; clear file buffers
	call	CLRVAR		; clear variables
	xor	a
	ld	(INDLVL),a	; clear indirect nesting level
	ld	(BLKLVL),a	; clear block nesting level
	ld	(STPFLG),a
	ld	(GSBLVL),a	; clear .GOSUB level
	ld	(XQTMOD),a
	ld	(ERRLBL),a	; clear .ONERR label
	ld	(ERRNUM),a	; clear <ERRNUM>
	ld	(ERRSEV),a	; clear <ERRSEV>
	ld	(ERRNUM),a	; clear <FILERR>
	ld	(ERSEEN),a	; clear user <ERSEEN>
	inc	a
	ld	(ERRCTL),a	; <ERRCTL> defaults to 1
	ld	hl,GTBUF+GT.VID
	ld	de,EXSTRI	; set <EXSTRI> variable to task version ID
	ld	bc,6
	ldir
	ld	(de),a
	ld	hl,prompt
	ld	(hl),CR
	inc	hl
	ld	(hl),LF
	inc	hl
	ex	de,hl
	ld	hl,GTBUF+GT.NAME; point to task name
	call	ckdots		; check for prefix dots
	ld	bc,3
	ldir			; set prompt from task name
	ex	de,hl
	ld	(hl),'>'
	inc	hl
	ld	(hl),0
	ld	hl,EX.SUC
	ld	(EXSTAT),hl
	call	GETDPR		; get CLI default prompt
	ret

ckdots:	ld	b,3
	push	hl
ckd1:	ld	a,(hl)
	cp	'.'
	jr	nz,ckd2
	inc	hl
	djnz	ckd1
	inc	sp
	inc	sp
	ret
ckd2:	pop	hl
	ret

;-----------------------------------------------------------------------

; Process indirect command.

PROCLN:	ld	(spsav),sp
	call	SUBST		; perform substitutions
	ld	hl,LNBUF
	call	TRACE
PRCMD:	call	SKIPBL
	ld	(LNPTR),hl
	or	a
	ret	z		; do not send empty lines to MCR
	cp	1Ah
	ret	z
	ld	a,(hl)
	cp	'.'		; internal command?
	jp	z,INTCMD	; jump if yes
	cp	'/'		; stop command?
	jr	z,INDSTP
	cp	'@'		; open indirect file?
	jr	z,INDOPN

PRMCR:	ld	hl,(LNPTR)	; else send command to MCR
	push	hl
	call	STRLEN
	pop	hl
	push	bc		; push length
	ld	de,LNBUF
	ldir			; move (tail of) command to start of buffer
	ex	de,hl
	ld	(hl),CR		; end line with a CR
	ld	(LNPTR),hl	;* remember this location
	inc	hl
	ld	(hl),0		; end with null for ECHO routine in SNDMCR
	pop	de		; pop length into DE
	inc	de		; account for CR terminator
	ld	hl,LNBUF
	call	SNDMCR		; send command to MCR
	ret	nc
	ld	hl,sperr
	jp	SYSERR		; spawn error

sperr:	db	E_SPW,1,'Spawn failure',0

INDEOF:	ld	sp,(spsav)
	call	CLSIND
	ld	a,(INDLVL)
	or	a
	ret	nz
INDSTP:	ld	a,1
	ld	(STPFLG),a
	ld	sp,(spsav)
	ld	a,E.EOF
	scf
	ret

INDOPN:	inc	hl
	ld	(LNPTR),hl
	jp	OPNCMD

CMDERR:	ld	hl,snerr	; 'syntax error'
ERROR:	ld	sp,(spsav)
	call	TRAP?		; trap this error?
	jp	z,ERRMSG	; no
	jp	ERRTRP		; yes

TRAP?:	ld	a,(hl)
	ld	(ERRNUM),a
	inc	hl
	ld	a,(hl)
	ld	(ERRSEV),a
	ld	a,(ERRCTL)
	and	(hl)		; processing this error class?
	inc	hl
	ret	z
	ld	a,(ERRLBL)
	or	a		; error trap set?
	ret			; return with flags

snerr:	db	E_SNE,2,'Syntax error',0

;-----------------------------------------------------------------------

; Trace internal command, if enabled

TRACE:	ld	ix,MODE
	bit	B1.TRC,(ix+1)	; trace mode enabled?
	ret	z
	push	hl
	call	SKIPBL
	cp	'.'		; internal command?
	jr	nz,tr1		; return if not
	bit	B0.DPY,(ix+0)	; display mode?
	jr	z,tr2		; skip if not
	push	hl
	ld	hl,mcrdpr	; else display MCR prompt
	call	PUTSTR
	pop	hl
	jr	tr3
tr2:	call	CRLF
tr3:	push	hl
	ld	hl,1
	xor	a
	call	HLDEC		; display file nesting level
	ld	c,'!'
	call	PUTCH
	pop	hl
	call	PUTSTR		; display command
	ld	c,CR
	call	PUTCH
	call	TTFLSH
tr1:	pop	hl
	ret

;-----------------------------------------------------------------------

; Send command to MCR and wait until it is processed.
; Called with HL = address of command block, DE = length

SNDMCR:	ld	(mcrtdb+TD.CMD),hl
	ld	(mcrtdb+TD.CML),de
	call	ECHO		; echo command, if enabled
	ccf
	ret	nc		; return with CY clear if nothing to do
	ld	hl,(LNPTR)	;* get saved location of CR terminator
	ld	(hl),ESC	;* replace with ESC
	ld	hl,EX.SUC
	ld	(EXSTAT),hl	; we want status from task execution
	ld	hl,mcrtdb
	ld	a,(XQTMOD)
	or	a
	ld	e,SPWFLG
	jr	z,sm1
	ld	e,XQTFLG
sm1:	ld	bc,EXSTAT
	SC	.RQST		; request MCR and connect
	ret	c		; an error here is fatal
	ld	hl,XQTMOD
	ld	a,(hl)
	ld	(hl),0
	or	a		; check .XQT flag
	ret	nz		; return if set
	ld	e,SPWFLG
	SC	.STSE		; else stop until task completes
	ret

ECHO:	ld	hl,LNBUF
	ld	a,(hl)
	cp	CR		; empty line?
	scf
	ret	z
	or	a
	scf
	ret	z		; return with CY set if yes
	or	a
	ld	ix,MODE
	bit	B1.QIE,(ix+1)	; quiet mode?
	jr	z,echo0		; jump if not
	ld	hl,LNBUF
	ld	a,(hl)
	cp	';'		; comment line?
	scf
	ret	z		; return with CY set if yes
	xor	a		; else return with CY clear
	ret

echo0:	bit	B0.DPY,(ix+0)	; display mode?
	jr	z,echo1		; skip if not
	ld	hl,mcrdpr	; else display MCR prompt
	call	PUTSTR
	call	TTFLSH
	jr	echo2
echo1:	call	CRLF
echo2:	ld	hl,LNBUF
	ld	a,(hl)
	cp	';'		; comment line?
	push	af
	jr	nz,echo3	; branch if not
	bit	B0.DPY,(ix+0)	; display mode?
	jr	nz,echo4	; jump if yes
	inc	hl		; else do not display the semicolon
	jr	echo4
echo3:	bit	B1.MCR,(ix+1)	; MCR mode?
	ld	c,'!'		; if not, display a comment char to tell
	call	z,PUTCH		;  that commands are not being sent to MCR
echo4:	call	PUTSTR		; output command
	call	TTFLSH
	pop	af
	scf
	ret	z		; return with CY set if comment line
	bit	B1.MCR,(ix+1)
	ret	z		; return with CY set if MCR is disabled
	xor	a		; else return with CY clear
	ret

;-----------------------------------------------------------------------

; Get default MCR prompt.

GETDPR:	ld	c,1
	SC	.SUPER
	jr	c,gdpr0
	ld	de,($CLIST)	; TODO: get CLICB associated to terminal
	ld	a,d
	or	e		; valid CLICB?
	jr	nz,gdpr1	; jump if yes
gdpr0:	ld	hl,DPR
	ld	bc,DPRL
	jr	gdpr2		; else use the 'emergency' prompt
gdpr1:	ld	hl,CL.DPL
	add	hl,de
	ld	a,(hl)
	and	1Fh		; trim length just in case
	ld	c,a
	ld	b,0
	ld	hl,CL.DAT
	add	hl,de
gdpr2:	ld	de,mcrdpr
	ldir
	ld	c,0
	SC	.SUPER
	ret

DPR:	db	CR,LF,'>',0	; 'emergency' prompt in case CLICB is not set
DPRL	equ	$-DPR

;-----------------------------------------------------------------------

; Print error message in the form 'AT. -- message' followed by the
; source line where the error occurred.

ERRMSG:	push	hl
	ld	hl,eprfx
	call	PUTSTR
	pop	hl
	call	PUTSTR		; output message
	call	PRLN
	call	CRLF
	ld	hl,LNBUF
	call	PUTSTR		; print also offending line
	ld	c,CR
	call	PUTCH
	scf
	ret

PRLN:	ld	a,(INDLVL)
	or	a
	ret	z		; just in case
	ld	a,(luninf+4)
	bit	DV.DIR,a
	ret	z		; return if not a directory device (file)
	ld	hl,atln
	call	PUTSTR
	ld	hl,(lnnum)
	xor	a
	jp	HLDEC

; Print message in the form 'AT. -- message'

PRMSG:	push	hl
	ld	hl,eprfx
	call	PUTSTR
	pop	hl
	call	PUTSTR		; output message
	ld	c,CR
	call	PUTCH
	scf
	ret

SYSERR:	ld	sp,(spsav)
SYSER1:	ld	c,a
	ld	a,h
	or	l
	ld	a,c
	jr	z,SYSMSG
	call	TRAP?		; trap this error?
	jp	nz,ERRTRP	; yes
	ld	a,c
SYSMSG:	push	af
	push	hl
	ld	hl,eprfx
	call	PUTSTR
	pop	hl
	ld	a,h
	or	l
	jr	z,sms1
	call	PUTSTR
	ld	c,':'
	call	PUTCH
	ld	c,' '
	call	PUTCH
sms1:	pop	af
	call	PERROR
	ld	c,CR
	call	PUTCH
	scf
	ret

eprfx:	db	CR,LF,'AT. -- ',0
atln:	db	' at line ',0

EOFMSG:	ld	ix,MODE
	bit	B1.QIE,(ix+1)
	ret	nz		; return if quiet mode
	bit	B0.DPY,(ix+0)
	ret	z		; return if display disabled
	ld	hl,mcrdpr
	call	PUTSTR
	call	TTFLSH
	ld	hl,ieeof
	call	PUTSTR
	call	TTFLSH
	ret

ieeof:	db	'@ <EOF>',CR,0

;-----------------------------------------------------------------------

; Get MCR prompt and return with CY clear if display mode is enabled.

GPRMPT:	ld	hl,mcrdpr
	ld	ix,MODE
	bit	B0.DPY,(ix+0)	; display mode?
	scf
	ret	z		; return with CY set if not
	or	a
	ret

;-----------------------------------------------------------------------

; Push current context and open next indirect command file.

OPNCMD:	ld	a,(INDLVL)	; check nesting level
	cp	MAXIND		; at maximum?
	ld	hl,ielvl
	jp	nc,ERROR	; error if yes - too many nested files
	or	a
	call	nz,CPUSH	; push current context
	ld	hl,(LNPTR)
	call	SKIPBL		; skip blanks
	ld	(LNPTR),hl
	push	hl		; save pointer to command line
	call	OPEN		; open the file
	pop	de
	ret	c
	push	de
	ld	hl,INDLVL
	inc	(hl)		; increase nesting level
	ld	a,(MODE+2)
	bit	B2.LOC,a	; shared locals?
	jr	nz,ind1		; branch if yes
	ld	a,(hl)
	dec	a
	call	nz,PSHFIL	; else mark position in symbol table
ind1:	pop	hl		; restore pointer to command line
	jp	SETCMN		; set COMMAN variable and return

; Parse file name, decode switches and open the file

OPEN:	ld	ix,FDB
	call	PFN		; get file name
	ld	(LNPTR),hl
	call	SETDEF		; set defaults for any missing fields
	call	INITMD		; reset MODE bits
	call	PROCSW		; process switches
	jp	c,CMDERR

	ld	hl,-1
	ld	(indblk),hl	; reset blkno
	ld	de,(FDB+F.DEV)
	ld	a,(FDB+F.UNIT)
	ld	c,a		; device name in DE-C
	ld	a,(INDLVL)
	add	a,LUNIND
	ld	(qio1+Q.LUN),a
	ld	(qio2+Q.LUN),a
	ld	b,a		; LUN in B
	SC	.ALUN		; assign LUN
	jr	c,opn1

	ld	hl,luninf
	ld	a,(INDLVL)
	add	a,LUNIND
	ld	c,a
	SC	.GTLUN		; get LUN info
	jr	c,opn1

	ld	a,(luninf+4)
	bit	DV.DIR,a	; directory device?
	jr	z,opn3		; branch if not

	call	SETDIR		; set task directory to current directory
	jp	c,opn1		;  in case the user changed it

	ld	l,IO.ACC
	ld	h,SF.ACR OR SF.SHR
	ld	(qio1+Q.FUNC),hl
	ld	hl,qio1
	SC	.QIO		; open the command file
	jr	c,opn1
	ld	a,(res)		; get result code (lo-byte)
	or	a
	jr	z,opn2		; branch on success
opn1:	ld	hl,ieopn
	jp	SYSER1		; on error, display message and return

opn2:	ld	hl,IO.RAT
	ld	(qio1+Q.FUNC),hl
	ld	hl,FINFSZ
	ld	(qio1+Q.LEN),hl
	ld	hl,qio1
	SC	.QIO		; read attrib to get full filespec
	jr	opn4

opn3:	ld	hl,luninf
	ld	de,FDB+F.DEV
	ld	bc,3
	ldir
opn4:	ld	hl,0
	ld	(lnnum),hl	; clear current line number
	ld	(indcnt),hl	; invalidate input buffer
	ret

; Initialize MODE bits

INITMD:	ld	ix,MODE
	ld	(ix+0),0
	ld	(ix+1),0
	ld	(ix+2),0
	set	B0.DPY,(ix+0)	; .enable display
	set	B1.GBL,(ix+1)	; .enable global
	set	B1.LWC,(ix+1)	; .enable lowercase
	set	B1.MCR,(ix+1)	; .enable MCR
	set	B1.TMO,(ix+1)	; .enable timeout
	ret

; Process command line switches

PROCSW:	ld	hl,(LNPTR)
	ld	a,(hl)		; get char following file name or prev switch
	call	ISBLNK		; blank?
	ret	z		; yes, return
	cp	'/'		; switch delimiter?
	scf
	ret	nz		; no, return error
	inc	hl		; skip delimiter
	call	CHKNEG		; see if negated
	ld	de,SWTBL
	call	FNDCMD		; find switch in table
	ret	c		; error if not found
	ld	c,(hl)		; fetch argument
	inc	hl
	ld	b,(hl)
	ld	(LNPTR),de	; remember where we stopped
	ld	a,80h		; initial bit mask
	inc	c
sw1:	rlca			; get bit into position
	dec	c
	jr	nz,sw1
	ld	c,a
	ld	hl,MODE
	ld	a,b
	call	ADDHLA		; index into MODE array
	ld	a,(res)
	or	a		; negated switch?
	ld	a,c
	jr	z,sw2		; no, set bit
	cpl
	and	(hl)		; else clear bit
	jr	sw3
sw2:	or	(hl)		; set bit
sw3:	ld	(hl),a
	jr	PROCSW		; loop to process next

CHKNEG:	xor	a
	ld	(res),a		; use 'res' as temporary storage
	ld	a,(hl)
	cp	'-'
	jr	z,neg1
	call	UCASE
	cp	'N'
	ret	nz
	inc	hl
	ld	a,(hl)
	call	UCASE
	cp	'O'
	jr	z,neg1
	dec	hl
	ret
neg1:	inc	hl
	ld	a,0FFh
	ld	(res),a
	ret

SWTBL:	db	2		; arg length
	CMD	'CLI',	<(1 SHL 8) OR B1.MCR>
	CMD	'DE',	<(0 SHL 8) OR B0.DEL>
	CMD	'LO',	<(2 SHL 8) OR B2.LOC>
	CMD	'MC',	<(1 SHL 8) OR B1.MCR>
	CMD	'TR',	<(1 SHL 8) OR B1.TRC>
	db	0

; Set variable COMMAN to command line. Called with HL = address of
; command line string.

SETCMN:	call	ALLOC		; allocate space for command line string
	jp	c,ERRMEM
	ld	de,COMMAN
	xor	a		; clear 'special variable' flag
	call	SETSV		; set COMMAN string variable
	ret	c		; on error, return (message already displayed)
	ld	hl,ARGS
	ld	(LNPTR),hl
	call	PARSE		; split arguments
	or	a
	ret

COMMAN:	db	'COMMAN',0
ARGS:	db	'COMMAN " " P0 P1 P2 P3 P4 P5 P6 P7 P8 P9',0

; Read a single line from indirect file (or from console, depending on
; program invocation).

RDCMD:	ld	a,(INDLVL)	; indirect file open?
	or	a
	ld	a,E.EOF
	scf
	ret	z		; return if not

	ld	a,(luninf+4)
	bit	DV.DIR,a	; reading from file?
	jr	nz,rcm1		; branch if yes

	; read from terminal

	call	TTFLSH
	ld	bc,prompt
	ld	hl,INPBUF	; else read line from console
	ld	de,131		; D = 0 (read with echo), E = length
	ld	a,(INDLVL)
	dec	a
	add	a,LUNIND
	call	GETLNL		; note that A returns with E.EOF if ^Z
	push	af
	call	STRPEL		; strip EOL
	pop	af
	ret	nc
	call	CLSIND		; close current level
	jp	RDCMD		; and restart

	; read from file

rcm1:	ld	hl,(lnnum)
	inc	hl
	ld	(lnnum),hl
	ld	hl,INPBUF	; read line from file
	ld	b,131
rloop:	push	hl
	push	bc
	call	INDGC
	pop	bc
	pop	hl
	jr	c,reof		; exit on EOF
	cp	LF
	jr	z,rloop
  IF 0
	ld	(hl),a
	inc	hl
	cp	CR
	jr	z,reol
  ELSE
	cp	CR
	jr	z,reol
	ld	(hl),a
	inc	hl
  ENDIF
	djnz	rloop
	ld	hl,ielnsz	; if line too long, exit with error
 if 0
	call	ERRMSG
	call	CLSIND		; close current level
	jp	RDCMD		; and restart
 else
	jp	ERROR
 endif

reol:	xor	a
	ld	(hl),a		; add a trailing zero
	ret

reof:
 if 0
	call	CLSIND		; close current level
	jp	RDCMD		; and restart
 else
	ld	a,E.EOF
	scf
	ret
 endif

; Get char from indirect file

INDGC:	ld	hl,(indcnt)
	ld	a,h
	or	l
	jr	z,indnxt
	dec	hl
	jr	igch

indnxt:	ld	hl,0
	ld	(indpos),hl
	ld	hl,(indblk)
	inc	hl
	ld	(indblk),hl
	call	IREAD		; read next block
	ret	c
	ld	a,h
	or	l
	scf
	ret	z
	dec	hl		; since we're about to fetch first char
igch:	ld	(indcnt),hl
	ld	hl,indbuf
	ld	de,(indpos)
	add	hl,de
	ld	a,(hl)
	inc	de
	ld	(indpos),de
	or	a
	ret

; Read block from file

IREAD:	ld	hl,(indblk)
	ld	(qio2+Q.BLK),hl
	ld	hl,0
	ld	(qio2+Q.BLK+2),hl
	ld	hl,qio2
	SC	.QIO
	ret	c
	ld	a,(res)		; check result code
	or	a
	scf
	ret	nz
	ld	hl,(nread)
	xor	a
	ret

; Close current indirect file, if open, and pop previous one.

CLSIND:	ld	a,(INDLVL)
	dec	a
	ld	e,a
	call	POPFIL		; purge old variables
	ld	a,(INDLVL)
	or	a
	ret	z
	call	CLOSE		; close the file
	ld	hl,INDLVL
	dec	(hl)
	ret	z
	call	CPOP		; pop previous context
	xor	a	
	ret

CLOSE:	ld	a,(luninf+4)
	bit	DV.DIR,a
	ret	z
	ld	hl,IO.DEA
	ld	(qio1+Q.FUNC),hl
	ld	hl,qio1
	SC	.QIO		; close the file
	ret

; Close current indirect file, if open, and chain to next.

CHNIND:	ld	a,(INDLVL)
	or	a
	ret	z
	dec	a
	ld	e,a
	call	POPFIL		; purge old variables
	call	BASEBL
	inc	a
	ld	e,a
	call	POPBLK		; purge blocks to base level
	call	CLOSE		; close current file
	ld	hl,(LNPTR)
	call	SKIPBL
	push	hl		; save pointer to command line
	call	OPEN		; open the file
	pop	de
	ret	c
	push	de
	ld	a,(MODE+2)
	bit	B2.LOC,a	; shared locals?
	ld	a,(BLKLVL)
	ld	e,a
	call	z,DELLCL	; delete local variables if not
chn1:	pop	hl		; restore pointer to command line
	jp	SETCMN		; set COMMAN variable and return

ielvl:	db	E_TMC,2,'Too many nested command files',0
ielnsz:	db	E_LEN,2,'Line too long',0
ieopn:	db	E_FNF,2,'Failed to open command file',0

; Set indirect file position, HL = block #, DE = offset, BC = line #.

SETPOS:	ld	a,(INDLVL)
	or	a
	ret	z
	ld	a,(luninf+4)
	bit	DV.DIR,a
	ret	z
	ld	(indpos),de
	ld	(lnnum),bc
	ld	de,(indblk)
	call	CPHLDE		; block already loaded?
	jr	z,sp1
	ld	(indblk),hl
STPOS:	call	IREAD		; read file block
	ret	c
	jr	sp2
sp1:	ld	hl,(nread)
sp2:	ld	de,(indpos)
	or	a
	sbc	hl,de
	ld	(indcnt),hl
	ret	nc
	ld	a,E.IO
	ret

; Get indirect file position. For best performance, use cached values
; and do not call FPOS.

GETPOS:	ld	hl,(indblk)
	ld	de,(indpos)
	ld	bc,(lnnum)
	ret

; Push current command file context

CPUSH:	ld	a,(INDLVL)
	or	a
	ret	z
	dec	a
	ld	e,a
	add	a,a		; *2
	add	a,a		; *4
	ld	c,a
	add	a,a		; *8
	add	a,c		; *12 (push-down struct size)
	ld	c,a
	ld	b,0
	ld	hl,INDPDL
	add	hl,bc
	ld	a,e
	add	a,LUNIND
	ld	(hl),a		; store LUN
	inc	hl
	ld	a,(luninf+4)
	ld	(hl),a		; store device type
	inc	hl
	ld	bc,(indblk)
	ld	(hl),c		; store current block
	inc	hl
	ld	(hl),b
	inc	hl
	ld	bc,(indpos)
	ld	(hl),c		; store offset into block
	inc	hl
	ld	(hl),b
	inc	hl
	ld	bc,(lnnum)
	ld	(hl),c		; store line number
	inc	hl
	ld	(hl),b
	inc	hl
	ex	de,hl
	ld	hl,MODE
	ld	bc,3
	ldir			; store MODE bits
	ld	a,(BLKLVL)
	ld	(de),a		; store current block nesting level
	ret

; Pop current command file context

CPOP:	ld	a,(INDLVL)
	or	a
	ret	z
	dec	a
	add	a,a		; *2
	add	a,a		; *4
	ld	c,a
	add	a,a		; *8
	add	a,c		; *12 (push-down struct size)
	ld	c,a
	ld	b,0
	ld	hl,INDPDL
	add	hl,bc
	ld	a,(hl)		; get LUN
	ld	(qio1+Q.LUN),a	; restore QIO blocks
	ld	(qio2+Q.LUN),a
	inc	hl
	ld	a,(hl)		; get device type
	ld	(luninf+4),a
	push	af
	inc	hl
	ld	c,(hl)		; get old block number
	inc	hl
	ld	b,(hl)
	ld	(indblk),bc
	inc	hl
	ld	c,(hl)		; get old block offset
	inc	hl
	ld	b,(hl)
	ld	(indpos),bc
	inc	hl
	ld	c,(hl)		; get old line number
	inc	hl
	ld	b,(hl)
	ld	(lnnum),bc
	inc	hl
	ld	de,MODE
	ld	bc,3
	ldir			; restore MODE bits
	pop	af
	bit	DV.DIR,a
	push	hl
	call	nz,STPOS	; restore file position
	pop	hl
	ld	a,(hl)
	ld	(BLKLVL),a	; restore block level
	inc	a
	ld	e,a
	call	POPBLK		; purge extra frames
	ret

; Return the base block level for the current file

BASEBL:	ld	a,(INDLVL)
	or	a
	ret	z		; return zero if no file is open (unlikely)
	dec	a
	ret	z		; or at root file
	dec	a
	add	a,a		; *2
	add	a,a		; *4
	ld	c,a
	add	a,a		; *8
	add	a,c		; *12 (push-down struct size)
	ld	c,a
	ld	b,0
	ld	hl,INDPDL+11
	add	hl,bc
	ld	a,(hl)
	ret

;-----------------------------------------------------------------------

; Default to TI: if no file name was specified, and set the extension
; to .CMD if none was specified.

SETDEF:	ld	a,(ix+F.ATTR)
	and	FN.DEV OR FN.DIR OR FN.NAME OR FN.EXT
	jr	nz,std1
	ld	hl,TIDEV
	ld	de,FDB+F.DEV
	ld	bc,3
	ldir
	ld	a,(ix+F.ATTR)
	or	FN.DEV
	ld	(ix+F.ATTR),a
std1:	ld	hl,CMDEXT
ADDEXT:	ld	a,(ix+F.ATTR)
	and	FN.EXT
	ret	nz
	ld	de,FDB+F.EXT
	ld	bc,3
	ldir
	ld	a,(ix+F.ATTR)
	or	FN.EXT
	ld	(ix+F.ATTR),a
	ret

TIDEV:	db	'TI',0
CMDEXT:	db	'CMD'

; Set task's defalut directory to current directory

SETDIR:	ld	hl,dirnam
	ld	c,GD.TI
	SC	.GDIR
	ret	c
	ld	c,SD.TSK
	SC	.SDIR
	ret

;-----------------------------------------------------------------------

; Extend task limits by the specified amount

EXTEND:	SC	.EXTSK
	ret	c
	ld	hl,0
	ld	de,GTBUF
	SC	.GTSK
	ret	c
	ld	hl,(GTBUF+GT.END)
	ld	(MEMTOP),hl
	ret

;-----------------------------------------------------------------------

	dseg

prompt:	db	CR,LF,'AT.>',0

mcrdpr:	ds	32

GTBUF:	ds	GTKSZ		; buffer for task info

mcrtdb:	db	'MCR...'	; task name
	dw	0		; address of command line block
	dw	0		; length of command line
	db	0,0,0		; attr, user, grp (not used)
	db	'TI',0		; terminal device and unit (not used)
	dw	0,0		; no data block to send

EXSTAT:	ds	2

LNBUF:	ds	132		; MCR command/substitution buffer
LNPTR:	ds	2

FDB:	ds	FINFSZ		; FDB for cmd file, .OPEN command, etc

luninf:	ds	6		; .GTLUN buffer
dirnam:	ds	9		; name of current directory

INDLVL:	ds	1		; current indirect file nesting level
indbuf:	ds	512		; buffer for indirect file I/O
indpos:	ds	2		; offset to current char in indbuf
indcnt:	ds	2		; number of bytes left in indbuf
indblk:	ds	2		; current indirect file block number
BLKLVL:	ds	1		; current block nesting level

INDPDL:	ds	MAXIND*12	; indirect nesting push-down list

qio1:	QIOW$	IO.ACC,LUNIND,9,res,,<FDB,0>
qio2:	QIOW$	IO.RVB,LUNIND,9,res,,<indbuf,512,0,0,0>
res:	ds	2		;!   do not   !
nread:	ds	2		;!change order!

INPBUF:	ds	132		; input buffer
lnnum:	ds	2

STPFLG:	ds	1

GSBTBL:	ds	MAXGSB*8	; .GOSUB context (blkno, offset, lineno
				;  as return pointers, as well as current
				;   block and file nesting level)
GSBLVL:	ds	1		; current .GOSUB nesting level

XQTMOD:	ds	1

MEMTOP:	ds	2
MODE:	ds	3		; .ENABLE/.DISABLE mode bits
$MEMRY:	ds	2

spsav:	ds	2

	ds	256		; stack space
stack	equ	$

	end	START
