;**********************************************************************;
;                                                                      ;
;   This file is part of RSX180, a multi-tasking OS for the Z180.      ;
;   Copyright (C) 1985-2023, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

	NAME	('FLAGS')
	TITLE	'RSX180 Flag Management'

;----------------------------------------------------------------------;
;                                                                      ;
;	Flag handling routines                                         ;
;                                                                      ;
;----------------------------------------------------------------------;

	.Z80

	include	TCB.INC
	include	ERRORS.INC

	public	CLRFLG		; clear event flag
	public	SETFLG		; set event flag
	public	CHKFLG		; read event flag
	public	CKWMSK		; check flag wait mask
	public	FLWAIT		; wait for single event flag
	public	FLWTLO		; wait for logical OR of event flags
	public	FLSTOP		; stop for single event flag
	public	FLSTLO		; stop for logical OR of event flags

	extrn	$FNTCB,$LKTCB,$WLIST,TCONT

	cseg

;-----------------------------------------------------------------------

; Clear flag.

; Input:
;   BC = TCB address of flag owner
;   E  = flag number (1..32)
; Returns:
;   CY flag clear on success and old flag polarity in A
;   CY flag set on error and error code in A

CLRFLG:	ld	hl,T.FLGS
	add	hl,bc		; point to flag bits in TCB
	call	FLGMSK		; compute offset and bit mask
	ret	c		; on error, return
	add	hl,bc		; index into flag array
	ld	d,a		; save mask
	and	(hl)		; get old flag state
	push	af		; save it
	ld	a,d
	cpl			; invert bit mask
	and	(hl)		; clear the flag
	ld	(hl),a
	pop	af
	ret			; return prev state (note CY is clear)

;-----------------------------------------------------------------------

; Set flag and wakeup the corresponding task.

; Input:
;   BC = TCB address of flag owner
;   E  = flag number (1..32)
; Returns:
;   CY flag clear and A=0 on success
;   CY flag set on error and error code in A

; Notes:
; - We need to ensure that task still exists (and is active) by calling
;   $FNTCB, since this routine can be called by privileged tasks such
;   as SYSFCP to set another task's flags.

SETFLG:	push	de
	push	bc
	call	$FNTCB		; ensure task still exists
	pop	hl		; TCB address now in HL
	pop	de
	ret	c
	call	FLGMSK		; compute offset and bit mask
	ret	c		; on error, return
	push	hl		; push TCB address
	ld	de,T.FLGS
	add	hl,de		; point to flag array in TCB
	add	hl,bc		; index into flag array
	or	(hl)		; set flag
	ld	(hl),a
	pop	bc		; task TCB back into BC
	call	CKWMSK		; check wait mask
	call	nz,TCONT	; if flag set, resume task
	xor	a
	ret

;-----------------------------------------------------------------------

; Check wait mask to see if a flag the task is waiting for is set.

; Input:
;   BC = TCB address
; Returns:
;   Z if none of the flags the task is waiting for is set,
;   NZ otherwise.

; Preserves BC.

CKWMSK:	ld	hl,T.FLGS
	add	hl,bc
	ex	de,hl		; DE = flag array
	ld	hl,T.WAIT
	add	hl,bc		; HL = wait mask
	push	bc
	ld	b,4
ckm1:	ld	a,(de)
	and	(hl)		; target flag set?
	jr	nz,ckm2		; return NZ if yes
	inc	hl
	inc	de
	djnz	ckm1
ckm2:	pop	bc
	ret			; else return Z

;-----------------------------------------------------------------------

; Check flag. Called typically from current task context.

; Input:
;   BC = TCB address
;   E  = flag number (1..32)
; Returns:
;   Z flag set and A=0 if flag not set, else NZ and A<>0
;   CY set on error and error code in A.
;   Flag number still in E.

CHKFLG:	ld	hl,T.FLGS
	add	hl,bc		; point to flag bits in TCB
	call	FLGMSK		; compute offset and bit mask
	ret	c		; on error, return
	add	hl,bc		; index into flag array
	and	(hl)		; get flag state
	ret

;-----------------------------------------------------------------------

; Wait for event flag.

; Input:
;   BC = TCB address
;   E  = flag number (1..32)

; Return immediately if in the meantime the flag has been set.

FLWAIT:	call	SETMSK		; setup wait mask
	ret	c		; on error, return
fw0:	call	CKWMSK		; check if flag is set
	ret	nz		; return if yes
	call	$FNTCB		; find task in active list: IX=TCB, IY=prev
	ret	c
	ld	a,(ix+T.ST+1)
	or	a		; task in running state?
	jr	z,fw1		; skip next test if yes
	bit	T2.EFW,(ix+T.ST+1) ; already waiting?
	ld	a,E.TSTP
	scf
	ret	nz		; if yes, return error
fw1:	set	T2.EFW,(ix+T.ST+1) ; set 'event flag waiting' status bit
	ld	a,(ix+T.ACTL)	; get link field
	ld	(iy),a		; update link of previous TCB (unlink)
	ld	a,(ix+T.ACTL+1)
	ld	(iy+1),a
	ld	iy,$WLIST
	ld	bc,T.ACTL
	call	$LKTCB		; move task to waiting list
	xor	a		; return success
	ret

;-----------------------------------------------------------------------

; Wait for logical OR of event flags

; Input:
;   BC = TCB address
;   DE = address of 4-byte flag mask

; Return immediately if in the meantime any of the flags has been set.

FLWTLO:	ld	hl,T.WAIT
	add	hl,bc
	ex	de,hl		; HL = src, DE = dst
	push	bc
	ld	bc,4
	ldir			; copy wait mask
	pop	bc
	jr	fw0		; continue via common code

;-----------------------------------------------------------------------

; Stop for event flag.

; Input:
;   BC = TCB address
;   E  = flag number (1..32)

; Return immediately if in the meantime the flag has been set.

FLSTOP:	call	SETMSK		; setup wait mask
	ret	c		; on error, return
fs0:	call	CKWMSK		; check if flag is set
	ret	nz		; return if yes
	call	$FNTCB		; find task in active list: IX=TCB, IY=prev
	ret	c
	ld	a,(ix+T.ST+1)
	or	a		; task in running state?
	jr	z,fs1		; skip next test if yes
	bit	T2.SEF,(ix+T.ST+1) ; already stopped?
	ld	a,E.TSTP
	scf
	ret	nz		; if yes, return error
fs1:	set	T2.SEF,(ix+T.ST+1) ; set 'stopped for event flag' status bit
	ld	a,(ix+T.ACTL)	; get link field
	ld	(iy),a		; update link of previous TCB (unlink)
	ld	a,(ix+T.ACTL+1)
	ld	(iy+1),a
	ld	iy,$WLIST
	ld	bc,T.ACTL
	call	$LKTCB		; move task to waiting list
	xor	a		; return success
	ret

;-----------------------------------------------------------------------

; Stop for logical OR of event flags

; Input:
;   BC = TCB address
;   DE = address of 4-byte flag mask

; Return immediately if in the meantime any of the flags has been set.

FLSTLO:	ld	hl,T.WAIT
	add	hl,bc
	ex	de,hl		; HL = src, DE = dst
	push	bc
	ld	bc,4
	ldir			; copy wait mask
	pop	bc
	jr	fs0		; continue via common code

;-----------------------------------------------------------------------

; Setup wait mask according to the specified event flag number.

; Input:
;   BC = TCB address
;   E  = event flag number (1..32)

; Preserves BC and E.

SETMSK:	push	bc		; push TCB address
	ld	hl,T.WAIT
	add	hl,bc
	ld	b,4
	push	hl		; push T.WAIT address
sm1:	ld	(hl),0		; clear wait mask
	inc	hl
	djnz	sm1
	pop	hl		; pop T.WAIT address
	call	FLGMSK		; compute offset and bit mask
	jr	c,sm2		; on error, return
	add	hl,bc		; index into wait mask
	or	(hl)
	ld	(hl),a		; set bit in wait mask
	xor	a		; success, clear CY
sm2:	pop	bc		; pop TCB address back into BC
	ret

;-----------------------------------------------------------------------

; Compute offset and bit mask from flag number.

; Input:
;   E = flag number (1..32)
; Returns:
;   BC = offset
;   A  = bit mask
;   CY clear on success
;   CY set on error and error code in A (flag value out of range)

; Preserves HL, D.

FLGMSK:	dec	e		; make flag number zero-based
	ld	a,e
	rrca
	rrca
	rrca			; upper 5 bits are byte number in flag array
	and	1Fh
	ld	c,a		; flag byte offset in reg C
	cp	4
	ccf
	ld	a,E.BADFL
	ret	c		; invalid flag, return with CY set
	ld	a,e
	and	07h		; low 3 bits are bit number in flag array
	ld	b,a
	inc	b		; so mask starts at 01h
	ld	a,80h
fm1:	rlca
	djnz	fm1
	or	a
	ret			; success, note B=0

	END
