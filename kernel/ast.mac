;**********************************************************************;
;                                                                      ;
;   This file is part of RSX180, a multi-tasking OS for the Z180.      ;
;   Copyright (C) 1985-2023, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

	NAME	('AST')
	TITLE	'RSX180 AST Processing'

;----------------------------------------------------------------------;
;                                                                      ;
;	AST queuing and dispatching routines.                          ;
;                                                                      ;
;----------------------------------------------------------------------;

	.Z180

	include	ERRORS.INC
	include	TCB.INC
	include	PCB.INC
	include	AST.INC
	include	TKN.INC
	include	Z180.INC

	cseg

	public	ASTDCL		; declare AST
	public	ASTCTL		; enable/disable AST recognition
	public	FNDAST		; find AST control block by type
	public	FNASTE		; find queued AST event by type
	public	ASTEXT		; exit from AST
	public	QAST		; queue AST
	public	DOAST		; execute AST
	public	CLNAST		; AST cleanup on task exit

	extrn	$CTCB,$ALLOC,$FREE,$UBANK,STORST,$FNTCB,$LKTCB
	extrn	$RLIST,$WLIST,CKWMSK,TCONT,TNEXT,TKILL,$VALTB

;-----------------------------------------------------------------------

; Declare an AST processing routine for the current task.
; Call with interrupts disabled or when SYSLVL=-1.
;
; Input:
;   DE = address of routine to call or zero to disable AST processing
;        for the specified type.
;   C  = AST type.
; Returns:
;   CY set on error, A = error code

ASTDCL:	ld	a,c
	call	chktyp
	ld	a,E.INV
	scf
	ret	z
	ld	ix,($CTCB)
	push	de
	call	FNDAST		; find specified AST control block
	jr	c,adcl2		; branch if not found
	ld	a,c
	cp	AST.AB		   ; redefining Abort-request AST?
	jr	nz,adcl0	   ; no
	bit	TA.PRV,(ix+T.ATTR) ; privileged task?
	jr	nz,adcl0	   ; yes, operation allowed
	bit	TS.ABX,(ix+T.ST)   ; Abort AST already called?
	ld	a,E.BADOP	   ; yes, error
	scf
	ret	nz
adcl0:	push	de
	pop	iy		; get ACB address into IY
	pop	de		; pop routine address
	ld	a,d
	or	e		; disable this AST type?
	jr	z,adcl1		; branch if yes
	ld	(iy+A.ADDR),e	; set new routine address
	ld	(iy+A.ADDR+1),d
	xor	a
	ret			; return success

adcl1:	ld	a,(iy+A.LNK)
	ld	(hl),a		; unlink ACB
	inc	hl
	ld	a,(iy+A.LNK+1)
	ld	(hl),a
	push	iy
	pop	hl
	ld	de,ACBSZ
	push	ix
	push	bc
	call	$FREE		; free ACB
	pop	bc
	pop	de
	ld	hl,T.ASTL
	add	hl,de
adcl4:	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	a,e
	or	e		; end of list?
	ret	z		; return success if yes
	push	de
	pop	iy
	ld	a,(iy+A.TYP)
	cp	c		; same type?
	ex	de,hl
	jr	nz,adcl4	; skip it if not
	ex	de,hl
	ld	a,(iy+A.LNK+1)
	ld	(hl),a		; unlink AST event block
	dec	hl
	ld	a,(iy+A.LNK)
	ld	(hl),a
	push	hl
	push	bc
	ld	c,(iy+A.SIZ)	; get size of data area into DE
	ld	b,0
	ld	hl,ACBSZ	; add header size
	add	hl,bc
	ex	de,hl		; block size in DE, AST block address in HL
	call	$FREE		; free the AST block
	pop	bc
	pop	hl
	jr	adcl4

adcl2:	pop	de		; pop routine address
	ld	a,d
	or	e
	ret	z		; AST type already disabled
	push	de		; push routine address
	push	bc		; push type
	push	hl		; push prev ptr
	ld	bc,ACBSZ
	call	$ALLOC		; allocate new ACB
	push	hl
	pop	iy		; get ACB address into IY
	ex	de,hl
	pop	hl		; pop prev ptr
	pop	bc		; pop type
	jr	c,adcl3		; on error, return
	ld	(hl),e		; add ACB to list
	inc	hl
	ld	(hl),d
	xor	a
	ld	(iy+A.LNK),a	; clear next ptr
	ld	(iy+A.LNK+1),a
	ld	(iy+A.TYP),c	; set type
	pop	de
	ld	(iy+A.ADDR),e	; set routine address
	ld	(iy+A.ADDR+1),d
	ret			; return success

adcl3:	pop	hl		; discard routine address
	ret			; return error

chktyp:	cp	AST.IO
	ret	z
	cp	AST.UC
	ret	z
	cp	AST.CK
	ret

;-----------------------------------------------------------------------

; Enable/Disable AST recognition.
;
; Input:
;   C = 0 to disable, <>0 to enable

ASTCTL:	ld	ix,($CTCB)
	ld	a,c
	or	a		; enable or disable?
	jr	z,dsbl		; jump if disable
	set	TA.AST,(ix+T.ATTR) ; enable ASTs
	xor	a
	ret
dsbl:	res	TA.AST,(ix+T.ATTR) ; disable ASTs
	xor	a
	ret

;-----------------------------------------------------------------------

; Find specified AST block by type.
;
; Input:
;   IX = task TCB address
;   C  = AST type
; Returns:
;   DE = specified AST block, if found
;   HL = pointer to prev link field
;   CY set if the block was not found
; Preserves BC, IX, IY.

FNDAST:	ld	hl,T.SAST	; search list of specified ASTs
	jr	fnd1

FNASTE:	ld	hl,T.ASTL	; search list of queued AST events
fnd1:	push	ix
	pop	de
	add	hl,de		; HL = prev
next:	ld	e,(hl)		; get AST Control Block address into DE
	inc	hl
	ld	d,(hl)
	dec	hl
	ld	a,d
	or	e
	scf
	ret	z		; not found
	push	hl
	ld	hl,A.TYP
	add	hl,de
	ld	a,(hl)
	cp	c		; same type?
	pop	hl
	ret	z		; return success if yes
	ex	de,hl
	jr	next		; else try next

;-----------------------------------------------------------------------

; Append an AST event block to the specified task's AST queue and modify
; task status to begin AST execution.
;
; Input:
;   IX = task TCB address
;   HL = pointer to arguments
;   DE = routine address
;   C  = argument length in bytes
;   A  = AST type
;
; Note: Do not call from an interrupt routine. Device drivers must use
; fork processing to send ASTs to requesting tasks.

QAST:
;;	bit	TA.AST,(ix+T.ATTR)
;;	scf
;;	ret	z
	or	a
	jp	m,qast1
	call	chktyp		; check type
	jr	z,qast1		; branch if no ACB required
	push	hl
	push	de
	push	bc
	ld	c,a
	call	FNDAST		; find AST Control Block
	push	de
	pop	iy
	ld	a,c
	pop	bc
	pop	de
	pop	hl
  IF 0
	ret	c		; error if none defined
  ELSE
	ccf
	ret	nc
  ENDIF
	ld	e,(iy+A.ADDR)	; get specified routine address into DE
	ld	d,(iy+A.ADDR+1)
qast1:	ld	b,a
	ld	a,d
	or	e
	scf
	ret	z

	push	hl
	push	de
	push	bc
	ld	b,0		; BC = payload size
	ld	hl,ACBSZ
	add	hl,bc
	ld	c,l
	ld	b,h
	push	ix
	call	$ALLOC		; allocated AST Control Block (ASB)
	pop	ix
	push	hl
	pop	iy		; IY = ACB address
	pop	bc
	pop	de
	pop	hl
	ret	c		; on error, return (not enough memory)

	ld	(iy+A.TYP),b	; store AST type
	ld	(iy+A.SIZ),c	; store arg length
	ld	(iy+A.ADDR),e	; store routine address
	ld	(iy+A.ADDR+1),d
	ld	a,c
	or	a		; any arguments?
	jp	z,LNKAST	; no, link ACB
	ex	de,hl
	push	iy
	pop	hl
	ld	bc,A.DAT
	add	hl,bc
	ex	de,hl
	ld	c,a
	ld	b,0
	ldir			; else store arguments in ACB
	; fall thru LNKAST

; Input:
;   IX = task TCB address
;   IY = address of AST block to add to list
; Preserves IX.

LNKAST:	push	ix
	ld	de,T.ASTL
	add	ix,de
lnk1:	ld	e,(ix)		; get link field into DE
	ld	d,(ix+1)
	ld	a,d
	or	e		; check if zero
	jr	z,lnk2		; if yes, we reached the end of the list
	push	de
	pop	ix		; else go to next AST event block in list
	jr	lnk1		; and try again

; we arrive here with:
;   IX = prev AST block in list, or list head ptr
;   IY = address of AST block to add

lnk2:	push	iy		; get address of AST block to insert
	pop	hl		;  into HL
	ld	(ix),l		; set prev pointer in list
	ld	(ix+1),h
	ld	(iy),e		; clear next field on inserted AST block
	ld	(iy+1),d
	pop	ix
	; continue below

;-----------------------------------------------------------------------

; Setup task for AST execution.
;
; Moves the task to the ready list and sets the TS.AST bit in T.ST.
; The task will be resumed normally via SYSXIT.
;
; If the task is checkpointed, it will be kept in the wait list and the
; partition wait queue checked. Eventually, the task will be assigned a
; (sub)partition, loaded back into memory and resumed.
;
; Input:
;   IX = TCB address

SETAST:	bit	TS.AST,(ix+T.ST)   ; is the task already in AST mode?
	jp	nz,ast0		   ; return success if yes

	bit	TA.AST,(ix+T.ATTR) ; AST processing enabled?
	scf
	ret	z		   ; return error if not

  IF 0
	ld	l,(ix+T.ASTL)
	ld	h,(ix+T.ASTL+1)
	ld	a,h		; check AST queue
	or	l
	scf
	ret	z		; return error if empty
  ENDIF

	ld	l,(ix+T.CTX)	; get task context address into HL
	ld	h,(ix+T.CTX+1)
	ld	a,h
	or	l
	scf
	ret	z		; error if not set

	ld	de,TX.SWM
	add	hl,de		; point to wait mask save area
	ex	de,hl		; DE = dst
	push	ix
	pop	hl
	ld	bc,T.WAIT
	add	hl,bc		; HL = src
	ld	bc,4
	ldir			; save old wait mask
	dec	hl
	ld	(hl),c		; clear wait mask
	dec	hl
	ld	(hl),c
	dec	hl
	ld	(hl),c
	dec	hl
	ld	(hl),c

	ld	l,(ix+T.ST)
	ld	h,(ix+T.ST+1)
	ld	(ix+T.SVST),l	; save old task status (note has TS.AST clear)
	ld	(ix+T.SVST+1),h
	ld	a,l
	and	0+(1 SHL TS.ACT) OR (1 SHL TS.SUP)
	set	TS.AST,a
	ld	(ix+T.ST),a	; set new task status
	ld	a,h		; check old T.ST+1
	or	a		; was task runnable?
	ret	z		; return success if yes
	res	T2.STP,a
	res	T2.SEF,a
	res	T2.EFW,a
	res	T2.WTD,a
	ld	(ix+T.ST+1),a
	or	a		; task runnable in new AST state?
	jp	nz,TNEXT	; must be out of memory, try bringing it back
	push	ix
	pop	bc
	call	$FNTCB		; locate task, returns IX=TCB and IY=prev
	ret	c		; should not happen
	ld	a,(ix+T.ACTL)	; unlink TCB
	ld	(iy),a
	ld	a,(ix+T.ACTL+1)
	ld	(iy+1),a
	ld	iy,$RLIST
	ld	bc,T.ACTL
	call	$LKTCB		; move task to ready list
ast0:	xor	a		; task will be resumed normally via SYSXIT
	ret

;-----------------------------------------------------------------------

; Remove an AST block from the current task's T.ASTL queue and deliver
; it to the task.
;
; This routine is called from SYSXIT, meaning the task is runnable and
; loaded in memory at this point.
;
; Any registers modified in AST mode must be saved/restored by the task.

DOAST:	ld	ix,($CTCB)
	ld	l,(ix+T.ASTL)
	ld	h,(ix+T.ASTL+1)
	ld	a,h		; check AST queue
	or	l
	ret	z		; return if empty

	push	hl		; get address of AST block
	pop	iy		;  into IY
	ld	a,(iy+A.TYP)	; check type
	cp	AST.ST OR 80h	; special AST status block?
	jr	nz,ast1		; branch if not

	ld	a,(iy+A.LNK)
	ld	(ix+T.ASTL),a	; else unlink it from queue
	ld	a,(iy+A.LNK+1)
	ld	(ix+T.ASTL+1),a
	ld	e,(iy+A.DAT)	; get ECB address
	ld	d,(iy+A.DAT+1)
	push	iy
	pop	hl
	ld	bc,A.DAT+2
	add	hl,bc		; get pointer to status
	ld	c,(iy+A.SIZ)
	ld	b,0
	dec	bc		; get length in bytes
	dec	bc
	call	STORST		; store status
	ld	e,(iy+A.SIZ)
	ld	d,0
	ld	hl,ACBSZ	; add header size
	add	hl,de
	ex	de,hl		; DE = AST block size
	push	iy
	pop	hl		; HL = AST block address
	call	$FREE		; free the AST block
	jr	DOAST		; loop to dispatch next

ast1:	call	SETAST		; switch task to AST mode if necessary
	ret	c		; on error (e.g. ASTs disabled), return

	bit	TS.AST,(ix+T.SVST) ; already executing an AST?
	ret	nz		   ; return if yes
	set	TS.AST,(ix+T.SVST) ; else set the status bit

	ld	a,(iy+A.TYP)	   ; check type again
	cp	AST.AB		   ; Abort AST?
	jr	nz,ast2		   ; no
	set	TS.ABX,(ix+T.SVST) ; else set TS.ABX status bit

ast2:	ld	l,(ix+T.CTX)
	ld	h,(ix+T.CTX+1)
	push	hl
	pop	iy		; get task context address into IY

	push	ix
	ld	l,(ix+T.ASTL)	; get address of first AST block in list
	ld	h,(ix+T.ASTL+1)
	push	hl		; save it
	ld	a,(hl)
	ld	(ix+T.ASTL),a	; unlink it from queue
	inc	hl
	ld	a,(hl)
	ld	(ix+T.ASTL+1),a
	inc	hl
	ld	c,(hl)		; size of data area
	ld	b,0
	push	bc		; save it
	inc	hl		; HL = src (type + payload)
	inc	hl		; skip type
	ld	a,($UBANK)
	ld	e,a
	call	STARG		; push PC, AF and arguments
	pop	bc		; pop payload size
	pop	de		; pop AST block address
	push	af		; save success/error status
	ld	hl,ACBSZ	; add header size
	add	hl,bc
	ex	de,hl		; DE = AST block size, HL = AST block address
	call	$FREE		; free the AST block
	pop	af
	pop	ix
	ret	nc		; on success, return
	push	ix
	pop	bc
	ld	e,TK.AST
	call	TKILL		; else abort task
	scf
	ret

;-----------------------------------------------------------------------

; Exit from AST.
;
; Restores PC, status bits and the wait-for mask from saved values and
; clears the TS.AST bit.
;
; If the task was/is not runnable (e.g. stopped, waiting, etc.), it
; will be placed back in the wait list.

ASTEXT:	ld	ix,($CTCB)
	bit	TS.AST,(ix+T.SVST) ; AST under execution?
	ld	a,E.BADOP
	scf
	ret	z		   ; return error if not
	res	TS.AST,(ix+T.SVST) ; else clear the status bit

	pop	bc		   ; discard SVRSLT return address!

	bit	TA.PRV,(ix+T.ATTR) ; privileged task?
	jr	z,astx0		   ; no
	res	TS.ABX,(ix+T.SVST) ; else clear the TS.ABX bit

astx0:	ld	a,($UBANK)
	ld	e,a
	call	RMARG		   ; remove AST PC and AF
	jr	c,ast4		   ; abort task on bad stack
	bit	TA.AST,(ix+T.ATTR) ; AST processing still enabled?
	jr	z,astx2		   ; exit AST mode if not

	ld	e,(ix+T.ASTL)
	ld	d,(ix+T.ASTL+1)
astx1:	ld	a,d		; check AST queue
	or	e
	jr	z,astx2		; exit AST mode if empty
	ld	hl,A.TYP
	add	hl,de
	ld	a,(hl)
	cp	AST.ST OR 80h	; special AST status blocks don't count
	ret	nz
	ex	de,hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	jr	astx1

astx2:	push	ix
	pop	hl
	ld	bc,T.WAIT
	add	hl,bc
	ex	de,hl		; dst = wait mask
	ld	l,(ix+T.CTX)
	ld	h,(ix+T.CTX+1)
	ld	bc,TX.SWM
	add	hl,bc		; src = saved wait mask
	ld	bc,4
	ldir			; restore old wait mask

	ld	a,(ix+T.SVST)	; note TS.AST was cleared above
	ld	(ix+T.ST),a	; restore old task status
	ld	a,(ix+T.SVST+1)
	res	T2.OUT,a	; clear T2.OUT and T2.CKP bit in case the task
	res	T2.CKP,a	;  was checkpointed when the AST was queued
	ld	(ix+T.ST+1),a
	or	a		; task in running state?
	ret	z		; return if yes (already in $RLIST)
	push	ix
	pop	bc
	call	$FNTCB		; locate task, returns IX=TCB and IY=prev
	ret	c		; should not happen
	ld	a,(ix+T.ACTL)	; unlink TCB
	ld	(iy),a
	ld	a,(ix+T.ACTL+1)
	ld	(iy+1),a
	ld	iy,$WLIST
	ld	bc,T.ACTL
	call	$LKTCB		; move task back to wait list
	bit	T2.EFW,(ix+T.ST+1) ; task waiting on flag?
	jr	nz,astx3	   ; branch if yes
	bit	T2.SEF,(ix+T.ST+1) ; task stopped for flag?
	ret	z		   ; return if not
astx3:	push	ix
	pop	bc
	call	CKWMSK		; check wait mask
	ret	c		; return on error
	ret	z		; return if no flag is set
	jp	TCONT		; else wakeup task (BC = TCB)

ast4:	push	ix
	pop	bc
	ld	e,TK.AST	; bad AST stack
	jp	TKILL		; abort task

;-----------------------------------------------------------------------

; Push AST arguments on task's stack.
;
; Since all registers are saved on task's space, we will map an 8K
; window at the top 8K area and relocate saved registers in order to
; create space for the arguments (the window size is 8K in case the
; stack crosses a page boundary)
;
; Input:
;   IX = task TCB address
;   E  = task bank
;   HL = pointer to arguments
;   BC = argument size in bytes

STARG:	inc	bc		; include AST routine address (new PC)
	inc	bc
	push	de
	push	bc
	ld	de,ARGS
	ldir			; copy AST PC and args to a local buffer
	pop	bc		;  (pool block may get mapped out below)
	pop	de

	inc	bc		; account for AF, too
	inc	bc
	ld	l,(ix+T.SP)
	ld	h,(ix+T.SP+1)
	or	a
	sbc	hl,bc
	ex	de,hl
	call	$VALTB		; validate task's SP
	ex	de,hl
	ret	c		; on error, return
	ld	(ix+T.SP),l	; move stack pointer down
	ld	(ix+T.SP+1),h

	ld	a,h
	rra
	rra
	rra
	rra
	and	0Fh
	add	a,e		; find window base
	sub	0Eh		; adjust for upper 8K area
	ld	e,a

	ld	a,h
	and	0Fh		; find offset within window
	add	0E0h		; adjust for upper 8K area
	ld	h,a

	di
	exx
	in0	c,(CBR)
	in0	b,(CBAR)
	exx
	out0	(CBR),e
	ld	a,0E0h
	out0	(CBAR),a

	ld	e,l		; DE = dst
	ld	d,h
	add	hl,bc		; HL = src (BC still has length + 4)
	ld	a,c		; save length in A, can't use stack here
	ld	bc,20
	ldir			; move reg frame down, excluding PC
	dec	hl
	dec	hl		; backup to keep old AF
	ld	c,a		; restore length
	ld	b,0
	dec	bc		; exclude old PC
	dec	bc
	ld	hl,ARGS
	ldir			; copy AST PC + args

	exx
	out0	(CBR),c
	out0	(CBAR),b
	exx
	ei
	ret

; Remove AST arguments (PC and AF) from task's stack. All other arguments
; have been removed by the AST routine.
;
; Since all registers are saved on task's space, we will map an 8K window
; at the top 8K area and relocate saved registers (the window size is 8K
; in case the stack crosses a page boundary). Note that we only remove
; the AST PC value, AST arguments have been removed by the AST routine.
;
; Input:
;   IX = task TCB address
;   E  = task bank

RMARG:	ld	l,(ix+T.SP)
	ld	h,(ix+T.SP+1)
	ld	bc,4		; bytes to remove
	ex	de,hl
	call	$VALTB		; validate task's SP
	ex	de,hl
	ret	c		; on error, return

	push	hl
	add	hl,bc		; drop PC and AF
	ld	(ix+T.SP),l	; restore original SP
	ld	(ix+T.SP+1),h
	pop	hl

	ld	a,h
	rra
	rra
	rra
	rra
	and	0Fh
	add	a,e		; find window base
	sub	0Eh		; adjust for upper 8K area
	ld	e,a

	ld	a,h
	and	0Fh		; find offset within window
	add	0E0h		; adjust for upper 8K area
	ld	h,a

	di
	exx
	in0	c,(CBR)
	in0	b,(CBAR)
	exx
	out0	(CBR),e
	ld	a,0E0h
	out0	(CBAR),a

	ld	e,l
	ld	d,h
	add	hl,bc		; BC still has length
	ld	bc,18		; move up to (but not including) AF
	add	hl,bc
	ex	de,hl		; HL = src
	add	hl,bc
	dec	hl
	dec	de
	lddr			; note: do not move PC

	exx
	out0	(CBR),c
	out0	(CBAR),b
	exx
	ei
	ret

;-----------------------------------------------------------------------

; Remove all AST blocks from the specified task T.ASTL queue.
; Called on task exit during cleanup.
;
; Input:
;   IX = TCB
; Preserves IX.

CLNAST:	ld	l,(ix+T.ASTL)
	ld	h,(ix+T.ASTL+1)
	ld	a,h
	or	l
  IF 0
	ret	z		; return if queue empty.
  ELSE
	jp	z,CLNACB
  ENDIF
	push	ix
	push	hl
	ld	a,(hl)
	ld	(ix+T.ASTL),a	; unlink the AST block
	inc	hl
	ld	a,(hl)
	ld	(ix+T.ASTL+1),a
	inc	hl
	ld	e,(hl)		; get size of data area into DE
	ld	d,0
	ld	hl,ACBSZ	; add header size
	add	hl,de
	ex	de,hl		; block size in DE
	pop	hl		; block address in HL
	call	$FREE		; free the AST block
	pop	ix
	jr	CLNAST		; continue until all blocks are removed

; Remove all AST control blocks from the specified task T.SAST queue.
; Called on task exit during cleanup.
;
; Input:
;   IX = TCB
; Preserves IX.

CLNACB:	ld	l,(ix+T.SAST)
	ld	h,(ix+T.SAST+1)
	ld	a,h
	or	l
	ret	z		; return if queue empty.
	push	ix
	ld	a,(hl)
	ld	(ix+T.SAST),a	; unlink the AST block
	inc	hl
	ld	a,(hl)
	ld	(ix+T.SAST+1),a
	ld	de,ACBSZ	; block size in DE
	dec	hl		; block address in HL
	call	$FREE		; free the AST block
	pop	ix
	jr	CLNAST		; continue until all blocks are removed

	dseg

ARGS:	ds	20

	END
