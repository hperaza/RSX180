;**********************************************************************;
;                                                                      ;
;   This file is part of RSX180, a multi-tasking OS for the Z180.      ;
;   Copyright (C) 1985-2020, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

	NAME	('QTKTN')
	TITLE	'RSX180 Task Notification Task queue'

;----------------------------------------------------------------------;
;                                                                      ;
;	Queue message to TKTN                                          ;
;                                                                      ;
;----------------------------------------------------------------------;

	.Z80

	include	TCB.INC
	include	PCB.INC
	include	QCB.INC
	include	QIO.INC
	include	TKN.INC
	include	ERRORS.INC

	public	QTKTN		; queue message to TKTN

	extrn	TRQST2,$FNTSK,$ALLOC,$FREE,SEND,EMTST,$SBANK,$MCOPY
	extrn	$UCBDN

	cseg

;-----------------------------------------------------------------------

; Queue message to TKTN and request it if it is not active.

; Input:
;   HL = TCB address
;   C  = abort reason code

QTKTN:	push	hl
	push	bc
	ld	bc,TKNTDB+TD.NAME
	call	$FNTSK		; find TCB of TKTN
	ld	(TKNTCB),hl
	ld	a,h
	or	l
	ex	de,hl
	pop	bc
	pop	hl
	jr	z,qtk2		; TKTN not installed, emit status and return
	ld	de,TKNSZ	; get TKTN message size into DE
	push	bc
	push	de
	push	hl
	ld	hl,QHSZ		; add header size
	add	hl,de
	ld	c,l
	ld	b,h		; BC = packet size
	call	$ALLOC		; allocate queue item
	ex	(sp),hl		; push item start address, pop old HL (TCB)
	pop	ix		; get item start address into IX
	pop	de		; DE = data field size
	pop	bc		; C = abort reason
	ret	c		; on error return
	ld	(ix+QU.SIZ),e
	ld	(ix+QU.SIZ+1),d	; set QU.SIZ
	ex	de,hl		; DE = TCB address
	ld	hl,T.PRI
	add	hl,de
	ld	a,(hl)		; get priority of aborting task
	ld	(ix+QU.PRI),a	; set QU.PRI
	push	ix
	call	BLDMSG		; build message, returns IY = TCB
	pop	ix

	push	ix
	call	RQTKTN		; request TKTN and pass OCBs
	pop	ix
  IF 0 ; check now done in RQTKTN
	jr	nc,qtk0
	cp	E.TRUN		; 'task active' is permissible
	scf
	jr	nz,qtk1		; else free packet and return error
  ELSE
	jr	c,qtk1		; on error, free packet and return error
  ENDIF

qtk0:	ld	hl,(TKNTCB)
	push	ix		; address of item to add already in IX
	call	SEND		; queue data to TKTN
	pop	ix
	ret	nc		; return on success

qtk1:	push	af		; remember error code
	ld	c,(ix+QU.DAT+TN.RSN)
	push	bc		; push reason code
	push	iy		; push TCB address
	ld	e,(ix+QU.SIZ)
	ld	d,(ix+QU.SIZ+1)
	ld	hl,QHSZ
	add	hl,de
	ex	de,hl		; DE = size
	push	ix
	pop	hl		; HL = address
	call	$FREE		; free message packet
	pop	hl		; pop TCB address
	pop	bc		; pop reason code
	call	qtk2		; emit status and disconnect
	pop	af		; return error to caller
	ret

qtk2:	ld	b,c
	ld	c,EX.SEV
	jp	EMTST

; Build TKTN message. Called with IX = queue item, DE = TCB address
; Returns TCB address in IY.

BLDMSG:	ex	de,hl
	ld	de,QU.DAT
	add	ix,de		; point to data area of queue item
	ex	de,hl		; get TCB back into DE

	ld	(ix+TN.RSN),c	; set TN.RSN abort reason code

	ld	hl,T.NAME
	add	hl,de		; src
	push	de
	push	ix
	pop	de		; dst
	ld	bc,6
	ldir			; set TN.NAME task name

	pop	iy		; TCB now in IY
	ld	e,(iy+T.TI)
	ld	d,(iy+T.TI+1)
	call	$UCBDN
	ld	(ix+TN.CON),e	; set TN.CON
	ld	(ix+TN.CON+1),d
	ld	(ix+TN.CON+2),c

	di
	exx
	ld	l,(iy+T.PCB)
	ld	h,(iy+T.PCB+1)
	ld	de,P.BASE
	add	hl,de
	ld	l,(hl)		; L' = src bank
	ld	a,($SBANK)
	ld	e,a		; E' = dst bank
	exx
	ld	e,(iy+T.SP)	; src = base of task stack frame
	ld	d,(iy+T.SP+1)	; src in DE
	push	ix
	pop	hl
	ld	bc,TN.REGS
	add	hl,bc		; dst is message TN.REGS
	ld	(hl),e		; store first SP value
	inc	hl
	ld	(hl),d
	inc	hl
	ex	de,hl		; src in HL, dst in DE
	ld	bc,22		; then copy all other 11 CPU registers
	call	$MCOPY
	ei

	ret

; Request TKTN task and pass offspring info.

RQTKTN:	ld	ix,TKNTDB
	ld	e,(iy+T.TI)	; set TKTN terminal to task's terminal
	ld	d,(iy+T.TI+1)
	call	$UCBDN
	ld	(ix+TD.TI),e
	ld	(ix+TD.TI+1),d
	ld	(ix+TD.TI+2),c

	ld	l,(ix+T.CTX)	; get address of Context Block
	ld	h,(ix+T.CTX+1)
	ld	a,(hl)		; get user ID
	ld	(ix+TD.USR),a
	inc	hl
	ld	a,(hl)		; get group ID
	ld	(ix+TD.GRP),a
	xor	a
	ld	(ix+TD.CMD),a	; no command line
	ld	(ix+TD.CMD+1),a
	ld	(ix+TD.CML),a
	ld	(ix+TD.CML+1),a
	push	iy
	ld	ix,(TKNTCB)
	ld	iy,TKNTDB
	call	TRQST2		; request TKTN
	pop	iy
	jr	nc,rqtk0
	cp	E.TRUN		; 'task active' error is permissible
	scf
	ret	nz		; return any other kind
rqtk0:	push	ix
	pop	hl
	ld	de,T.OCBL
	add	hl,de
rqtk1:	ld	e,(hl)		; find end of OCB chain,
	inc	hl		;  in case TKTN is active
	ld	d,(hl)
	dec	hl
	ld	a,d
	or	e
	jr	z,rqtk2		; exit loop when found
	ex	de,hl
	jr	rqtk1
rqtk2:	ld	a,(iy+T.OCBL)	; unlink OCBs from parent
	ld	(hl),a		;  and link them to TKTN
	inc	hl
	ld	a,(iy+T.OCBL+1)
	ld	(hl),a
	xor	a		; also clears CY (success)
	ld	(iy+T.OCBL),a
	ld	(iy+T.OCBL+1),a
	bit	TA.MCR,(iy+T.ATTR)
	ret	z
	set	TA.MCR,(ix+T.ATTR)
	ret

;-----------------------------------------------------------------------

	dseg

TKNTDB:	db	'TKTN  '
	dw	0,0
	db	0
	db	1,1
	db	'TT',0
	dw	0,0
TKNTCB:	ds	2

	end
