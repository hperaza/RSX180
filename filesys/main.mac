;**********************************************************************;
;                                                                      ;
;   This file is part of SYSFCP, the standard filesystem task of       ;
;   RSX180. Copyright (C) 1985-2023, Hector Peraza.                    ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

;   Filesystem management task - Main module.

	.Z80

	IDENT	"V5.0-8"

	include	SYSFN.INC
	include	SYSFCP.INC
	include	FCB.INC
	include	TCB.INC
	include	PCB.INC
	include	DCB.INC
	include	LCB.INC
	include	AST.INC
	include	QIO.INC
	include	ERRORS.INC
	include	SYSTEM.INC

	public	UCDIR		; get user dir
	public	GETUIC		; get task UIC
	public	LUNUCB		; UCB to be used for I/O
	public	LUNVCB		; VCB of mounted device
	public	CLRMEM
	public	CPHLDE

	extrn	MOUNT,DISMNT,FCREAT,FOPEN,FCLOSE,FREAD,FWRITE,FSETL
	extrn	FRATTR,FWATTR,FEXTND,FTRUNC,FUNLK,FDEL,FREN,MKDIR
	extrn	INIBUF,FLBUFS,FNDVCB

	cseg

KCALL	MACRO	addr
	call	$SWSTK
	dw	addr
	ENDM

;-----------------------------------------------------------------------

START::	ld	sp,stack

	ld	c,1
	SC	.SUPER
	jp	c,fatal

	call	INIBUF		; init buffers
	jp	c,fatal

	ld	de,DRAST
	ld	c,AST.RD
	SC	.ASTDF		; specify data-received AST routine

	xor	a
	ld	(TMOFLG),a

next:	ld	e,ASTEFN
	SC	.CLEF		; clear event flag
	ld	ix,($CTCB)
	ld	l,(ix+T.RCVL)	; check receive queue
	ld	h,(ix+T.RCVL+1)
	ld	a,h
	or	l		; got anything?
	jr	nz,process	; yes
	ld	hl,5		; timeout = 5 seconds
	ld	d,2
	ld	e,0		; no EFN, the AST routine will set ASTEFN
	ld	bc,TMAST	; AST routine address
	SC	.MRKT		; setup timeout
	ld	e,ASTEFN
	SC	.WTSE		; wait for data or timeout
	ld	bc,0
	ld	e,0
	SC	.CMKT		; cancel any outstanding mark-time requests
	ld	hl,TMOFLG
	ld	a,(hl)
	or	a
	ld	(hl),0
	call	nz,FLBUFS	; flush disk buffers
	jr	next

process:
	ld	(IOPKT),hl	; save packet address
	ld	a,(hl)
	ld	(ix+T.RCVL),a	; unlink packet
	inc	hl
	ld	a,(hl)
	ld	(ix+T.RCVL+1),a
	inc	hl
	inc	hl		; skip I.PRI
	ld	de,RCVBUF
	ld	bc,QDBSZ+6	; size + TCB addr + UCB addr + QDB
	ldir			; local copy
	ld	hl,0
	ld	(IOS2),hl
	ld	a,(QDB+Q.FUNC)
	sub	20		; subtract offset to file I/O functions
	jr	c,fnerr
	cp	15+1		; check upper limit
	jr	nc,fnerr
	add	a,a
	ld	e,a
	ld	d,0
	ld	hl,fntab
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ld	de,fnsto	; push return address
	push	de
	jp	(hl)

fnerr:	ld	a,E.BADOP	; error code = invalid operation
fnsto:	ld	c,a
	ld	b,0
	ld	ix,(IOPKT)
	ld	de,(IOS2)
	KCALL	$IOEND		; end I/O processing
	jp	next		; process next packet

fatal:	ld	hl,EX.SEV
	SC	.EXIT

; Data-received AST service routine

DRAST:	push	de
	ld	e,ASTEFN
	SC	.SETF		; set event flag
	pop	de
	SC	.ASTX		; return to program

; Mark-time AST service routine

TMAST:	pop	af		; remove AST argument
	push	de
	ld	a,1
	ld	(TMOFLG),a	; set timeout flag
	ld	e,ASTEFN
	SC	.SETF		; set event flag
	pop	de
	SC	.ASTX		; return to program

fntab:	dw	fnmake		; IO.CRE
	dw	fnopen		; IO.ACC
	dw	fnclse		; IO.DEA
	dw	fnrvb		; IO.RVB
	dw	fnwvb		; IO.WVB
	dw	fnrat		; IO.RAT
	dw	fnwat		; IO.WAT
	dw	fnunlk		; IO.UNL
	dw	fndel		; IO.DEL
	dw	fnren		; IO.REN
	dw	fncln		; IO.CLN
	dw	fnext		; IO.EXT
	dw	fntrn		; IO.TRN
	dw	fnmnt		; IO.MNT
	dw	fndsm		; IO.DSM
	dw	fnffs		; IO.FFS

; ----- IO.MNT

fnmnt:	ld	a,(QDB+Q.LUN)	; get LUN
	call	LUNFCB		; get UCB into DE
	ret	c
	ld	a,d
	or	e
	ld	a,E.LUN		; LUN not assigned
	ret	z
	ld	a,(QDB+Q.SUBF)
	call	MOUNT		; mount device
	ret

; ----- IO.DSM

fndsm:	ld	a,(QDB+Q.LUN)	; get LUN
	call	LUNFCB		; get UCB into DE
	ret	c
	ld	a,d
	or	e
	ld	a,E.LUN		; LUN not assigned
	ret	z
	call	VALVCB		; get address of VCB
	ret	c		; error if not set
	call	DISMNT		; dismount device
	ret

; ----- IO.CRE

fnmake:	ld	a,(QDB+Q.LUN)	; get LUN
	call	LUNFCB		; file open on this LUN?
	ret	c
	ld	a,h
	or	l
	ld	a,E.BADOP	; return error if yes
	ret	nz
	call	VALVCB		; get address of VCB
	ret	c
	ld	hl,(QDB+Q.P1)
	ld	de,FDB1
	push	de
	call	UFDB		; get FDB from user space
	pop	hl		; HL = file spec block
	ret	c
	ld	b,0		; initial file attributes
	ld	a,(QDB+Q.SUBF)
	ld	c,a
	and	SF.CTG		; create contiguous file?
	jr	z,fnmk1		; branch if not
	ld	b,FA.CTG	; else set FA.CTG file attribute
fnmk1:	ld	a,c
	and	SF.TMP		; create temporary file?
	jr	nz,fnmk3	; branch if yes
	ld	a,c
	and	SF.DIR		; create directory?
	jr	z,fnmk2		; branch if not
	ld	a,b
	or	FA.DIR		; else set FA.DIR attribute
	ld	b,a		; B = file attribs
	ld	de,(QDB+Q.P2)	; CDE = blocks to alloc for contiguous file
	ld	a,(QDB+Q.P2+2)
	ld	c,a
	call	MKDIR		; create directory
	ret

fnmk3:	ld	a,c
	and	SF.DIR
	jr	z,fnmk4
	ld	a,E.BADOP	; temporary file can't be a directory
	scf
	ret

fnmk2:	ld	a,b
	or	FA.FILE		; set FA.FILE attribute
	ld	b,a		; B = file attribs
fnmk4:	ld	de,(QDB+Q.P2)	; CDE = blocks to alloc for contiguous file
	ld	a,(QDB+Q.P2+2)
	ld	c,a
	call	FCREAT		; create and open regular file
	push	af
	ld	a,(QDB+Q.LUN)
	ld	e,a		; get LUN into E
	call	STOFCB		; store FCB address in task's LUN table
	pop	af
	ret

; ----- IO.ACC

fnopen:	ld	a,(QDB+Q.LUN)	; get LUN
	call	LUNFCB		; file open on this LUN?
	ret	c
	ld	a,h
	or	l
	ld	a,E.BADOP	; return error if yes
	ret	nz
	call	VALVCB		; get address of VCB
	ret	c
	ld	hl,(QDB+Q.P1)
	ld	de,FDB1
	push	de
	call	UFDB		; get FDB from user space
	pop	hl		; HL = file spec block
	ret	c
	ld	a,(QDB+Q.SUBF)
	call	fmod		; get access mode bits
	call	FOPEN		; open the file
	push	af
	ld	a,(QDB+Q.LUN)
	ld	e,a		; get LUN into E
	call	STOFCB		; store FCB address in task's LUN table
	pop	af
	ret

fmod:	ld	b,a
	ld	c,0
	and	SF.ACR		; read access
	jr	z,fm1
	ld	a,c
	or	FA.RD
	ld	c,a
fm1:	ld	a,b
	and	SF.ACW		; write access
	jr	z,fm2
	ld	a,c
	or	FA.WR
	ld	c,a
fm2:	ld	a,b
	and	SF.SHR		; shared access
	ret	z
	ld	a,c
	or	FA.SHR
	ld	c,a
	ret

; ----- IO.DEA

fnclse:	ld	a,(QDB+Q.LUN)	; get LUN
	call	VALFCB		; fetch FCB, ensure is valid
	ret	c		; return error if FCB not valid
	call	VALVCB		; get address of VCB
	ret	c
	call	FCLOSE		; close file and free FCB
	push	af
	ld	a,(QDB+Q.LUN)
	ld	e,a		; get LUN into E
	ld	bc,0
	call	STOFCB		; clear FCB entry in task's LUN table
	pop	af
	ret

; ----- IO.CLN

fncln:	ld	hl,(QDB+Q.P1)	; get FCB address
	ld	de,(QDB+Q.P2)	; get UCB address
	ld	(LUNUCB),de
	call	VALVCB		; get address of VCB
	jr	c,cln1
	push	hl
	call	FSETL		; set lock bit
	pop	hl
	call	FCLOSE		; close file and free FCB
cln1:	pop	hl		; discard return to fnsto (no flag to set,
	jp	next		;  no return status to store)

; ----- IO.UNL

fnunlk:	ld	a,(QDB+Q.LUN)	; get LUN
	call	LUNFCB		; get UCB into DE
	ret	c
	ld	a,d
	or	e
	ld	a,E.LUN		; LUN not assigned
	ret	z
	call	VALVCB		; get address of VCB
	ret	c
	ld	hl,(QDB+Q.P1)
	ld	de,FDB1
	push	de
	call	UFDB		; get FDB from user space
	pop	hl		; HL = file spec address
	ret	c
	call	FUNLK		; unlock file
	ret

; ----- IO.RVB

fnrvb:	ld	a,(QDB+Q.LUN)	; get LUN
	call	VALFCB		; fetch FCB into HL, ensure is valid
	ret	c		; return error if FCB not valid
	call	VALVCB		; get address of VCB
	ret	c
	ld	de,(QDB+Q.BUF)	; DE = buffer address
	ld	bc,(QDB+Q.LEN)	; BC = len
	call	VALBUF		; validate buffer
	ld	a,E.INV
	ret	c		; return error if invalid
	call	GETBNK		; assuming the task is non-movable while
				;  it has outstanding I/O
	push	hl
	pop	ix		; IX = FCB
	push	bc
	exx
	pop	de		; DE' = len
	ld	bc,(QDB+Q.OFS)	; BC' = offset within block
	exx
	ld	c,a
	ld	hl,(QDB+Q.BLK)	; BHL = block number
	ld	a,(QDB+Q.BLK+2)
	ld	b,a
	ld	a,c
	call	FREAD		; read data from file
	ld	(IOS2),bc
	ret

; ----- IO.WVB

fnwvb:	ld	a,(QDB+Q.LUN)	; get LUN
	call	VALFCB		; fetch FCB into HL, ensure is valid
	ret	c		; return error if FCB not valid
	call	VALVCB		; get address of VCB
	ret	c
	ld	de,(QDB+Q.BUF)	; DE = buffer address
	ld	bc,(QDB+Q.LEN)	; BC = len
	call	VALBUF		; validate buffer
	ld	a,E.INV
	ret	c		; return error if invalid
	call	GETBNK		; assuming the task is non-movable while
				;  it has outstanding I/O
	push	hl
	pop	ix		; IX = FCB
	push	bc
	exx
	pop	de		; DE' = len
	ld	bc,(QDB+Q.OFS)	; BC' = offset within block
	exx
	ld	c,a
	ld	hl,(QDB+Q.BLK)	; BHL = block number
	ld	a,(QDB+Q.BLK+2)
	ld	b,a
	ld	a,c
	call	FWRITE		; write data to file
	ld	(IOS2),bc
	ret

; ----- IO.EXT

fnext:	ld	a,(QDB+Q.LUN)	; get LUN
	call	VALFCB		; fetch FCB into HL, ensure is valid
	ret	c		; return error if FCB is invalid
	call	VALVCB		; get address of VCB
	ret	c
	ld	de,(QDB+Q.BLK)	; CDE = new size in blocks
	ld	a,(QDB+Q.BLK+2)
	ld	c,a
	call	FEXTND		; extend file
	ret

; ----- IO.TRN

fntrn:	ld	a,(QDB+Q.LUN)	; get LUN
	call	VALFCB		; fetch FCB into HL, ensure is valid
	ret	c		; return error if FCB is invalid
	call	VALVCB		; get address of VCB
	ret	c
	push	hl
	pop	ix		; IX = FCB address
	ld	hl,(QDB+Q.BLK)
	ld	a,(QDB+Q.BLK+2)
	ld	b,a
	ld	de,(QDB+Q.LEN)
	call	FTRUNC		; truncate file
	ret

; ----- IO.RAT

fnrat:	ld	a,(QDB+Q.LUN)	; get LUN
	call	VALFCB		; fetch FCB into HL, ensure is valid
	ret	c		; return error if FCB not valid
	call	VALVCB		; get address of VCB
	ret	c
	ld	de,(QDB+Q.BUF)	; DE = buffer address
	ld	bc,(QDB+Q.LEN)	; BC = len
	call	VALBUF		; validate buffer
	ld	a,E.INV
	ret	c		; return error if invalid
	call	GETBNK		; assuming the task is non-movable while
				;  it has outstanding I/O
	call	FRATTR		; read file attribs
	ld	(IOS2),bc
	ret

; ----- IO.WAT

fnwat:	ld	a,(QDB+Q.LUN)	; get LUN
	call	VALFCB		; fetch FCB into HL, ensure is valid
	ret	c		; return error if FCB not valid
	call	VALVCB		; get address of VCB
	ret	c
	ld	de,(QDB+Q.BUF)	; DE = buffer address
	ld	bc,(QDB+Q.LEN)	; BC = len
	call	VALBUF		; validate buffer
	ld	a,E.INV
	ret	c		; return error if invalid
	call	GETBNK		; assuming the task is non-movable while
				;  it has outstanding I/O
	call	FWATTR		; write file attribs
	ld	(IOS2),bc
	ret

; ----- IO.DEL

fndel:	ld	a,(QDB+Q.LUN)	; get LUN
	call	LUNFCB		; get UCB into DE
	ret	c
	ld	a,d
	or	e
	ld	a,E.LUN		; LUN not assigned
	ret	z
	call	VALVCB		; get address of VCB
	ret	c
	ld	hl,(QDB+Q.P1)
	ld	de,FDB1
	push	de
	call	UFDB		; get FDB from user space
	pop	hl		; HL = file spec address
	ret	c
	call	FDEL		; delete the file
	ret

; ----- IO.REN

fnren:	ld	a,(QDB+Q.LUN)	; get LUN
	call	LUNFCB		; get UCB into DE
	ret	c
	ld	a,d
	or	e
	ld	a,E.LUN		; LUN not assigned
	ret	z
	call	VALVCB		; get address of VCB
	ret	c
	ld	hl,(QDB+Q.P1)	; ptr to old FDB
	ld	de,FDB1
	call	UFDB
	ret	c
	ld	hl,(QDB+Q.P2)	; ptr to new FDB
	ld	de,FDB2
	call	UFDB
	ret	c
	ld	hl,FDB1		; HL = old file spec
	ld	de,FDB2		; DE = new file spec
	call	FREN
	ret

; ----- IO.FFS

fnffs:	call	FLBUFS		; flush all buffers
	xor	a		; E.OK, clear CY
	ret

terminate:
	ld	hl,EX.SUC
	SC	.EXIT

;-----------------------------------------------------------------------

; Get ptr to task's current directory into HL

UCDIR:	ld	ix,(USRTSK)
	ld	l,(ix+T.CTX)	; get address of context block
	ld	h,(ix+T.CTX+1)
	ld	a,h
	or	l
	ld	a,E.TNAC
	scf
	ret	z		; error if not set (should not happen)
	ld	de,TX.DIR
	add	hl,de		; point to task's current directory
	xor	a
	ret

;-----------------------------------------------------------------------

; Get effective user ID and group ID of requesting task.

; Returns:
;   H = group ID
;   L = user ID
;   C = status byte of user's session
;   IX = task TCB.
; Preserves DE.

GETUIC:	ld	ix,(USRTSK)
	ld	c,(ix+T.TI)	; get UCB of terminal
	ld	b,(ix+T.TI+1)
	ld	hl,U.LCB
	add	hl,bc
	ld	c,(hl)		; get LCB of terminal
	inc	hl
	ld	b,(hl)
	ld	a,b
	or	c		; session may be null (e.g. for HEL task)
	jr	z,gt1		; note will return C = 0
	ld	hl,L.ST
	add	hl,bc
	ld	c,(hl)		; get session status byte
gt1:	ld	l,(ix+T.CTX)	; get address of context block
	ld	h,(ix+T.CTX+1)
	ld	a,h
	or	l
	ld	a,E.TNAC
	scf
	ret	z		; should not happen
	ld	a,(hl)		; get user ID
	inc	hl
	ld	h,(hl)		; get group ID
	ld	l,a
	xor	a
	ret

;-----------------------------------------------------------------------

; Get address of FCB associated to LUN of USRTSK.
; A = LUN, returns HL = FCB, DE = UCB.
; Also sets LUNUCB.

LUNFCB:	dec	a		; 1..16 -> 0..15
	ld	e,a
	cp	16		; valid?
	ld	a,E.LUN
	ccf
	ret	c		; return error if not
	ld	ix,(USRTSK)
	ld	l,(ix+T.CTX)	; get address of context block
	ld	h,(ix+T.CTX+1)
	ld	a,e
	ld	de,TX.LUT
	add	hl,de		; point to start of LUN table
	ld	e,a
	ld	d,0
	add	hl,de
	add	hl,de
	add	hl,de
	add	hl,de		; *4 (index into table)
	ld	e,(hl)		; fetch UCB address
	inc	hl
	ld	d,(hl)
	inc	hl
	ex	de,hl
	KCALL	$REDIR		; follow redirect pointers
	ld	(LUNUCB),hl
	ex	de,hl
	ld	a,(hl)		; fetch FCB address
	inc	hl
	ld	h,(hl)
	ld	l,a
	xor	a
	ret

; Get address of FCB and ensure is valid.

VALFCB:	call	LUNFCB
	ret	c
	ld	a,h
	or	l
	ld	a,E.INV
	scf			; FCB must be valid
	ret	z
	xor	a
	ret

; Get address of VCB and ensure is valid. Sets LUNVCB variable.
; Called with DE = UCB address.

VALVCB:	push	hl
	call	FNDVCB
	ld	(LUNVCB),hl
	ld	c,l
	ld	b,h
	pop	hl
	ret			; return 

; Store FCB address in USRTSK's LUN table.
; A = LUN, BC = FCB address.

STOFCB:	dec	a		; 1..16 -> 0..15
	ld	e,a
	cp	16		; valid?
	ld	a,E.LUN
	ccf
	ret	c		; return error if not
	ld	ix,(USRTSK)
	ld	l,(ix+T.CTX)	; get address of task context block
	ld	h,(ix+T.CTX+1)
	ld	a,h
	or	l
	scf
	ld	a,E.LUN
	ret	z		; error if not set
	ld	a,e
	ld	de,TX.LUT
	add	hl,de		; HL = start of LUN table
	ld	e,a
	ld	d,0
	add	hl,de
	add	hl,de
	add	hl,de
	add	hl,de		; *4
	inc	hl
	inc	hl
	ld	(hl),c
	inc	hl
	ld	(hl),b
	ret

; Validate buffer, ensure it is contained within task limits. Returns
; CY set if not. DE = buf, BC = len

VALBUF:	ld	ix,(USRTSK)
	push	hl
	ld	l,(ix+T.STRT)
	ld	h,(ix+T.STRT+1)
	call	CPHLDE		; CY if bufptr < task_start
	ld	a,E.INV
	jr	c,vb1
	ld	l,(ix+T.END)
	ld	h,(ix+T.END+1)
	sbc	hl,bc		; note CY clear
	jr	c,vb1		; CY if task_end - len < 0
	inc	hl
	ex	de,hl
	call	CPHLDE		; CY if bufptr + len > task_end
	ex	de,hl
	ld	a,E.INV
	jr	c,vb1
	xor	a
vb1:	pop	hl
	ret

; Get FDB from user space. HL = ptr to FDB, DE = ptr to dest buffer

UFDB:	push	de
	ex	de,hl
	ld	bc,FDBSZ
	call	VALBUF		; ensure pointer is valid
	ex	de,hl
	pop	de
	ret	c
	call	GETBNK
	di
	exx
	ld	hl,($CPCB)
	ld	de,P.BASE
	add	hl,de
	ld	e,(hl)		; dst bank in E'
	ld	l,a		; src bank in L'
	exx
	call	$MCOPY		; length still in BC
	ei
	xor	a
	ret

; Get task base bank.

GETBNK:	ld	ix,(USRTSK)
	push	hl
	push	de
	ld	l,(ix+T.PCB)
	ld	h,(ix+T.PCB+1)
	ld	de,P.BASE
	add	hl,de
	ld	a,(hl)
	pop	de
	pop	hl
	ret

; Compare HL and DE. Returns Z if HL == DE, CY if HL > DE

CPHLDE:	ld	a,d
	cp	h
	ret	nz
	ld	a,e
	cp	l
	ret

; Clear block of memory. HL = start address, BC = length.

CLRMEM:	ld	a,b
	or	c
	ret	z
	ld	(hl),0
	inc	hl
	dec	bc
	jr	CLRMEM

;-----------------------------------------------------------------------

	dseg

RCVBUF	equ	$
RCVLEN:	ds	2		; !  do    !
USRTSK:	ds	2		; !  not   !
UCBADR:	ds	2		; ! change !
QDB:	ds	QDBSZ		; ! order  !

FDB1:	ds	FDBSZ
FDB2:	ds	FDBSZ
LUNUCB:	ds	2
LUNVCB:	ds	2

IOPKT:	ds	2
IOS2:	ds	2

TBASE:	ds	1
TMOFLG:	ds	1		; timeout flag

	ds	256		; stack space
stack	equ	$

	end	START
