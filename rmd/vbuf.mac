;***********************************************************************
;
;   This file is part of RMD, a Resource Monitoring Display utility
;   for the RSX180 OS. Copyright (C) 1985-2022, Hector Peraza.
;
;   This program is free software; you can redistribute it and/or
;   modify it under the terms of the GNU General Public License as
;   published by the Free Software Foundation; either version 2 of
;   the License, or (at your option) any later version.
;
;   This program is distributed in the hope that it will be useful,
;   but WITHOUT ANY WARRANTY; without even the implied warranty of
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;   GNU General Public License for more details.
;
;   You should have received a copy of the GNU General Public License
;   along with this program; if not, write to the Free Software
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
;***********************************************************************

;   Video framebuffer functions.

	.Z80

	include	RMD.INC

	public	VCLS,VCLEOS,VCLEOL,VXY,VGETXY,VPUTC,VPUTS,VPUTN
	public	VOUTP,VGETC,VAHEX,VHLHEX,VHLDEC,VADEC,VADEC2,VRPAD
	public	VSNAP

	extrn	PUTCH,HOME,PUTCUR,DIV8,TTFLSH

	cseg

maxgap	equ	8

;-----------------------------------------------------------------------

; Clear video buffer

VCLS:	push	hl
	push	bc
	ld	hl,vbuf
	ld	(vptr),hl
	ld	bc,hsize*vsize
cls1:	ld	(hl),' '
	inc	hl
	dec	bc
	ld	a,b
	or	c
	jr	nz,cls1
	pop	bc
	pop	hl
	ret

; Clear from current position to end of buffer

VCLEOS:	push	hl
	push	de
	ld	hl,vbuf+hsize*vsize
	ld	de,(vptr)
	or	a
	sbc	hl,de
	ex	de,hl
ceos:	ld	a,(hl)
	cp	' '
	jr	z,ceos1
	ld	(hl),' '+80h
ceos1:	inc	hl
	dec	de
	ld	a,d
	or	e
	jr	nz,ceos
	pop	de
	pop	hl
	ret

; Clear from current position to end of line

VCLEOL:	push	hl
	push	bc
	call	VGETXY
	ld	a,hsize
	sub	h
	ld	b,a
	ld	hl,(vptr)
ceol:	ld	a,(hl)
	cp	' '
	jr	z,ceol1
	ld	(hl),' '+80h
ceol1:	inc	hl
	djnz	ceol
	pop	bc
	pop	hl
	ret

; Set "cursor" for subsequent output.
; H = x coord, L = y coord

VXY:	ld	a,l
	cp	vsize
	ret	nc
	ld	a,h
	cp	hsize
	ret	nc
	push	hl
	push	de
	push	bc
	ld	e,h
	ld	d,0
	ld	h,0
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl		; *16
	ld	c,l
	ld	b,h
	add	hl,hl
	add	hl,hl		; *64
	add	hl,bc		; y*80
	add	hl,de		; +x
	ld	de,vbuf
	add	hl,de
	ld	(vptr),hl
	pop	bc
	pop	de
	pop	hl
	ret

; Get current "cursor" coordinates

VGETXY:	push	bc
	push	de
	ld	hl,(vptr)
	ld	de,vbuf
	or	a
	sbc	hl,de
	ld	c,hsize
	call	DIV8
	ld	h,a		; y in L, x in H
	pop	de
	pop	bc
	ret

; Store a single char in video buffer

VPUTC:	push	hl
	ld	hl,(vptr)
	ld	a,c
	cp	(hl)
	jr	z,vc1
	or	80h
	ld	(hl),a
vc1:	inc	hl
	ld	(vptr),hl
	pop	hl
	ret

; Store string in video buffer

VPUTS:	push	de
	ex	de,hl
	ld	hl,(vptr)
vp1:	ld	a,(de)
	or	a
	jr	z,vp3
	cp	(hl)
	jr	z,vp2
	or	80h
	ld	(hl),a
vp2:	inc	hl
	inc	de
	jr	vp1
vp3:	ld	(vptr),hl
	ex	de,hl
	pop	de
	ret

; Store string of specified length in video buffer

VPUTN:	ld	a,b
	or	a
	ret	z
	push	de
	ex	de,hl
	ld	hl,(vptr)
vn1:	ld	a,(de)
	cp	(hl)
	jr	z,vn2
	or	80h
	ld	(hl),a
vn2:	inc	hl
	inc	de
	djnz	vn1
	ld	(vptr),hl
	ex	de,hl
	pop	de
	ret

; Get character at current "cursor" position

VGETC:	push	hl
	ld	hl,(vptr)
	ld	a,(hl)
	and	7Fh
	pop	hl
	ret

; Refresh screen with video buffer contents, output only what has changed
; from the previous call.

VOUTP:	call	HOME
	ld	hl,vbuf
	ld	de,0		; gap length counter
	ld	c,0		; row position
nextl:	call	line
	inc	c
	ld	a,c
	cp	vsize
	jr	nz,nextl
	call	HOME
	call	TTFLSH
	ret

line:	ld	b,0		; column position
	ld	d,1		; force direct cursor for new lines
nextc:	push	bc		; push screen coordinates
	ld	a,(hl)
	or	a		; hi-bit set?
	jp	p,cc3		; skip if not

	and	7Fh		; clear hi-bit
	ld	(hl),a

	ld	a,d		; and check gap
	or	a		;  if too long
	jr	nz,cc1		;   use direct cursor positioning
	ld	a,e
	or	a
	jr	z,cc2
	cp	maxgap
	jr	nc,cc1

	or	a
	sbc	hl,de		; else display all chars in gap
;	inc	e		; including current char
cc0:	ld	c,(hl)
	call	PUTCH
	inc	hl
	dec	e
	jr	nz,cc0
;	jr	cc4
	jr	cc2

cc1:	ex	(sp),hl		; push buffer pointer, pop screen coordinates
	call	PUTCUR
	ex	(sp),hl		; push screen coordinates, restore buffer ptr
cc2:	ld	c,(hl)
	call	PUTCH
	ld	de,0		; reset gap counter
	jr	cc4

cc3:	inc	de		; increase gap counter
cc4:	inc	hl
	pop	bc
	inc	b
	ld	a,b
	cp	hsize
	jr	nz,nextc
	ret

; Output snapshot of the the video buffer contents to the terminal.

VSNAP:	ld	c,CR
	call	PUTCH
	ld	hl,vbuf
	ld	b,vsize		; column counter
snextl:	push	bc
	ld	c,LF
	call	PUTCH
	ld	b,hsize		; row counter
	ld	de,0		; gap length counter
snextc:	ld	a,(hl)
	and	7Fh		; clear hi-bit
	cp	' '		; space?
	jr	z,scc2		; skip if yes
	or	a
	sbc	hl,de		; else display all chars in gap
	inc	e		; including current char
scc1:	ld	a,(hl)
	and	7Fh
	ld	c,a
	call	PUTCH
	inc	hl
	dec	e
	jr	nz,scc1
	dec	e		; reset gap counter (becomes 0 below)
	dec	hl
scc2:	inc	e		; increase gap counter
	inc	hl
	djnz	snextc
	ld	c,CR
	call	PUTCH
	pop	bc
	djnz	snextl
	call	TTFLSH
	ret

;-----------------------------------------------------------------------

; Output HL (VHLHEX) or A (VAHEX) as hexadecimal.

VHLHEX:	ld	a,h
	call	VAHEX
	ld	a,l
VAHEX:	push	af
	rrca
	rrca
	rrca
	rrca
	call	vnhex
	pop	af
vnhex:	and	0Fh
	add	a,90h
	daa
	adc	a,40h
	daa
	push	hl
	push	bc
	ld	c,a
	call	VPUTC
	pop	bc
	pop	hl
	ret

; Output HL as decimal, A = filler.

VHLDEC:	ld	(filler),a
	push	hl
	push	de
	push	bc
	ld	b,0
	ld	de,-10000
	call	sbcnt
	ld	de,-1000
	call	sbcnt
	ld	de,-100
	call	sbcnt
	ld	de,-10
	call	sbcnt
	ld	a,l
	add	a,'0'
	ld	c,a
	call	VPUTC
	inc	b
	ld	a,b
	pop	bc
	pop	de
	pop	hl
	ret

sbcnt:	ld	c,'0'-1
sb1:	inc	c
	add	hl,de
	jr	c,sb1
	sbc	hl,de
	ld	a,b
	or	a
	jr	nz,sb2
	ld	a,c
	cp	'0'
	jr	nz,sb2
	ld	a,(filler)
	or	a
	ret	z
	ld	c,a
	jr	sb3
sb2:	inc	b
sb3:	call	VPUTC
	ret

; Output A as decimal

VADEC:	push	de
	push	bc
	ld	d,0
	ld	b,100
	call	ad1
	ld	b,10
	call	ad1
	add	a,'0'
	ld	c,a
	call	VPUTC
	pop	bc
	pop	de
	ret

ad1:	ld	c,'0'-1
ad2:	inc	c
	sub	b
	jr	nc,ad2
	add	a,b
	push	af
	ld	a,c
	cp	'0'
	jr	nz,ad4
	inc	d
	dec	d
	jr	z,ad5
ad4:	call	VPUTC
	ld	d,1
ad5:	pop	af
	ret

VADEC2:	push	bc
	ld	c,'0'
a2:	cp	10
	jr	c,a1
	inc	c
	sub	10
	jr	a2
a1:	push	af
	call	VPUTC
	pop	af
	add	a,'0'
	ld	c,a
	call	VPUTC
	pop	bc
	ret

; Pad field with spaces. Called with D = starting column, E = field width

VRPAD:	push	hl
	call	VGETXY
	ld	a,d		; get starting column
	add	a,e		; add field width
	dec	a
	sub	h		; subtract current column
	pop	hl
	ret	c		; return if current width >= field width
	push	bc
	ld	b,a
	inc	b
rtrm1:	ld	c,' '
	call	VPUTC
	djnz	rtrm1
	pop	bc
	ret

;-----------------------------------------------------------------------

	dseg

filler:	ds	1

vptr:	ds	2
vbuf:	ds	hsize*vsize

	end
