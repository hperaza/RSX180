;**********************************************************************;
;                                                                      ;
;   This file is part of LBR, a relocatable object code librarian      ;
;   program for CP/M and RSX180.                                       ;
;   Copyright (C) 1992-2021, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

;----------------------------------------------------------------------;
;                                                                      ;
;   Main module                                                        ;
;                                                                      ;
;----------------------------------------------------------------------;

; TODO:
; - allow /LI /IX switches, etc. for input files ('=' case)
; - remove old /E?
; - operation description in listing file (',lst=' case)
; - default to /LI if listing file is specified and no other listing
;   option is specified (',lst=' case)
; - /AP switch to append to an output file (if the file does not exist,
;   create it instead of triggering an error?)
; - /ID switch to display program version

	.Z80

	include	LBR.INC

	version	id

	public	ERROR,ADDR,MEMBOT,SYMTAB,$MEMRY

	extrn	GETTOP,GETCMD,RESCMD,EXIT,ERRMSG,PARSE
	extrn	SETINP,FGETRB,FWRLST,LNBUF,LNPTR,CVTWH
	extrn	MAKEF,OPENF,CLSE.I,CLSE.O,CLSE.L,FPUTLB
	extrn	MODN,LIBNAM,SWBITS,CVTWD,PROGID,ADDHLA
	extrn	POS.I,SEEK.I,POS.O,SEEK.O,GETDT,INCMEM

;-----------------------------------------------------------------------

	cseg

START::	ld	sp,STACK
	ld	hl,($MEMRY)
	ld	(MEMBOT),hl	; setup pointer to heap
	call	GETTOP
	ld	(MEMTOP),hl	; setup pointer to top of memory
loop:	call	GETCMD		; get command
	ld	(LNPTR),hl	; save pointer to command tail
	call	INIT		; initalize variables
	call	PARSE		; parse command
	call	MAKEF		; create output files
	call	LBR		; process command
	call	CLSE.O		; close output file
	call	CLSE.L		; close listing file
	jr	loop		; loop to process next command

ERROR:	ld	sp,STACK	; restore stack
	ld	a,h
	or	l
	call	nz,ERRMSG	; display error message
	call	CLSE.I
	call	CLSE.O
	call	CLSE.L
	call	RESCMD		; abort command file execution
	jr	loop		; and loop back

; Program initialization

INIT:	ld	hl,(MEMBOT)
	ld	(MODN),hl	; user module list grows up
	ld	(hl),0FFh	; 0FFh means end of table
	inc	hl
	ld	(SYMTAB),hl	; symbol table follows module list
	ld	(MODPTR),hl
	ld	hl,0
	ld	(MODCNT),hl
	ret

; Copy string @HL to @DE

STRCPY:	ld	a,(hl)
	ld	(de),a
	or	a
	ret	z
	inc	hl
	inc	de
	jr	STRCPY

;-----------------------------------------------------------------------

; Process command, create output library from input files and output
; report to listing.

LBR:	xor	a
	ld	(PASS),a
	ld	hl,(SYMTAB)
	ld	(MODPTR),hl
	bit	S1.IX,(iy)	; building IRL index?
	call	nz,IRLHDR	; yes, write (empty) IRL header
	call	LBR2		; build library
	bit	S1.CR,(iy)	; user wants cross-reference?
	call	nz,XREF		; yes
	bit	S1.UN,(iy)	; unresolved Externals?
	call	nz,LUNDEF
	ret

LBR.R:	ld	hl,(MODN)	; get pointer to file+modules list
lbr1:	ld	a,(hl)		; skip to next entry
	inc	hl
	cp	0FEh		; end of entry?
	jr	nz,lbr1		; loop if not
	ld	a,(hl)
	cp	0FFh		; end of list?
	jp	z,lbr5		; yes
	ld	(MODN),hl	; update pointer
LBR2:	ld	hl,(MODN)
	call	SETINP		; setup input FCB with next file name
	ld	(MODN),hl
	ld	(WRMODE),a	; store operation switch
	xor	a
	ld	(KEEPFL),a	; no symbols to keep yet
	call	OPENF		; open input file
	ld	a,8
	ld	(BITCNT),a	; reset REL bit counter
	ld	hl,LBR.R
	push	hl		; push return address
	call	INITAB		; reset the symbol table
	ld	de,LNBUF
	ld	a,FF		; form-feed
	ld	(de),a
	inc	de
	ld	hl,PROGID
	call	STRCPY		; copy program ID
	ld	b,30
	call	SPACES		; separator
	call	GETDT		; add date and time
	call	WRLST		; output header
	call	WRLST		; follow with an empty line
	bit	S1.BR,(iy)	; list only module names?
	ld	hl,MSG6B	; "Modules in "...
	jr	nz,lbr4		; yes
	bit	S1.LI,(iy)	; full listing?
	ld	hl,MSG6A	; "Module listing of "...
	jr	z,RELD		; no
lbr4:	ld	de,LNBUF
	call	STRCPY		; copy message
	call	LIBNAM		; copy library name
	call	WRLST		; output line
	xor	a
	ld	(ICNT),a	; reset number of items per line
	ld	de,LNBUF
	ld	(LNPTR),de
	call	WRLST		; follow with an empty line
RELD:	ld	hl,RELD
	push	hl		; push return address
	call	GETBIT		; get segment type
	or	a		; (0 = absolute, 1 = relative)
	jp	z,S.ABS
	ld	c,2		; get rel segment type (2 bits)
	call	GNBITS
	or	a		; special segment?
	jp	z,S.SPC		; jump if yes
	ld	c,16		; skip next 16 bits
	jp	SNBITS

lbr5:	bit	S1.IX,(iy)	; writing IRL index?
	ret	nz		; yes, return (EOF already copied from source)
	ld	a,9Eh		; REL EOF
	jp	FPUTLB		; else write REL EOF record and return

MSG6A:	db	'Module listing of ',0
MSG6B:	db	'Modules in ',0

; Process absolute segment

S.ABS:	ld	c,8		; skip next 8 bits
	jp	SNBITS

; Process special relative segment

S.SPC:	ld	c,4		; get next 4 bits
	call	GNBITS
	and	0Fh
	rlca			; obtain word offset
	ld	e,a
	ld	d,0
	ld	hl,SGTAB
	add	hl,de		; index into table
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	jp	(hl)		; execute routine

SGTAB:	dw	SEG.0,SEG.1,SEG.2,SEG.3
	dw	SEG.4,SEG.5,SEG.6,SEG.7
	dw	SEG.8,SEG.9,SEG.A,SEG.B
	dw	SEG.C,SEG.D,SEG.E,SEG.F

SEG.0:				; Entry symbol (name for search)
SEG.1:	jp	FLD.B		; Select COMMON block

SEG.2:	call	FLD.B		; Module name
	ld	a,MODTYP
	ld	c,0
	jp	ADDSYM		; enter module name into symbol table

SEG.3:	call	FLD.B		; Default lib (RQUEST)
	ld	a,LIBTYP
	ld	(LRQFLG),a	; set Lib Request flag
	ld	c,0
	jp	ADDSYM		; enter lib name into symbol table

SEG.4:	call	FLD.B		; Special extension segment
	ld	hl,SNAME
	ld	a,(hl)
	cp	'I'		; IDENT?
	ret	nz		; return if not
	ld	e,l
	ld	d,h
	inc	hl
	ld	bc,6
	ldir			; fix name (remove 'I')
	ld	a,' '
	ld	(de),a
	inc	de
	ld	(de),a
	ld	a,(SLEN)
	dec	a
	ret	z		; null name, ignore
	cp	6+1
	jr	c,se41
	ld	a,6		; truncate to 6 chars
se41:	ld	(SLEN),a
	ld	a,IDNTYP
	ld	c,0
	jp	ADDSYM		; enter ident into symbol table

SEG.5:	call	FLD.A		; COMMON length
	call	FLD.B
	ld	a,COMTYP
	ld	(COMFLG),a	; set COMMOM flag
	jp	ADDSV		; enter COMMON name and length into symbol table

SEG.6:	call	FLD.A		; EXTERN ref
	call	FLD.B
	ld	a,EXTTYP
	ld	(EXTFLG),a	; set External flag
	jp	ADDSV		; enter External ref into symbol table

SEG.7:	call	FLD.A		; PUBLIC def
	call	FLD.B
	ld	a,GBLTYP
	jp	ADDSV		; enter Public symbol into symbol table

SEG.8:				; External - offset
SEG.9:				; External + offset
SEG.B:				; Set loading location
SEG.C:	jp	FLD.A		; Chain address

SEG.A:	call	FLD.A		; DSEG length
	ld	hl,(ADDR)
	ld	(LEND),hl
	ret

SEG.D:	call	FLD.A		; CSEG length
	ld	hl,(ADDR)
	ld	(LENC),hl
	ret

SEG.E:	call	FLD.A		; End of module
	ld	a,8
	ld	(BITCNT),a	; skip to next byte boundary
	call	MMATCH		; module name matches any in user-supplied list?
	jp	nz,S.EE		; no, ignore this module

	ld	hl,(MODCNT)
	inc	hl		; count this module
	ld	(MODCNT),hl

	ld	a,(WRMODE)
	ld	(WRFLAG),a	; write flag = write mode
	ld	a,1
	ld	(KEEPFL),a	; keep symbols for cross-ref
	bit	S1.LI,(iy)	; list all?
	jr	nz,S.EALL	; yes
	bit	S1.BR,(iy)	; list only module names?
	jp	z,S.EE		; no

	ld	de,(LNPTR)
	ld	a,(ICNT)
	cp	8		; max 8 items per line
	jr	nz,se2		; jump if not reached
	xor	a
	ld	(ICNT),a	; reset counter
	call	WRLST		; output line
se2:	ld	a,(ICNT)
	inc	a
	ld	(ICNT),a	; increment counter
	ld	a,MODTYP
	ld	(TYPE),a
	ld	hl,(MODPTR)	; scan symbols of last module only
	ld	(SYMPTR),hl
	call	GETSYM		; find module name
	call	nc,CPYN8	; output module name
	ld	a,' '
	ld	(de),a		; add separator
	inc	de
	ld	(LNPTR),de
	jp	S.EE

S.EALL:	ld	de,LNBUF
	ld	hl,MSG1		; "Module "
	call	STRCPY
	push	hl
	ld	a,MODTYP
	ld	(TYPE),a
	ld	hl,(MODPTR)	; scan symbols of last module only
	ld	(SYMPTR),hl
	call	GETSYM
	call	nc,CPYNAM	; output module name
	pop	hl
 IF 0
	inc	hl
	call	STRCPY		; " of "
	call	LIBNAM		; output source file name
 ENDIF
	call	WRLST		; output line

	ld	a,IDNTYP
	ld	(TYPE),a
	ld	hl,(MODPTR)	; scan last module only
	ld	(SYMPTR),hl
	call	GETSYM		; find ident
	jr	c,se1		; skip if not set
	push	hl
	ld	hl,MSG10	; "Ident  "
	call	STRCPY
	pop	hl
	call	CPYNAM		; output module identification version
	call	WRLST		; output line
se1:	call	WRLST		; follow with an empty one

	ld	hl,MSG2		; "Length of program: "
	call	STRCPY
	ld	hl,(LENC)	; CSEG length
	ex	de,hl
	call	CVTWH
	ex	de,hl
	ld	a,'H'
	ld	(de),a
	inc	de
	call	WRLST

	ld	hl,MSG3		; "Length of data: "
	call	STRCPY
	ld	hl,(LEND)	; DSEG length
	ex	de,hl
	call	CVTWH
	ex	de,hl
	ld	a,'H'
	ld	(de),a
	inc	de
	call	WRLST

	ld	a,(COMFLG)
	or	a
	jr	z,se4

	ld	de,LNBUF
	ld	hl,MSG7		; "Length of COMMONs: "
	call	STRCPY
	call	DMPCOM

se4:	ld	a,(LRQFLG)
	or	a
	jr	z,se5

	call	WRLST

	ld	hl,MSG9		; "Libraries requested:"
	call	STRCPY
	call	WRLST
	call	DMPLRQ

	call	WRLST

se5:	call	WRLST

	ld	hl,MSG4		; "Entry points:"
	call	STRCPY
	call	WRLST

	ld	a,GBLTYP	; type = public symbols
	call	DMPTAB		; dump symbol table
	call	WRLST

	ld	a,(EXTFLG)
	or	a
	jr	z,se6

	call	WRLST

	ld	hl,MSG5		; "External references:"
	call	STRCPY
	call	WRLST

	ld	a,EXTTYP	; type = external symbols
	call	DMPTAB		; dump symbol table
	call	WRLST

se6:	call	WRLST
	call	WRLST

S.EE:	ld	a,(WRFLAG)	; check write flag
	or	a		; no output?
	jr	z,S.EE1		; then skip copy
	bit	S1.IX,(iy)	; building IRL index?
	call	z,MCOPY		; no, copy module to output file
S.EE1:	jp	INITAB		; reset symbol table and return

; Copy module to output file

MCOPY:	call	POS.I		; get current input file position
	ld	hl,MODST
	ld	a,c
	sub	(hl)		; compute module length
	ld	c,a
	inc	hl
	ld	a,b
	sbc	a,(hl)
	ld	b,a
	inc	hl
	ld	a,e
	sbc	a,(hl)
	ld	e,a
	inc	hl
	ld	a,d
	sbc	a,(hl)
	ld	d,a
	or	e		; zero length?
	or	b
	or	c
	ret	z		; yes, return
	ld	(MCNT),bc
	ld	(MCNT+2),de
	ld	bc,(MODST)
	ld	de,(MODST+2)
	call	SEEK.I		; rewind to start of module
mcpy:	call	FGETRB
	call	FPUTLB		; copy byte
	call	DECCNT		; decrement count
	jr	nz,mcpy		; and loop
	ret

DECCNT:	ld	hl,(MCNT)
	ld	a,h
	or	l
	dec	hl
	ld	(MCNT),hl
	ex	de,hl
	jr	nz,dec1
	ld	hl,(MCNT+2)
	dec	hl
	ld	(MCNT+2),hl
	ld	a,h
	or	l
	ret	nz
dec1:	ld	a,d
	or	e
	ret

MSG1:	db	'Module ',0,' of ',0
MSG10:	db	'Ident  ',0
MSG2:	db	'Code size:   ',0
MSG3:	db	'Data size:   ',0
MSG4:	db	'Entry points:',0
MSG5:	db	'External references:',0
MSG7:	db	'COMMON size: ',0
LEN7	equ	$-MSG7-1	; -1 is to ignore trailing null in length
MSG9:	db	'Requested libraries:',0

SEG.F:	pop	hl		; End of file, discard return addr
	bit	S1.IX,(iy)	; building IRL index?
	jr	z,sf0		; no
	call	ENDIX		; else write end-of-index marker
	call	UPDHDR		; update IRL header
	ld	hl,0
	ld	(MODST),hl
	ld	(MODST+2),hl
	call	MCOPY		; copy the whole library to the output IRL file
sf0:	call	CLSE.I		; close input file
	bit	S1.BR,(iy)	; list only module names?
	jr	nz,sf1		; yes
	bit	S1.LI,(iy)	; list all?
	jr	nz,sf2		; yes
	ret			; else return

sf1:	ld	de,(LNPTR)	; output last line
	call	WRLST		;  if listing module names only
	call	WRLST		; follow with an empty line
sf2:	ld	de,LNBUF
	ld	hl,MSG8		; "Total modules: "
	call	STRCPY
	ld	hl,(MODCNT)
	ex	de,hl
	xor	a
	call	CVTWD
	ex	de,hl
	jp	WRLST

MSG8:	db	'Total modules: ',0

; Get field A of REL item

FLD.A:	ld	c,2		; get next 2 bits
	call	GNBITS
	rrca
	rrca			; into 2 upper bits
	ld	(SEG),a
	ld	c,8		; get next 16 bits into HL
	call	GNBITS
	ld	l,a
	ld	c,8
	call	GNBITS
	ld	h,a
	ld	(ADDR),hl
	ret

; Get field B of REL item

FLD.B:	ld	hl,SNAME
	ld	c,3		; get next 3 bits (name length)
	call	GNBITS
	call	FIXLEN		; length 0 means 8
	ld	(SLEN),a	; store length
	ld	b,a
fb1:	ld	c,8		; get next 8 bits (char)
	call	GNBITS
	and	7Fh
	ld	(hl),a		; store name
	inc	hl
	djnz	fb1
	ret

; Get next bit from input REL file

GETBIT:	ld	a,(BITCNT)
	cp	8
	jr	nz,gb1
	xor	a
	ld	(BITCNT),a
	call	FGETRB
	ld	(BYTE),a
gb1:	ld	a,(BITCNT)
	inc	a
	ld	(BITCNT),a
	ld	a,(BYTE)
	rlca
	ld	(BYTE),a
	and	1
	ret

; Get next N bits (up to 8) from REL file (N is in register C).
; Return the bits in A.

GNBITS:	push	bc
	ld	b,c
	xor	a
	ld	c,a
gn1:	rlc	c
	call	GETBIT
	or	c
	ld	c,a
	djnz	gn1
	pop	bc
	ret

; Skip N bits (N is in register C)

SNBITS:	call	GETBIT
	dec	c
	jr	nz,SNBITS
	ret

; Write current line to listing output

WRLST:	xor	a
	ld	(de),a		; end with a null char
	ld	de,LNBUF
	jp	FWRLST

; Compare HL and DE

HL?DE:	ld	a,h
	cp	d
	ret	nz
	ld	a,l
	cp	e
	ret

; Compare HL and BC

HL?BC:	ld	a,h
	cp	b
	ret	nz
	ld	a,l
	cp	c
	ret

; Reset the symbol table

INITAB:	bit	S1.CR,(iy)	; user wants symbol cross-reference?
	jr	nz,init1
	bit	S1.UN,(iy)	; or undefined symbol list?
	ld	hl,(SYMTAB)
	jr	z,init2		; no, zap whole table
init1:	ld	a,(KEEPFL)
	or	a		; was last module included?
	ld	hl,(MODPTR)
	jr	z,init2		; no, zap last module
	ld	hl,(TABPTR)	; yes, keep it
	jr	init3
init2:	ld	(TABPTR),hl	; reset symbol table pointer
init3:	ld	(MODPTR),hl	; reset module pointer
	ld	(hl),0FFh	; store end of table marker
	call	POS.I
	ld	(MODST),bc	; remember start of module
	ld	(MODST+2),de
	ld	hl,0
	ld	(LENC),hl	; clear CSEG length
	ld	(LEND),hl	; clear DSEG length
	xor	a
	ld	(WRFLAG),a	; clear write flag
	ld	(KEEPFL),a	; clear keep symbols flag
	ld	(EXTFLG),a	; clear External flag
	ld	(COMFLG),a	; clear COMMON flag
	ld	(LRQFLG),a	; clear Lib Request flag
	ret

; Enter symbol and symbol value into the symbol table

ADDSV:	bit	S1.CR,(iy)	; cross-reference wanted?
	jr	nz,adsv0	; yes
	bit	S1.UN,(iy)	; unresolved list?
	jr	z,adsv1		; no

adsv0:	ld	hl,(SYMTAB)
	ld	(SYMPTR),hl
	push	af		; save type
	ld	hl,(TABPTR)
	push	hl
	call	FNDSYM		; find symbol by name
	jr	c,adsv3		; not found
	ex	(sp),hl
	xor	a
	ld	(SLEN),a	; else omit name in record
adsv3:	pop	hl
	pop	af
	ld	de,(TABPTR)	; TODO: write better!
	push	de
	push	hl
	ld	c,6		; payload = 6 bytes
	call	adsv2		; enter symbol and value
	ld	de,(MODPTR)
	inc	hl
	ld	(hl),e		; store def/ref module name
	inc	hl
	ld	(hl),d
	inc	hl
	pop	de
	ld	(hl),e		; store ptr to root symbol
	inc	hl
	ld	(hl),d
	ex	de,hl
	ld	c,l		; remember address of root symbol
	ld	b,h
adsv4:	call	SYMDAT		; point to data area
	ld	a,1+2+2
	call	ADDHLA		; then to ref list
	ld	e,(hl)		; get pointer
	inc	hl
	ld	d,(hl)
	ex	de,hl
	call	HL?BC		; same as root?
	jr	nz,adsv4	; no, try next
	ex	de,hl		; yes, end of the list
	pop	de
	ld	(hl),d		; replace with address of this symbol
	dec	hl
	ld	(hl),e

	;this.ptr=root
	;ptr=root.ptr
	;while (ptr!=root) ptr=ptr.ptr
	;ptr.ptr=this

	ret

adsv1:	ld	c,2		; payload = 2 bytes
adsv2:	call	ADDSYM
	ld	a,(SEG)
	dec	hl
	or	(hl)		; merge segment bits
	ld	(hl),a		;  with payload length byte
	inc	hl
	ld	de,(ADDR)
	ld	(hl),e		; store symbol value
	inc	hl
	ld	(hl),d
	ret

; Add symbol into symbol table, reserving C payload bytes.
; Returns HL = payload area.

ADDSYM:	push	bc
	ld	(TYPE),a
	bit	S1.IX,(iy)	; building IRL index?
	jr	z,ad0		; no
	and	TYPMSK
	cp	GBLTYP		; public symbol?
	call	z,ADDIX		; yes, add to index
ad0:	bit	S1.BR,(iy)	; list only module names?
	jr	z,ad1		; no, add all symbols
	ld	a,(TYPE)	; get address type
	and	TYPMSK
	cp	MODTYP		; module name?
	pop	bc
	ret	nz		; no, return
	push	bc
ad1:	call	CHKMEM		; ensure enough memory is available
	ld	hl,SLEN
	ld	c,(hl)		; get length into C
	ld	de,(TABPTR)	; get symbol table pointer
	ld	a,(TYPE)	; get symbol type
	or	c		; merge with length
	ld	(de),a		; store in table
	inc	de
	ld	b,0		; BC = length
	ld	a,c
	or	a
	jr	z,ad2
	inc	hl		; point to name (SNAME)
	ldir			; store symbol name
ad2:	pop	hl		; get payload length
	ld	a,l
	ld	(de),a		; store in table
	inc	de
	ld	h,0
	add	hl,de
	ld	(hl),0FFh	; set end marker
	ld	(TABPTR),hl
	ex	de,hl		; return HL = addr of payload area
	ret

; TODO: Check!

TSHIFT:	ld	a,(hl)
	inc	a		; end of table?
	ret	z
	ld	de,(TABPTR)
	inc	de		; include end marker in copy
	ex	de,hl
	or	a
	sbc	hl,de		; obtain length
	push	hl
	ex	de,hl		; DE = src
	ld	a,(SLEN)
	add	a,4		; len,seg,value
	add	a,c		; add any extra payload
	ld	l,a
	ld	h,0
	add	hl,de
	ld	(TABPTR),hl	; set new end of table
	ex	de,hl		; HL = src, DE = dst
	pop	bc
	lddr			; shift table up
	inc	hl		; HL = addr to store new symbol
	ret

; Find root symbol entry for cross-reference record. Preserves DE.

FNDNAM:	ld	c,l		; remember symbol address
	ld	b,h
fn1:	ld	a,(hl)
	and	LENMSK
	ret	nz		; found
	ld	a,1+1+2+2	; skip length, segment, value, modptr
	call	ADDHLA
	ld	a,(hl)		; get chain pointer
	inc	hl
	ld	h,(hl)
	ld	l,a
	call	HL?BC		; back home?
	jr	nz,fn1		; no, try next record in chain
	scf
	ret			; no record found (should not happen)

; Get next symbol of specified type in symbol table, starting from current
; position (SYMPTR). Returns CY set if no more symbols left. Preserves DE.

GETSYM:	ld	hl,(SYMPTR)
	ld	ix,TYPE
fnd1:	ld	a,(hl)		; get first byte from symbol entry
	cp	0FFh		; end of table?
	scf
	ret	z		; yes, return - symbol not found
	and	TYPMSK		; mask type bits
	cp	(ix)		; type matches?
	ret	z		; yes, return
	call	NXTSYM		; point to start of next symbol
	jr	fnd1		; and loop

; Find symbol by name, match only Public and External types. Used by the
; symbol cross-reference routines.

FNDSYM:	ld	hl,(SYMPTR)
fnd2:	ld	a,(hl)
	cp	0FFh		; end of table?
	scf
	ret	z		; yes, return - symbol not found
	and	TYPMSK
	cp	GBLTYP		; Public symbol?
	jr	z,fnd3		; yes
	cp	EXTTYP		; External reference?
	jr	nz,fnd4		; no, skip
fnd3:	push	hl
	ex	de,hl
	call	CMPNAM		; name matches?
	pop	hl
	ret	z		; yes, return
fnd4:	call	NXTSYM		; else try next
	jr	fnd2

CMPNAM:	ld	hl,SLEN
	ld	a,(de)
	and	LENMSK
	cp	(hl)		; same length?
	ret	nz		; no, return
	ld	b,a
cmp1:	inc	hl
	inc	de
	ld	a,(de)
	cp	(hl)		; else compare strings
	ret	nz
	djnz	cmp1
	ret

; Advance SYMPTR to start of next symbol.

NXTSYM:	ld	hl,(SYMPTR)
	ld	a,(hl)		; get len+type byte
	inc	hl
	and	LENMSK		; mask length bits
	call	ADDHLA
	ld	a,(hl)		; get symbol segment byte
	inc	hl
	and	LENMSK		; length of additional payload
	call	ADDHLA		; point to start of next symbol
	ld	(SYMPTR),hl	; update pointer
	ret

; Check for enough available memory, request more if necessary.

CHKMEM:	ld	hl,(TABPTR)
	ld	de,32		; more than enough for a symbol entry
	add	hl,de
	ex	de,hl
	ld	hl,(MEMTOP)
	call	HL?DE		; enough space?
	ret	nc		; yes, return
	ld	hl,2048
	call	INCMEM		; else try extending task size
	ex	de,hl
	ld	hl,ERROVF
	jp	c,ERROR
	ld	(MEMTOP),de	; set new memory top
	ret

ERROVF:	db	'Out of memory',0

; Dump all symbols of the specified type

DMPTAB:	ld	(TYPE),a	; remember symbol type
	ld	hl,(MODPTR)	; scan last module only
	ld	(SYMPTR),hl
	xor	a
	ld	(ICNT),a
dt1:	call	GETSYM		; get next symbol
	ret	c		; end of table, return
	ld	a,(ICNT)
	cp	4		; max 4 items per line
	jr	nz,dt2
	call	WRLST		; wrap to next line
	xor	a
dt2:	inc	a
	ld	(ICNT),a
	call	CPYN8		; copy symbol name
	ld	a,' '
	ld	(de),a		; add separator
	inc	de
	call	CPYVAL		; follow with value
	ld	b,4
	call	SPACES		; add separator
	call	NXTSYM
	jr	dt1

CPYVAL:	ld	c,(hl)		; get symbol segment
	inc	hl
	ld	a,(hl)		; get symbol value
	inc	hl
	push	hl
	ld	h,(hl)
	ld	l,a
	ex	de,hl
	call	CVTWH		; copy value
	ex	de,hl
	ld	a,c		; get segment type
	call	SEGCHR		; conver to char id
	ld	a,b
	ld	(de),a		; copy segment identifier
	inc	de
	pop	hl
	inc	hl
	ret

SEGCHR:	and	SEGMSK
	cp	40h		; CSEG
	ld	b,''''
	ret	z
	cp	80h		; DSEG
	ld	b,'"'
	ret	z
	cp	0C0h		; COMMON
	ld	b,'!'
	ret	z
	ld	b,' '		; ASEG
	ret

; Dump COMMON names

DMPCOM:	ld	hl,(MODPTR)	; scan last module only
	ld	(SYMPTR),hl
	xor	a
	ld	(ICNT),a
	ld	a,COMTYP
	ld	(TYPE),a
dc1:	call	GETSYM
	ret	c
	ld	a,(ICNT)
	or	a
	jr	z,dc5
	ld	de,LNBUF	; indent if not first time
	ld	b,LEN7
	call	SPACES
dc5:	ld	a,(hl)
	inc	hl
	push	hl		; remember start of name
	and	LENMSK		; mask length bits
	push	af		; save length
	call	ADDHLA
	inc	hl		; skip segment (we know is COMMON)
	ld	a,(hl)		; get value (COMMON length)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ex	de,hl
	call	CVTWH		; output length
	ex	de,hl
	ld	a,'H'
	ld	(de),a
	inc	de
	ld	a,' '
	ld	(de),a
	inc	de
	ld	a,'/'
	ld	(de),a
	inc	de
	pop	af		; pop length
	pop	hl		; pop pointer to start of name
	ld	c,a
	ld	b,0
	ldir			; copy name
	ld	a,'/'
	ld	(de),a
	inc	de
	call	WRLST		; output line
	call	NXTSYM
	ld	a,1
	ld	(ICNT),a
	jr	dc1

; Dump names of requested libraries

DMPLRQ:	ld	hl,(MODPTR)	; scan last module only
	ld	(SYMPTR),hl
	xor	a
	ld	(ICNT),a
	ld	a,LIBTYP
	ld	(TYPE),a
dl1:	call	GETSYM
	ret	c
	ld	a,(ICNT)
	cp	8		; max 8 items per line
	jr	nz,dl2
	xor	a
	ld	(ICNT),a	; wrap to next line
	call	WRLST
dl2:	ld	a,(ICNT)
	inc	a
	ld	(ICNT),a
	call	CPYN8
	ld	a,' '
	ld	(de),a		; add separator
	inc	de
	call	NXTSYM
	jr	dl1

; Copy symbol name to output string

CPYNAM:	ld	a,(hl)		; get type and length
	and	LENMSK		; leave length bits
	ret	z
	inc	hl		; point to start of name
	ld	c,a
	ld	b,0		; BC = length
	ldir			; copy name
	ret

; Copy symbol name to output string, padding to 8 chars with spaces

CPYN8:	push	hl
	call	FNDNAM
	call	cpyn81
	pop	hl
	jp	SYMDAT

cpyn81:	call	CPYNAM		; copy name
	ld	c,a		; A still contains length
	ld	a,8
	sub	c
	ret	z
	ld	b,a
SPACES:	ld	a,' '
pad8:	ld	(de),a		; pad with spaces
	inc	de
	djnz	pad8
	ret

; Point to symbol data area

SYMDAT:	ld	a,(hl)
	inc	hl
	and	LENMSK
	jp	ADDHLA

; Check if module name matches any in user-supplied list

MMATCH:	ld	hl,(MODN)
	ld	a,(hl)
	cp	0FEh		; null module list?
	jr	z,EQL		; default behavior is match
	or	a
	jr	z,EQL		; same for an empty name
	ld	hl,(MODPTR)	; scan last module only
	ld	(SYMPTR),hl
	ld	a,MODTYP
	ld	(TYPE),a	; type = module name
	call	GETSYM		; get current module name
	jr	c,NEQ		; branch if not found
	ld	de,SNAME	; DE = dest
	call	CPYNAM		; copy name
	xor	a
	ld	(de),a		; end with a null
	ld	hl,(MODN)	; DE = start of user-specified module list
m1:	ld	a,(hl)
	cp	0FEh		; end of list?
	jr	z,NEQ		; branch if yes, not found
	ld	de,SNAME
	push	hl
	call	MATCH		; name matches?
	pop	hl
	jr	z,EQL		; exit loop if yes, found
m2:	ld	a,(hl)
	inc	hl
	or	a
	jr	nz,m2		; skip to next name
	jr	m1		; and loop

EQL:	ld	a,(WRMODE)
	cp	2		; delete module?
	jr	z,NEQ1		; jump if yes, return 0FFh
EQL1:	xor	a		; else return 00h
	ret

NEQ:	ld	a,(WRMODE)
	cp	2		; delete module?
	jr	z,EQL1		; jump if yes, return 00h
NEQ1:	xor	a
	dec	a		; else return 0FFh
	ret

; Match string in DE against pattern in HL. Both are zero-terminated.
; Returns Z if string matches pattern.

MATCH:	ld	c,1		; star flag: 0 if star seen, 1 otherwise
mstart:	ld	(MSTR),de
	ld	(MPAT),hl
mloop:	ld	a,(de)
	or	a
	jr	z,eloop
	ld	a,(hl)
	cp	'%'		; % matches a single character
	jr	z,next
	cp	'*'		; * matches zero or more characters
	jr	nz,other
	ld	c,0		; star = 0
	inc	hl
	ld	a,(hl)
	or	a
	ret	z		; match
	jr	mstart

other:	ld	a,(de)		; any other character matches literally
	cp	(hl)
	jr	z,next
	ld	a,c
	or	a		; no star?
	ret	nz		; no match
	ld	hl,(MSTR)
	inc	hl
	ld	(MSTR),hl
	ex	de,hl		; old ++str in DE
	ld	hl,(MPAT)	; old pat in HL
	jr	mloop

next:	inc	de
	inc	hl
	jr	mloop

eloop:	ld	a,(hl)
	cp	'*'
	jr	nz,s1
	inc	hl
	ld	a,(hl)
s1:	or	a
	ret			; match if end of pattern

; If A=0 then A=8

FIXLEN:	dec	a		; 0 means 8
	and	7
	inc	a
	ret

;-----------------------------------------------------------------------

; Output symbol cross-reference

XREF:	ld	de,LNBUF
	call	WRLST		; TODO: new page?
	ld	hl,MSG20
	call	STRCPY
	call	WRLST		; output header
	call	WRLST

	ld	hl,(SYMTAB)
	ld	(SYMPTR),hl	; scan the whole table
xr1:	ld	a,(hl)
	cp	0FFh		; end of table?
	ret	z		; yes, return
	ld	bc,xr2
	push	bc		; push return address
	ld	c,a
	and	LENMSK		; name-suppressed record?
	ret	z		; yes, skip it
	ld	a,c
	and	TYPMSK		; mask type bits
	cp	GBLTYP		; public symbol?
	jp	z,xrp		; yes
	cp	EXTTYP		; external reference?
	jp	z,xre		; yes
	ret
xr2:	call	NXTSYM		; advance to next symbol
	jr	xr1

xrp:	; Public symbol found

	push	hl		; remember address of this symbol
	call	CPYN8		; copy symbol name
	ld	a,' '
	ld	(de),a		; add separator
	inc	de
	call	CPYVAL		; copy value
	ld	b,4
	call	SPACES		; skip to the 'Defined' section
	ld	a,(hl)		; get pointer to module name
	inc	hl
	ld	h,(hl)
	ld	l,a
	call	CPYN8		; output module name defining this symbol
	ld	a,' '
	ld	(de),a		; add separator
	inc	de

xrf:	pop	hl		; pop symbol address
	ld	(ADDR),hl	; remember it
	xor	a
	ld	(ICNT),a	; clear names/line counter
xrf1:	ld	a,(hl)		; search for External entries
	and	TYPMSK
	cp	EXTTYP		; found?
	call	z,xrf2		; yes, display name under 'Referenced' section
	ld	a,(hl)
	and	LENMSK
	add	1+1+2+2
	call	ADDHLA
	ld	a,(hl)		; get chain pointer
	inc	hl
	ld	h,(hl)
	ld	l,a
	push	de
	ld	de,(ADDR)
	call	HL?DE		; back home?
	pop	de
	jr	nz,xrf1		; no, try next
	call	WRLST		; end with a newline
	ret

xrf2:	ld	a,(ICNT)
	cp	5		; line full?
	jr	c,xrf3		; no
	call	WRLST		; else output the line, wrap to next
	ld	b,9*3
	call	SPACES		; skip to the 'Referenced' section
	xor	a
xrf3:	inc	a
	ld	(ICNT),a
	push	hl
	call	SYMDAT
	ld	a,1+2
	call	ADDHLA
	ld	a,(hl)		; get pointer to module name
	inc	hl
	ld	h,(hl)
	ld	l,a
	call	CPYN8		; output module name referencing this symbol
	ld	a,' '
	ld	(de),a		; add separator
	inc	de
	pop	hl
	ret

xre:	; External reference found

	ld	c,l		; remember symbol address
	ld	b,h
xre1:	ld	a,(hl)		; search for Public entry
	and	TYPMSK
	cp	GBLTYP		; found?
	jr	z,xrp		; yes, continue via Public symbol routine
	ld	a,(hl)
	and	LENMSK
	add	1+1+2+2
	call	ADDHLA
	ld	a,(hl)		; get chain pointer
	inc	hl
	ld	h,(hl)
	ld	l,a
	call	HL?BC		; back home?
	jr	nz,xre1		; no, try next

	push	hl		; remember symbol address
	call	CPYN8		; copy symbol name
	ld	a,' '
	ld	(de),a		; add separator
	inc	de
	call	CPYVAL		; copy value
	ld	b,4+9
	call	SPACES		; no module defines this symbol
	jp	xrf		; display 'referenced' list

MSG20:	db	'Symbol   Value    Defined  Referenced',0

;-----------------------------------------------------------------------

; List unsatisfied Externals
; TODO: list Externals unsatisfied after a single scan.

LUNDEF:	ld	de,LNBUF
	call	WRLST		; TODO: new page?
	ld	hl,MSG21
	call	STRCPY
	call	WRLST		; output header
	xor	a
	ld	(ICNT),a

	ld	hl,(SYMTAB)
	ld	(SYMPTR),hl	; scan the whole table
lu1:	ld	a,(hl)
	cp	0FFh		; end of table?
	jp	z,WRLST		; yes, write line and return
	ld	bc,lu2
	push	bc		; push return address
	ld	c,a
	and	LENMSK		; name-suppressed record?
	ret	z		; yes, skip it
	ld	a,c
	and	TYPMSK		; mask type bits
;;	cp	GBLTYP		; public symbol?
;;	jp	z,...		; yes
	cp	EXTTYP		; external reference?
	jp	z,lu3		; yes
	ret
lu2:	call	NXTSYM		; advance to next symbol
	jr	lu1

lu3:	ld	c,l		; remember symbol address
	ld	b,h
lu4:	ld	a,(hl)		; search for Public entry
	and	TYPMSK
	cp	GBLTYP		; found?
	ret	z		; yes, return
	ld	a,(hl)
	and	LENMSK
	add	1+1+2+2
	call	ADDHLA
	ld	a,(hl)		; get chain pointer
	inc	hl
	ld	h,(hl)
	ld	l,a
	call	HL?BC		; back home?
	jr	nz,lu4		; no, try next

	ld	a,(ICNT)
	cp	8		; max 8 names per line
	jr	c,lu5
	call	WRLST		; wrap to next line
	xor	a
lu5:	inc	a
	ld	(ICNT),a
	call	CPYN8		; copy symbol name
	ld	a,' '
	ld	(de),a		; add separator
	inc	de
	ret

MSG21:	db	'Unsatisfied External requests:',0

;-----------------------------------------------------------------------

; Write (initially empty) IRL header.

IRLHDR:	ld	b,128
ih1:	xor	a
	call	FPUTLB
	djnz	ih1
	ret

; Update IRL header, called after end index marker is written (ENDIX)
; Resets the output file pointer to the end of index section, so the
; input library call be copied afterwards.

UPDHDR:	call	POS.O
	ld	(MODST),bc
	ld	(MODST+2),de
	ld	de,0
	ld	bc,0
	call	SEEK.O
	call	WROFS
	ld	bc,(MODST)
	ld	de,(MODST+2)
	jp	SEEK.O

; Add symbol to IRL index

ADDIX:	call	WROFS		; write 3-byte module offset
	ld	hl,SLEN
	ld	b,(hl)		; get length
	inc	hl		; point to SNAME
a1:	ld	a,(hl)
	call	FPUTLB		; write symbol name
	inc	hl
	djnz	a1
	ld	a,0FEh		; end of name marker
	jp	FPUTLB		; write marker and return

WROFS:	ld	bc,(MODST)	; get file offset of module start
	ld	de,(MODST+2)
	ld	a,e		; IRL offset is a 21-bit value
	and	0E0h		; thus ensure upper 11 bits are zero
	or	d
	ld	hl,ERRBIG
	jp	nz,ERROR	; else library is too big for IRL
	rl	c		; convert offset to 3x 7-bit values
	rl	b		;  as per IRL format specs
	rl	e
	srl	c
	rl	b
	rl	e
	srl	b
	ld	a,e
	call	FPUTLB		; write high 7 bits
	ld	a,b
	call	FPUTLB		; write mid 7 bits
	ld	a,c
	jp	FPUTLB		; write low 7 bits and return

ERRBIG:	db	'IRL index overflow',0

; Add end of index marker

ENDIX:	call	POS.I
	call	PADSZ		; pad size to next 127-byte record boundary
	ld	(MODST),bc
	ld	(MODST+2),de
	call	WROFS
	ld	a,0FEh
	call	FPUTLB
ex1:	call	POS.O
	ld	a,c
	and	7Fh
	ret	z
	ld	a,EOF
	call	FPUTLB		; pad with EOF chars to next record boundary
	jr	ex1

PADSZ:	ld	a,c
	and	7Fh
	ret	z
	ld	a,c
	and	80h
	add	a,80h
	ld	c,a
	ret	nc
	inc	b
	ret	nz
	inc	e
	ret	nz
	inc	d
	ret

;-----------------------------------------------------------------------

	dseg

ICNT:	ds	1		; number of items per line
MODCNT:	ds	2		; number of modules processed

BYTE:	ds	1
BITCNT:	ds	1

LEND:	ds	2		; DSEG length
LENC:	ds	2		; CSEG length
EXTFLG:	ds	1
COMFLG:	ds	1
LRQFLG:	ds	1

TYPE:	ds	1		; symbol type
SLEN:	ds	1		; name length  !    do not    !
SNAME:	ds	9		; symbol name  ! change order !
SEG:	ds	1		; symbol segment
ADDR:	ds	2		; symbol value

SYMTAB:	ds	2		; begin of symbol table
TABPTR:	ds	2		; current end of symbol table
SYMPTR:	ds	2		; current symbol pointer
MODPTR:	ds	2		; pointer to symbols of current module in table

MODST:	ds	4		; file position of module start
MCNT:	ds	4		; module copy count
PASS:	ds	1

TEMP1:	ds	2

WRMODE:	ds	1
WRFLAG:	ds	1		; write flag: 0 = no output, <>0 = output
KEEPFL:	ds	1		; keep symbols flag
MSTR:	ds	2
MPAT:	ds	2

MEMBOT:	ds	2		; begin of heap
MEMTOP:	ds	2		; top of heap

$MEMRY:	ds	2		; pointer to start of free memory

	ds	128
STACK	equ	$

	end	START
