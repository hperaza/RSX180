;**********************************************************************;
;                                                                      ;
;   This file is part of LBR, a relocatable object code librarian      ;
;   program for CP/M and RSX180.                                       ;
;   Copyright (C) 1992-2021, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

;----------------------------------------------------------------------;
;                                                                      ;
;   Main module                                                        ;
;                                                                      ;
;----------------------------------------------------------------------;

; TODO:
; - check for min mem space
; - automatic task extension
; - create IRL file
; - display symbol cross-reference
; - display undefined references

	.Z80

	ident	'V1.41'

TAB	equ	09h
CR	equ	0Dh
LF	equ	0Ah
FF	equ	0Ch

	public	ERROR,ADDR,MEMBOT,SYMTAB,$MEMRY

	extrn	GETTOP,GETCMD,RESCMD,EXIT,ERRMSG,PARSE
	extrn	SETINP,FGETRB,FWRLST,LNBUF,LNPTR,CVTWH
	extrn	MAKEF,OPENF,CLSE.I,CLSE.O,CLSE.L,FPUTLB
	extrn	MODN,LIBNAM,LMODE,WRMODE,WRFLAG,CVTWD
	extrn	PROGID,GETDT,ADDHLA

;-----------------------------------------------------------------------

	cseg

START::	ld	sp,STACK
	ld	hl,($MEMRY)
	ld	(MEMBOT),hl	; setup pointer to heap
	call	GETTOP
	ld	(MEMTOP),hl	; setup pointer to top of memory
loop:	call	GETCMD		; get command
	ld	(LNPTR),hl	; save pointer to command tail
	call	INIT		; initalize variables
	call	PARSE		; parse command
	call	MAKEF		; create output files
	call	LBR		; process command
	call	CLSE.O		; close output file
	call	CLSE.L		; close listing file
	jr	loop		; loop to process next command

ERROR:	ld	sp,STACK	; restore stack
	ld	a,h
	or	l
	call	nz,ERRMSG	; display error message
	call	CLSE.I
	call	CLSE.O
	call	CLSE.L
	call	RESCMD		; abort command file execution
	jr	loop		; and loop back

; Program initialization

INIT:	ld	hl,(MEMTOP)
	ld	(MODBFR),hl	; module buffer grows down from memory top
	ld	hl,(MEMBOT)
	ld	(MODN),hl	; user module list grows up
	ld	(hl),0FFh	; 0FFh means end of table
	inc	hl
	ld	(SYMTAB),hl	; symbol table follows module list
	ld	hl,0
	ld	(MODCNT),hl
	ret

; Copy string @HL to @DE

STRCPY:	ld	a,(hl)
	ld	(de),a
	or	a
	ret	z
	inc	hl
	inc	de
	jr	STRCPY

;-----------------------------------------------------------------------

LBR.R:	ld	hl,(MODN)
lbr0:	ld	a,(hl)
	inc	hl
	cp	0FEh		; end of name?
	jr	nz,lbr0		; loop if not
	ld	a,(hl)
	cp	0FFh		; end of table?
	ret	z		; return if yes
	ld	(MODN),hl
LBR:	ld	hl,(MODN)
	call	SETINP		; setup input FCB with next file name
	ld	(MODN),hl
	ld	(WRMODE),a	; store switch
	xor	a
	ld	(WRFLAG),a	; clear write flag
	ld	(COMFLG),a	; clear COMMON flag
	ld	(LRQFLG),a	; clear Lib Request flag
	call	OPENF		; open input
	ld	a,8
	ld	(BITCNT),a
	ld	hl,LBR.R
	push	hl		; push return address
	call	INITAB		; reset the symbol table
	ld	de,LNBUF
	ld	a,FF		; form-feed
	ld	(de),a
	inc	de
	ld	hl,PROGID
	call	STRCPY
	ld	a,' '
	ld	b,30
lbr1:	ld	(de),a
	inc	de
	djnz	lbr1
	call	GETDT
	call	WRLST		; output header
	call	WRLST
	ld	a,(LMODE)
	cp	1		; list only module names?
	ld	hl,MSG6B	; "Modules in "...
	jr	z,lbr2		; jump if yes
	ld	hl,MSG6A	; "Module listing of "...
lbr2:	ld	de,LNBUF
	call	STRCPY
	call	LIBNAM		; copy library name
	call	WRLST		; output line
	xor	a
	ld	(ICNT),a	; reset number of items per line
	ld	de,LNBUF
	ld	(LNPTR),de
	call	WRLST		; follow with empty line
RELD:	ld	hl,RELD
	push	hl		; push return address
	call	GETBIT		; get segment type
	or	a		; (0 = absolute, 1 = relative)
	jp	z,S.ABS
	ld	c,2		; get rel segment type (2 bits)
	call	GNBITS
	or	a		; special segment?
	jp	z,S.SPC		; jump if yes
	ld	c,16		; skip next 16 bits
	call	SNBITS
	ret

MSG6A:	db	'Module listing of ',0
MSG6B:	db	'Modules in ',0

; Process absolute segment

S.ABS:	ld	c,8		; skip next 8 bits
	call	SNBITS
	ret

; Process special relative segment

S.SPC:	ld	c,4		; get next 4 bits
	call	GNBITS
	and	0Fh
	rlca			; obtain word offset
	ld	e,a
	ld	d,0
	ld	hl,SGTAB
	add	hl,de		; index into table
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	jp	(hl)		; execute routine

SGTAB:	dw	SEG.0,SEG.1,SEG.2,SEG.3
	dw	SEG.4,SEG.5,SEG.6,SEG.7
	dw	SEG.8,SEG.9,SEG.A,SEG.B
	dw	SEG.C,SEG.D,SEG.E,SEG.F

SEG.0:				; Entry symbol (name for search)
SEG.1:	call	FLD.B		; Select COMMON block
	ret

SEG.2:	call	FLD.B		; Module name
	xor	a
	ld	(TYPE),a
	ld	hl,0
	ld	(ADDR),hl
	call	ADDSYM
	ret

SEG.3:	call	FLD.B		; Default lib (RQUEST)
	ld	a,4 SHL 3
	ld	(TYPE),a
	ld	(LRQFLG),a	; set Lib Request flag
	ld	hl,0
	ld	(ADDR),hl
	call	ADDSYM
	ret

SEG.4:	call	FLD.B		; Special extension segment
	ld	hl,SNAME
	ld	a,(hl)
	cp	'I'		; IDENT?
	ret	nz		; return if not
	ld	e,l
	ld	d,h
	inc	hl
	ld	bc,6
	ldir			; fix name (remove 'I')
	ld	a,' '
	ld	(de),a
	inc	de
	ld	(de),a
	ld	a,(SLEN)
	call	FIXLEN
	dec	a
	cp	6+1
	jr	c,se41
	ld	a,6		; truncate to 6 chars
se41:	ld	(SLEN),a
	ld	a,5 SHL 3
	ld	(TYPE),a
	ld	hl,0
	ld	(ADDR),hl
	call	ADDSYM
	ret

SEG.5:	call	FLD.A		; COMMON length
	call	FLD.B
	ld	a,3 SHL 3
	ld	(TYPE),a
	ld	(COMFLG),a	; set COMMOM flag
	call	ADDSYM
	ret

SEG.6:	call	FLD.A		; EXTERN ref
	call	FLD.B
	ld	a,(TYPE)
	or	2 SHL 3
	ld	(TYPE),a
	call	ADDSYM
	ret

SEG.7:	call	FLD.A		; PUBLIC def
	call	FLD.B
	ld	a,(TYPE)
	or	1 SHL 3
	ld	(TYPE),a
	call	ADDSYM
	ret

SEG.8:				; External - offset
SEG.9:				; External + offset
SEG.B:				; Set loading location
SEG.C:	call	FLD.A		; Chain address
	ret

SEG.A:	call	FLD.A		; DSEG length
	ld	hl,(ADDR)
	ld	(LEND),hl
	ret

SEG.D:	call	FLD.A		; CSEG length
	ld	hl,(ADDR)
	ld	(LENC),hl
	ret

SEG.E:	call	FLD.A		; End of module
	ld	a,8
	ld	(BITCNT),a
	call	MATCH		; module name matches user supplied name?
	jp	nz,S.EE		; branch if not

	ld	hl,(MODCNT)
	inc	hl
	ld	(MODCNT),hl

	ld	a,(WRMODE)
	ld	(WRFLAG),a	; write flag = write mode
	ld	a,(LMODE)
	cp	2		; list all?
	jr	z,S.EALL	; jump if yes

	ld	de,(LNPTR)
	ld	a,(ICNT)
	cp	8		; max 8 items per line
	jr	nz,se2		; jump if not reached
	xor	a
	ld	(ICNT),a	; reset counter
	call	WRLST		; output line
se2:	ld	a,(ICNT)
	inc	a
	ld	(ICNT),a	; increment counter
	xor	a
	ld	(TYPE),a
	ld	hl,(SYMTAB)
	ld	(SYMPTR),hl
	call	GETSYM		; find module name
	call	nc,CPYN8	; output module name
	ld	a,' '
	ld	(de),a
	inc	de
	ld	(LNPTR),de
	jp	S.EE

S.EALL:	ld	de,LNBUF
	ld	hl,MSG1		; "Module "
	call	STRCPY
	xor	a
	ld	(TYPE),a
	ld	hl,(SYMTAB)
	ld	(SYMPTR),hl
	call	GETSYM
	call	nc,CPYNAM	; output module name
	call	WRLST		; output line

	ld	a,5 SHL 3
	ld	(TYPE),a
	ld	hl,(SYMTAB)
	ld	(SYMPTR),hl
	call	GETSYM		; find ident
	jr	c,se1		; skip if not set
	push	hl
	ld	hl,MSG10	; "Ident  "
	call	STRCPY
	pop	hl
	call	CPYNAM		; output module identification version
	call	WRLST		; output line
se1:	call	WRLST		; follow with an empty one

	ld	hl,MSG2		; "Length of program: "
	call	STRCPY
	ld	hl,(LENC)	; CSEG length
	ex	de,hl
	call	CVTWH
	ex	de,hl
	ld	a,'H'
	ld	(de),a
	inc	de
	call	WRLST

	ld	hl,MSG3		; "Length of data: "
	call	STRCPY
	ld	hl,(LEND)	; DSEG length
	ex	de,hl
	call	CVTWH
	ex	de,hl
	ld	a,'H'
	ld	(de),a
	inc	de
	call	WRLST

	ld	a,(COMFLG)
	or	a
	jr	z,se4

	ld	de,LNBUF
	ld	hl,MSG7		; "Length of COMMONs: "
	call	STRCPY
	call	DMPCOM

se4:	ld	a,(LRQFLG)
	or	a
	jr	z,se5

	call	WRLST

	ld	hl,MSG9		; "Libraries requested:"
	call	STRCPY
	call	WRLST
	call	DMPLRQ

	call	WRLST

se5:	call	WRLST

	ld	hl,MSG4		; "Entry points:"
	call	STRCPY
	call	WRLST

	ld	a,1 SHL 3
	ld	(TYPE),a	; type 1: public symbols
	call	DMPTAB		; dump symbol table
	call	WRLST
	call	WRLST

	ld	hl,MSG5		; "External references:"
	call	STRCPY
	call	WRLST

	ld	a,2 SHL 3
	ld	(TYPE),a	; type 2: external symbols
	call	DMPTAB		; dump symbol table
	call	WRLST

	call	WRLST
	call	WRLST

S.EE:	ld	a,(WRFLAG)	; check write flag
	or	a		; no output?
	jr	z,S.EE1		; then jump
	ld	de,(MODPTR)	; DE = end
	ld	hl,(MODBFR)	; HL = start
S.EE2:	call	HL?DE
	jr	z,S.EE3
	ld	a,(hl)
	call	FPUTLB		; output byte
	dec	hl
	jr	S.EE2
S.EE3:	xor	a
	ld	(WRFLAG),a	; clear write flag
S.EE1:	ld	(COMFLG),a	; clear COMMON flag
	call	INITAB		; reset symbol table
	ret

MSG1:	db	'Module ',0
MSG10:	db	'Ident  ',0
MSG2:	db	'Code size:   ',0
MSG3:	db	'Data size:   ',0
MSG4:	db	'Entry points:',0
MSG5:	db	'External references:',0
MSG7:	db	'COMMON size: ',0
LEN7	equ	$-MSG7-1	; -1 is to ignore trailing null in length
MSG9:	db	'Requested libraries:',0

SEG.F:	pop	hl		; End of file, discard return addr
	call	CLSE.I		; close input file
	ld	a,(LMODE)
	or	a
	ret	z
	cp	1		; list only module names?
	jr	nz,sf1		; branch if not
	ld	de,(LNPTR)
	call	WRLST		; else output last line
	call	WRLST		; follow with an empty line
sf1:	ld	de,LNBUF
	ld	hl,MSG8		; "Total modules: "
	call	STRCPY
	ld	hl,(MODCNT)
	ex	de,hl
	xor	a
	call	CVTWD
	ex	de,hl
	call	WRLST
	ret

MSG8:	db	'Total modules: ',0

; Get field A of REL item

FLD.A:	ld	c,2		; get next 2 bits
	call	GNBITS
	rrca
	rrca			; into 2 upper bits
	ld	(TYPE),a
	ld	c,8		; get next 16 bits into HL
	call	GNBITS
	ld	l,a
	ld	c,8
	call	GNBITS
	ld	h,a
	ld	(ADDR),hl
	ret

; Get field B of REL item

FLD.B:	ld	hl,SNAME
	ld	b,8
	ld	a,' '
clrn:	ld	(hl),a
	inc	hl
	djnz	clrn
	ld	hl,SNAME
	ld	c,3		; get next 3 bits (name length)
	call	GNBITS
	ld	(SLEN),a	; store length (note: unfixed)
	call	FIXLEN		; length 0 means 8
	ld	b,a
fb1:	ld	c,8		; get next 8 bits (char)
	call	GNBITS
	ld	(hl),a		; store name
	inc	hl
	djnz	fb1
	ret

; Get next bit from input REL file

GETBIT:	ld	a,(BITCNT)
	cp	8
	jr	nz,gb1
	xor	a
	ld	(BITCNT),a
	call	FGETRB
	ld	(BYTE),a
	push	hl
	push	bc
	ld	c,a
	call	CHKMEM
	ld	a,c
	ld	hl,(MODPTR)
	ld	(hl),a
	dec	hl
	ld	(MODPTR),hl
	pop	bc
	pop	hl
gb1:	ld	a,(BITCNT)
	inc	a
	ld	(BITCNT),a
	ld	a,(BYTE)
	rlca
	ld	(BYTE),a
	and	1
	ret

; Get next N bits (up to 8) from REL file (N is in register C).
; Return the bits in A.

GNBITS:	push	bc
	ld	b,c
	xor	a
	ld	c,a
gn1:	rlc	c
	call	GETBIT
	or	c
	ld	c,a
	djnz	gn1
	pop	bc
	ret

; Skip N bits (N is in register C)

SNBITS:	call	GETBIT
	dec	c
	jr	nz,SNBITS
	ret

; Write current line to listing output

WRLST:	xor	a
	ld	(de),a		; end with a null char
	ld	de,LNBUF
	jp	FWRLST

; Compare HL and DE

HL?DE:	ld	a,h
	cp	d
	ret	nz
	ld	a,l
	cp	e
	ret

; Reset the symbol table

INITAB:	ld	hl,0
	ld	(LENC),hl
	ld	(LEND),hl
	ld	hl,(SYMTAB)
	ld	(TABPTR),hl
	ld	(hl),0FFh
	ld	hl,(MODBFR)
	ld	(MODPTR),hl
	ret

; Enter symbol into the symbol table

ADDSYM:	ld	a,(LMODE)	; check list mode
	or	a
	ret	z
	cp	1		; list only module names?
	jr	z,ad1
	cp	2		; list all?
	jr	z,ad2
	ret
ad1:	ld	a,(TYPE)	; get address type
	and	NOT(07h SHL 3)
	ret	nz
ad2:	call	CHKMEM		; ensure enough memory is available
	ld	hl,SLEN
	ld	c,(hl)		; get length into C
	ld	de,(TABPTR)	; get symbol table pointer
	ld	a,(TYPE)	; get address type
	or	c		; merge with length
	ld	(de),a		; store in table
	ld	a,c
	call	FIXLEN		; get effective length
	ld	c,a		;  into BC
	ld	b,0
	inc	hl		; point to name (SNAME)
	inc	de
	ldir			; store symbol name
	ld	hl,(ADDR)	; get value
	ex	de,hl
	ld	(hl),e		; store in table
	inc	hl
	ld	(hl),d
	inc	hl
	ld	(hl),0FFh	; set end marker
	ld	(TABPTR),hl
	ret

; Get next symbol of specified type in symbol table, starting from current
; position (SYMPTR).  Returns CY set if no more symbol were found.

GETSYM:	ld	hl,(SYMPTR)
	ld	ix,TYPE
fnd1:	ld	a,(hl)
	cp	0FFh
	scf
	ret	z
	ld	c,a
	and	07h SHL 3
	cp	(ix)
	ret	z
	ld	a,c
	and	07h
	call	FIXLEN
	add	a,3
	call	ADDHLA
	jr	fnd1

; Check for enough available memory

CHKMEM:	ld	hl,(TABPTR)
	ld	de,80h
	add	hl,de
	ex	de,hl
	ld	hl,(MODPTR)
	call	HL?DE
	ret	nc
	ld	hl,ERROVF
	jp	ERROR

ERROVF:	db	'Out of memory',0

; Dump all symbols of the specified type

DMPTAB:	ld	hl,(SYMTAB)
	ld	(SYMPTR),hl
	xor	a
	ld	(ICNT),a
dt1:	call	GETSYM
	ret	c
	ld	a,(ICNT)
	cp	4		; max 4 items per line
	jr	nz,dt2
	xor	a
	ld	(ICNT),a	; wrap to next line
	call	WRLST
dt2:	ld	a,(ICNT)
	inc	a
	ld	(ICNT),a
	ld	a,(hl)
	push	af		; remember segment type
	call	CPYN8
	ld	a,' '
	ld	(de),a
	inc	de
	push	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ex	de,hl
	call	CVTWH
	ex	de,hl
	pop	hl
	inc	hl
	inc	hl
	pop	af		; get segment type
	and	0C0h
	cp	40h		; CSEG
	ld	b,''''
	jr	z,dt4
	cp	80h		; DSEG
	ld	b,'"'
	jr	z,dt4
	cp	0C0h		; COMMON
	ld	b,'!'
	jr	z,dt4
dt3:	ld	b,' '		; ASEG
dt4:	ld	a,b
	ld	(de),a
	inc	de
	ld	b,4
	ld	a,' '
dt5:	ld	(de),a		; output separator
	inc	de
	djnz	dt5
	ld	(SYMPTR),hl
	jr	dt1

; Dump COMMON names

DMPCOM:	ld	hl,(SYMTAB)
	ld	(SYMPTR),hl
	xor	a
	ld	(ICNT),a
	ld	a,3 SHL 3
	ld	(TYPE),a
dc1:	call	GETSYM
	ret	c
	ld	a,(ICNT)
	or	a
	jr	z,dc5
	ld	de,LNBUF	; indent if not first time
	ld	b,LEN7
	ld	a,' '
dc6:	ld	(de),a
	inc	de
	djnz	dc6
dc5:	ld	a,(hl)
	inc	hl
	push	hl		; remember start of name
	and	07h
	call	FIXLEN
	push	af
	call	ADDHLA
	ld	a,(hl)		; get value (COMMON length)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ex	de,hl
	call	CVTWH		; output length
	ex	de,hl
	ld	a,'H'
	ld	(de),a
	inc	de
	ld	a,' '
	ld	(de),a
	inc	de
	ld	a,'/'
	ld	(de),a
	inc	de
	pop	af
	pop	hl
	ld	c,a
	ld	b,0
	ldir
	ld	a,'/'
	ld	(de),a
	inc	de
	call	WRLST		; output line
	inc	hl
	inc	hl
	ld	(SYMPTR),hl
	ld	a,1
	ld	(ICNT),a
	jr	dc1

; Dump names of requested libraries

DMPLRQ:	ld	hl,(SYMTAB)
	ld	(SYMPTR),hl
	xor	a
	ld	(ICNT),a
	ld	a,4 SHL 3
	ld	(TYPE),a
dl1:	call	GETSYM
	ret	c
	ld	a,(ICNT)
	cp	8		; max 8 items per line
	jr	nz,dl2
	xor	a
	ld	(ICNT),a	; wrap to next line
	call	WRLST
dl2:	ld	a,(ICNT)
	inc	a
	ld	(ICNT),a
	call	CPYN8
	ld	a,' '
	ld	(de),a		; output separator
	inc	de
	inc	hl
	inc	hl
	ld	(SYMPTR),hl
	jr	dl1

; Copy symbol name to output string

CPYNAM:	ld	a,(hl)
	and	07h
	call	FIXLEN
	inc	hl
	ld	c,a
	ld	b,0		; BC = length
	ldir
	ret

; Copy symbol name to output string, padding to 8 chars with spaces

CPYN8:	ld	a,(hl)
	and	07h
	call	FIXLEN
	inc	hl
	ld	c,a
	ld	b,0
	push	bc
	ldir
	pop	bc
	ld	a,8
	sub	c
	ret	z
	ld	b,a
	ld	a,' '
cp81:	ld	(de),a
	inc	de
	djnz	cp81
	ret

; Check if user-specified module name matches the one in symbol table

MATCH::	ld	hl,(MODN)
	ld	a,(hl)
	cp	0FEh		; null module list?
	jr	z,EQL		; default behavior is match
	cp	' '
	jr	z,EQL		; same for an empty name
	ld	hl,(SYMTAB)
	ld	(SYMPTR),hl
	xor	a
	ld	(TYPE),a	; type = module name
	call	GETSYM		; get current module name
	jr	c,NEQ		; branch if not found
	ld	a,(hl)
	and	07h
	call	FIXLEN
	ld	b,a		; get module name length into B
	inc	hl
	ld	de,(MODN)	; DE = start of user-specified module list
m6:	ld	a,(de)
	cp	0FEh		; end of list?
	jr	z,NEQ		; branch if yes, not found
	push	hl		; remember start of name
	push	bc		;  and its length
	ld	c,8		; user names are always padded to 8 chars
m3:	ld	a,(de)
	cp	'?'		; test for wildcard
	jr	z,m4
	cp	(hl)		; else compare chars
	jr	nz,m5		; no match, exit loop
m4:	inc	de		; else advance pointers
	inc	hl
	dec	c
	djnz	m3		; and loop
	inc	c
	dec	c
	jr	z,EQ0		; if end of user name we have a match
	ld	a,(de)
	cp	' '
	jr	nz,m5
EQ0:	pop	bc		; drop saved length
	pop	hl		;  and saved start of module name
EQL:	ld	a,(WRMODE)
	cp	2		; delete module?
	jr	z,NEQ1		; jump if yes, return 0FFh
EQL1:	xor	a		; else return 00h
	ret

NEQ:	ld	a,(WRMODE)
	cp	2		; delete module?
	jr	z,EQL1		; jump if yes, return 00h
NEQ1:	xor	a
	dec	a		; else return 0FFh
	ret

m5:	ld	b,c
m7:	inc	de		; skip to end of user name
	djnz	m7
	inc	de
	pop	bc		; restore saved length,
	pop	hl		;  start of module name
	jr	m6		;   and loop to try next name in list

; If A=0 then A=8

FIXLEN:	dec	a		; 0 means 8
	and	7
	inc	a
	ret

;-----------------------------------------------------------------------

	dseg

ICNT:	ds	1		; number of items per line
MODCNT:	ds	2		; number of modules processed

BYTE:	ds	1
BITCNT:	ds	1

LEND:	ds	2		; DSEG length
LENC:	ds	2		; CSEG length
COMFLG:	ds	1
LRQFLG:	ds	1

TYPE:	ds	1		; symbol type
SLEN:	ds	1		; name length  !    do not    !
SNAME:	ds	8		; symbol name  ! change order !
ADDR:	ds	2		; symbol value

SYMTAB:	ds	2		; begin of symbol table
TABPTR:	ds	2		; current end of symbol table
SYMPTR:	ds	2		; current symbol pointer

MODBFR:	ds	2		; module buffer
MODPTR:	ds	2

MEMBOT:	ds	2		; begin of heap
MEMTOP:	ds	2		; top of heap

$MEMRY:	ds	2		; pointer to begin of free memory

	ds	128
STACK	equ	$

	end	START
