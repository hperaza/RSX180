;**********************************************************************;
;                                                                      ;
;   This file is part of ZSM4, a Z80/Z180/Z280 relocatable macro-      ;
;   assembler written in Z80 assembly.                                 ;
;   Copyright (C) 2017-2021, Hector Peraza.                            ;
;                                                                      ;
;   This work is derived from Z80ASM, originally written by Michael    ;
;   G. Lehman (1977) and with modifications by Ray Halls (1992) and    ;
;   Neil Harrison (1983).                                              ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

 	TITLE	Z80/Z180/Z280 Macro-Assembler
	SUBTTL	System-dependent routines - CP/M version

;	Command syntax is similar to Microsoft's M80:
;
;	    ZSM [relfile],[prnfile]=srcfile[/option][/option...]
;
;       where option can be:
;
;	    /L		force generation of listing file
;	    /Sn		set max length of symbols in REL file (default = 6)
;	    /U		assume all Undefined symbols are External
;	    /M		initialize DEFS data areas to zero
;	    /Zn		set initial processor type to Z80, Z180 or Z280
;			(n=0, 1 or 2 respectively; defaults to 0 = Z80)
;	    /Dsym[=val]	define symbol and optionally assign a value to it
;
;	in addition, prnfile can be a device specification:
;
;	    TTY: or CON:  send listing output to console
;	    LST: or LPT:  send listing output to printer

	.Z80

	include	ZSM.INC

	public	UCASE,GNB,WNB,WNB2,CLINE,WLINE,REWIND,INCMEM
	public	CLSINP,CLOSE1,CLOSE2,OPNLIB,CLSLIB,INCLVL

	extrn	Z80ASM,HOFNAM,HOFDAT,HOFTIM,LFLAG,OFLAG,QFLAG
	extrn	ERRFLG,CMPHD,MAXMEM,SYMTBL,VALID,MALLOC,MFREE
	extrn	FNDREC,CNV2HX,NAMLEN,UMODE,ZERODS,DEFCPU,RADIX
	extrn	CMNPTR

BDOS	equ	5		; BDOS entry point
BOOT	equ	0		; warm boot
CPMFCB	equ	5Ch		; default CP/M FCB
CPMBUF	equ	80h

IBUFSZ	equ	512		; input buffer size
OBUFSZ	equ	256		; object buffer size
LBUFSZ	equ	512		; listing buffer size

	cseg

VSNMSG:	db	'Z80/Z180/Z280 Macro-Assembler V',VER1,'.',VER2
	db	0

	SUBTTL	Initializations and command loop
;
;	System-dependent initializations
;
START:	ld	sp,STACK	; setup local stack
	ld	hl,(BDOS+1)	; get top of memory
	ld	l,0		; trim to page boundary
	dec	hl
	ld	(MAXMEM),hl	; save max memory address
	ld	hl,($MEMRY)
	ld	(SYMTBL),hl	; save start of symbol table

	ld	hl,VSNMSG	; sign on message
	call	CLINE		; display on console

	ld	hl,CPMBUF
	ld	a,(hl)		; command tail present?
	ld	(MODE),a
	or	a
	jr	nz,S2		; branch if yes

S1:	call	CRLF
	ld	e,'*'
	ld	c,2
	call	ENTRY		; display prompt
	call	GETLN		; get command line

S2:	call	PROCESS		; parse and process the command

	ld	a,(MODE)
	or	a
	jr	z,S1		; loop if in interactive mode

	jp	BOOT		; else exit program
;
;	Parse the command line, open/create files and call the assembler
;
PROCESS:
	ld	hl,(SYMTBL)
	ld	(SYMPTR##),hl
	ld	(hl),0		; reset symbol table
	ld	hl,(MAXMEM)
	ld	(DSPTR##),hl
	ld	(hl),0		; reset dynamic memory storage

	ld	a,'Z'		; setup default options
	ld	(OFLAG),a	; no output file specified yet
	ld	(LFLAG),a	; no listing file either
	xor	a
	ld	(UMODE),a	; Undefined symbols do not default to External
	ld	(ZERODS),a	; no DS zeroing
	ld	(DEFCPU),a	; CPU is Z80
	ld	a,6
	ld	(NAMLEN),a	; REL symbol length = 6
	ld	hl,10
	ld	(RADIX),hl	; default radix = 10 (for /D option)
	ld	hl,0
	ld	(CMNPTR),hl	; clear COMMON pointer (for /D option)

	ld	hl,CPMBUF
	ld	e,(hl)
	ld	d,0
	inc	hl
	push	hl
	add	hl,de
	ld	(hl),0		; terminate command line with a null
	pop	hl
	call	SKIPB		; skip blanks
	or	a
	ret	z		; ignore empty command line

;	REL file

	ld	de,FCB2		; set up REL file FCB
	call	MKFCB
	jp	c,CMDERR
	call	GETOPT
	call	TSTFCB
	jp	c,CMDERR
	cp	'Z'
	jr	nz,PR1
	ld	a,'='		; special case of implicit REL
PR1:	ld	(OFLAG),a
	push	hl
	ld	hl,RELEXT
	call	ADDEXT		; set up extension
	pop	hl

;	PRN file

	call	SKIPB		; skip blanks
	cp	','
	jr	nz,PR3

	ld	a,(OFLAG)
	cp	'='
	jr	nz,PR2
	ld	a,'Z'		; explicit null REL
	ld	(OFLAG),a

PR2:	inc	hl		; skip delimiter
	call	SKIPB
	ld	de,FCB3		; set up PRN file FCB
	call	MKFCB
	jp	c,CMDERR
	call	GETOPT
	call	TSTFCB
	jp	c,CMDERR
	ld	(LFLAG),a
	push	hl
	ld	hl,PRNEXT
	call	ADDEXT		; set up extension
	pop	hl
	call	SKIPB

;	MAC file

PR3:	cp	'='
	jp	nz,CMDERR
	inc	hl
	call	SKIPB
	ld	de,FCB1		; set up source FCB
	call	MKFCB
	jp	c,CMDERR
	call	GETOPT
	call	TSTFCB
	jp	c,CMDERR
	cp	'Y'
	ld	hl,SM5
	jp	z,CLINE		; input device can't be LPT:
	ld	(IFLAG),a
	ld	hl,ASMEXT
	call	ADDEXT		; set up extension

	ld	a,(OFLAG)
	cp	'='
	jr	nz,PR5

	ld	hl,FCB1
	ld	de,FCB2		; setup implicit REL output file
	ld	bc,36
	ldir
	ld	hl,RELEXT
	ld	de,FCB2+9
	ld	bc,3
	ldir
	ld	a,'@'
	ld	(OFLAG),a

PR5:	ld	a,(LFLAG)
	cp	'='
	jr	nz,PR5A

	ld	hl,FCB1
	ld	de,FCB3
	ld	bc,36
	ldir
	ld	hl,PRNEXT
	ld	de,FCB3+9
	ld	bc,3
	ldir
	ld	a,'@'
	ld	(LFLAG),a

;	Header line message

PR5A:	ld	hl,FCB1+1
	ld	de,HOFNAM
	ld	bc,8
	ldir			; set file name

;	Date and time

	ld	c,12
	call	BDOS		; get system version
	dec	h
	ld	c,155
	jr	z,PR6		; branch if MP/M
	ld	a,l
	cp	30h
	jp	c,PR7		; skip if not CP/M 3
	ld	c,105
PR6:	ld	de,TOD
	call	BDOS
	ld	(SEC),a		; seconds are returned in A
	ld	hl,(DAYS)
	call	CVTDAT		; convert date

	ld	de,HOFDAT	; address to store date
	ld	hl,(DAY)
	ld	h,0
	call	BINBCD		; convert days to BCD
	ex	de,hl
	ld	a,e
	call	CNV2HX		; store BCD pair
	ld	a,(MONTH)
	add	a,a
	add	a,a		; *4
	ld	c,a
	ld	b,0
	ex	de,hl
	ld	hl,MLIST
	add	hl,bc
	ld	bc,5
	ldir
	ld	hl,(YEAR)
	call	BINBCD		; convert year to BCD
	ld	a,h
	add	a,19h
	daa			; add century
	ld	h,a
	ex	de,hl
	ld	a,d
	call	CNV2HX		; store BCD pair
	ld	a,e
	call	CNV2HX		; store BCD pair

	ld	hl,HOFTIM	; address to store time
	ld	a,(HRS)
	call	CNV2HX		; store BCD pair
	ld	(hl),':'
	inc	hl
	ld	a,(MIN)
	call	CNV2HX
	ld	(hl),':'
	inc	hl
	ld	a,(SEC)
	call	CNV2HX

;	Open/create files

PR7:	ld	a,(IFLAG)
	cp	'X'
	jr	z,PR71
	ld	de,FCB1
	call	OPNFIL		; open source file
	ld	hl,SM1		; source file not found
	jp	z,CLINE		; on error, msg and return

PR71:	ld	de,FCB3
	ld	a,(LFLAG)
	cp	'@'
	jr	nz,PR8
	call	CREFIL		; create listing file
	ld	hl,SM3		; can't create listing file
	jp	z,CLINE		; on error, msg and return

PR8:	ld	de,FCB2
	ld	a,(OFLAG)
	cp	'@'
	jr	nz,PR9
	call	CREFIL		; create object file
	ld	hl,SM2		; can't create object file
	jp	z,CLINE		; on error, msg and return

PR9:	ld	hl,0
	ld	(IBCNT),hl	; init char counters
	ld	(IBLEN),hl
	ld	(IOB2+BUFCNT),hl
	ld	(IOB3+BUFCNT),hl
	xor	a
	ld	(INCLVL),a
	ld	(QFLAG),a
	ld	(EFLAG),a
	call	Z80ASM		; assemble file
	ld	hl,ENDMSG	; sign off
	jp	CLINE		; msg and return

ENDMSG:	db	'Finished.',0

CMDERR:	ld	hl,SM4		; command syntax error
	jp	CLINE		; output message and return

SM1:	db	'Source file not found',0
SM2:	db	'Unable to create object file',0
SM3:	db	'Unable to create listing file',0
SM4:	db	'Command syntax error',0
SM5:	db	'Illegal input device',0

ASMEXT:	db	'MAC'
RELEXT:	db	'REL'
PRNEXT:	db	'PRN'

; Get next non-blank char from command line

SKP:	inc	hl
SKIPB:	ld	a,(hl)
	or	a
	ret	z
	cp	' '
	jr	z,SKP
	cp	TAB
	jr	z,SKP
	ret

; Test FCB and return code in reg A:
;  'Z' if FCB is empty
;  '@' if FCB specifies a valid disk file
;  'X' if console device
;  'Y' if printer device
; CY set on error (invalid device name)

TSTFCB:	inc	de
	ld	a,(de)
	dec	de
	cp	' '
	ld	a,'Z'
	ret	z		; empty FCB
	ld	a,(hl)
	cp	':'
	jr	z,T1
	ld	a,'@'		; disk file
	or	a
	ret
T1:	inc	hl
	push	hl
	call	TSTDEV
	pop	hl
	ret

TSTDEV:	ld	hl,DEVNAM
TEST1:	ld	a,(hl)
	or	a		; end of table?
	scf
	ret	z
	push	de
	inc	de
	ld	b,3
TEST2:	ld	a,(de)
	cp	(hl)
	jr	nz,TEST3
	inc	hl
	inc	de
	djnz	TEST2
	pop	de
	ld	a,(hl)
	add	a,40h
	ret			; note CY clear
TEST3:	inc	hl
	djnz	TEST3
	inc	hl
	pop	de
	jr	TEST1

DEVNAM:	db	'CON',18h
	db	'TTY',18h
	db	'LST',10h
	db	'LPT',10h
	db	0

; Get command line options, if present

GETOPT:	call	SKIPB		; skip blanks
	cp	'/'		; option switch?
	ret	nz		; return if not
	ld	bc,GETOPT
	push	bc
	inc	hl
	ld	a,(hl)		; else process it
	call	UCASE
	cp	'D'
	jr	z,DEFSYM
	cp	'S'
	jr	z,SETLEN
	cp	'L'
	jr	z,SETPRN
	cp	'U'
	jr	z,SETUFL
	cp	'M'
	jr	z,SETMFL
	cp	'Z'
	jr	z,SETCPU
OPTERR:	call	CMDERR
	pop	bc		; drop return address
	pop	bc		; return one level higher
	ret

SETLEN:	inc	hl
	ld	a,(hl)
	cp	'5'
	jr	c,OPTERR
	cp	'8'+1
	jr	nc,OPTERR
	sub	'0'
	ld	(NAMLEN),a	; set symbol length
	inc	hl
	ret

SETPRN:	inc	hl
	ld	a,(LFLAG)
	cp	'Z'
	ret	nz
	ld	a,'='
	ld	(LFLAG),a	; set listing flag, using name of input file
	ret

SETUFL:	inc	hl
	ld	a,1
	ld	(UMODE),a	; Undefined symbols are External
	ret

SETMFL:	inc	hl
	ld	a,1
	ld	(ZERODS),a	; initialize DS to all zeros
	ret

SETCPU:	inc	hl
	ld	a,(hl)
	sub	'0'
	jr	c,OPTERR
	cp	2+1
	jr	nc,OPTERR
	ld	(DEFCPU),a	; set CPU type
	inc	hl
	ret

DEFSYM:	inc	hl
	ld	(PTR1##),hl
	call	ID##
	ld	a,(IDLEN##)
	or	a
	jp	z,OPTERR	; symbol name required
	ld	hl,(PTR1)
	call	SKIPB
	cp	'='
	ld	bc,0		; if no value specified, assume 0
	jr	nz,DEF1
	inc	hl
	ld	(PTR1),hl
	push	de
	call	INT##		; convert value
	pop	de
	ld	bc,(INTBUF##)
DEF1:	ld	(VAL##),bc
	ld	a,GBLSYM	; /D symbol is Global
	ld	(SYMMOD##),a
	push	de
	call	ADDSYM##	; enter symbol
	pop	de
;	jp	c,...		; error - can't enter symbol (unlikely)
;	jp	z,...		; error - multiple defined (ignore/redefine)
	ld	hl,(IDADR##)
	ld	a,(hl)
	and	0Fh
	add	a,EQUNAME
	ld	(hl),a		; treat like EQU
	ld	hl,(PTR1)
	ret

; Convert binary number in HL to BCD number in AHL.

BINBCD:	push	bc
	push	de
	ld	e,16+1
	call	BD1
	ld	c,a
	ld	e,16+1
	call	BD1
	ld	h,a
	ld	a,l
	ld	l,c
	pop	de
	pop	bc
	ret

BD1:	xor	a
BD2:	dec	e
	ret	z
	add	hl,hl
	adc	a,a
	daa
	jr	nc,BD2
	inc	hl
	jr	BD2

; Convert BDOS date (num of days) to day-month-year
; HL = number of days (1 = Jan 1, 1978)

CVTDAT:	call	CYEAR
	ld	(YEAR),bc

	; year has been set, HL has remaining days

	ld	e,0		; leap$bias
	ld	a,c
	and	3
	jr	nz,CVD1		; year & 3 == 0 ?
	ld	a,l
	sub	59+1		; and remaining days > 59 ?
	ld	a,h
	sbc	a,0
	jr	c,CVD1

	; after feb 29 on leap year

	inc	e		; then leap$bias = 1
CVD1:	ld	c,e
	call	CMONTH
	ld	a,e
	ld	(MONTH),a

	; day = remaining_days - (month_days[month] + leap_bias);

	push	hl
	ld	hl,MDAYS
	add	hl,de
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a		; HL = month_days[month]
	ld	b,0
	add	hl,bc		;    + leap_bias
	ex	de,hl
	pop	hl
	or	a
	sbc	hl,de		; day = remaining_days - HL
	ld	a,l
	ld	(DAY),a
	ret

; Compute year from number of days in HL, returns year in BC

CYEAR:	ld	bc,78		; year = 78 (base year)
CY1:	ld	de,365		; year length
	ld	a,c
	and	3		; leap year?
	jr	nz,CY2
	inc	de		; year length = 366
CY2:	push	hl
	inc	de
	sbc	hl,de		; remaining days - year length (note CY was clear)
	jr	c,CY3		; return if <= 0
	pop	af
	inc	hl
	inc	bc		; ++year
	jr	CY1
CY3:	pop	hl
	ret

; Compute month from remaining days in HL, C = leap bias.
; Returns month in DE, C = leap bias

CMONTH:	ld	de,11		; E = month, D = 0
	push	hl
	ld	b,d		; B = 0
CM1:	ld	a,e
	cp	2		; jan or feb?
	jr	nc,CM2
	ld	c,b		; if yes, leap bias = 0
CM2:	ld	hl,MDAYS
	add	hl,de
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a		; HL = month$days[month]
	add	hl,bc		;    + leap bias
	ex	de,hl
	ex	(sp),hl		; HL = rem days
	ld	a,e
	sub	l
	ld	a,d
	sbc	a,h
	ex	(sp),hl
	ex	de,hl
	jr	c,CM3
	dec	e
	jr	nz,cm1
CM3:	pop	hl
	ret

MDAYS:	;	jan feb mar apr may jun jul aug sep oct nov dec
	dw	  0, 31, 59, 90,120,151,181,212,243,273,304,334

MLIST:	db	'-Jan-Feb-Mar-Apr-May-Jun-Jul-Aug-Sep-Oct-Nov-Dec-'

	SUBTTL	Console, Printer and File I/O

;	ENTRY - Used to call BDOS - Saves and restores registers

ENTRY:	push	bc
	push	de
	push	hl
	push	ix
	call	BDOS
	pop	ix
	pop	hl
	pop	de
	pop	bc
	ret

;	WLINE - Write line to list device and append newline
;	HL -> buffer, term = null

WLINE:	ld	a,(hl)
	or	a
	jr	z,WCRLF
	ld	e,a
	ld	c,5
	call	ENTRY
	inc	hl
	jr	WLINE
WCRLF:	ld	e,CR
	ld	c,5
	call	ENTRY
	ld	e,LF
	ld	c,5
	jp	ENTRY

;	CLINE - Write line to console and append newline
;	HL -> buffer, term = null

CLINE:	ld	a,(hl)
	or	a
	jr	z,CRLF
	ld	e,a
	ld	c,2
	call	ENTRY
	inc	hl
	jr	CLINE
CRLF:	ld	e,CR
	ld	c,2
	call	ENTRY
	ld	e,LF
	ld	c,2
	jp	ENTRY

;	OPNFIL - Open file
;	DE -> FCB
;	Z=0 success, Z=1 failure

OPNFIL:	ld	c,15
	call	ENTRY
	inc	a		; test for 255
	ret

;	CLSFIL - Close file
;	DE -> FCB
;	Z=0 success, Z=1 error

CLSFIL:	ld	c,16
	call	ENTRY
	inc	a
	ret

;	DREAD - Read disk sector
;	DE -> FCB
;	Z=0 error or EOF, Z=1 normal

DREAD:	ld	c,33		; note: read random record
	call	ENTRY
	or	a
	ret

;	DWRITE - Write disk sector
;	DE -> FCB
;	Z=0 error, Z=1 normal

DWRITE:	ld	c,21
	call	ENTRY
	or	a
	ret

;	CREFIL - Create file
;	Reel # assummed to be set
;	DE -> FCB
;	Z=0 normal, Z=1 error

CREFIL:	push	de
	ld	c,19		; delete file
	call	ENTRY
	pop	de
	ld	c,22
	call	ENTRY
	inc	a
	ret

;	DMASET - Set DMA address
;	Buffer address in DE

DMASET:	ld	c,26
	jp	ENTRY

;	Convert character in A to uppercase

UCASE:	cp	'a'
	ret	c
	cp	'z'+1
	ret	nc
	and	5Fh
	ret

;	GNB - Get next byte (FCB1)

GNB:	push	hl
	push	de
	ld	hl,(IBLEN)
	ld	de,(IBCNT)
	call	CMPHD		; see if end of buffer
	call	z,REFILL	; refill buffer if necessary
	ld	hl,INBUF
	add	hl,de
	ld	a,(hl)		; get byte
	and	7Fh		; strip parity bit
	inc	de
	ld	(IBCNT),de
	pop	de	
	pop	hl
	ret

;	REFILL - (Re)fill input buffer

REFILL:	push	bc
	ld	a,(IFLAG)
	cp	'X'
	jr	z,RE4
	ld	hl,(FCB1+33)
	ld	(IRECNO),hl
	ld	de,INBUF	; set up pointer for DMASET
	ld	hl,IBUFSZ	; input buffer size
RE1:	push	hl
	push	de
	call	DMASET		; set up DMA address
	ld	de,FCB1
	call	DREAD		; go read a sector
	ld	hl,(FCB1+33)
	inc	hl
	ld	(FCB1+33),hl	; point to next record
	pop	de
	pop	hl
	jr	z,RE2
	ld	a,EOF
	ld	(de),a
	jr	RE3
RE2:	ex	de,hl
	ld	bc,128
	add	hl,bc
	ex	de,hl		; update pointer
	or	a
	sbc	hl,bc
	ld	a,h
	or	l
	jr	nz,RE1		; branch back if more to do
RE3:	ex	de,hl
	ld	hl,IBUFSZ
	or	a
	sbc	hl,de
	ld	(IBLEN),hl
RE6:	ld	de,0
	ld	(IBCNT),de	; set up next data pointer
	pop	bc		; note: returns DE = 0
	ret

RE4:	call	GETLN
	ld	hl,CPMBUF
	ld	de,INBUF
	ld	c,(hl)
	ld	b,0
	push	bc
	inc	hl
	ld	a,b
	or	c
	jr	z,RE5
	ldir
RE5:	ex	de,hl
	ld	(hl),CR
	inc	hl
	ld	(hl),LF
	inc	hl
	ld	(hl),0
	pop	bc
	inc	bc
	inc	bc
	ld	(IBLEN),bc
	jr	RE6

GETLN:	ld	hl,CPMBUF-1
	ld	(hl),126
	ex	de,hl
	ld	c,10
	call	ENTRY		; get command line
	jp	CRLF


;	REWIND - Rewind input file

REWIND:	ld	a,(INCLVL)
	or	a
	jr	z,REW1
	call	CLSLIB		; close any open INCLUDE files
	jr	REWIND
REW1:	ld	hl,0
	ld	(FCB1+33),hl	; reset r0,r1
	ld	hl,0
	ld	(IBCNT),hl	; reset char pointer
	ld	(IBLEN),hl
	ret

;	CLSINP - Close input file

CLSINP:	ld	a,(IFLAG)
	sub	'X'
	ret	z
	ld	de,FCB1
	jp	CLSFIL		; !!!TODO: close include files?
				; (are there any still open?)

;	WNB - Write next byte (PRN)
;	Byte in A reg

WNB:	ld	iy,EFLAG
	bit	2,(iy)
	scf
	ret	nz
	push	ix
	and	7Fh		; strip parity bit
	ld	ix,IOB3
	call	FWRITE
	pop	ix
	ret	nc
	set	2,(iy)
	ret

;	WNB2 - Write next byte (REL)

WNB2:	ld	iy,EFLAG
	bit	1,(iy)
	scf
	ret	nz
	push	ix
	ld	ix,IOB2
	call	FWRITE
	pop	ix
	ret	nc
	set	1,(iy)
	ret

;	FWRITE - Write byte to file
;	Byte in reg A
;	I/O block address in reg IX

FWRITE:	push	hl
	push	de
	push	bc
	ld	e,(ix+BUFCNT)
	ld	d,(ix+BUFCNT+1)
	ld	l,(ix+BUFADR)
	ld	h,(ix+BUFADR+1)
	push	hl
	add	hl,de
	ld	(hl),a		; store byte
	inc	de
	ld	l,(ix+BUFSZ)
	ld	h,(ix+BUFSZ+1)
	call	CMPHD		; at end of buffer?
	pop	bc
	jr	nz,WNB1		; branch if not
	ld	e,c		; buffer address in DE, size in HL
	ld	d,b
WNB0:	push	de
	call	DMASET
	ld	e,(ix+FCBADR)
	ld	d,(ix+FCBADR+1)
	call	DWRITE
	pop	de
	jr	nz,WRERR	; on error, print message and return
	ld	bc,128
	ex	de,hl
	add	hl,bc
	ex	de,hl
	or	a
	sbc	hl,bc
	ld	a,h
	or	l
	jr	nz,WNB0
	ld	de,0
WNB1:	ld	(ix+BUFCNT),e
	ld	(ix+BUFCNT+1),d
	pop	bc
	pop	de
	pop	hl
	or	a
	ret

WRERR:	ld	hl,SM6		; file write error
	call	CLINE		; msg and return
	pop	bc
	pop	de
	pop	hl
	scf
	ret

SM6:	db	'Output file write error',0

;	CLOSE1 - Close PRN file

CLOSE1:	push	ix
	ld	ix,IOB3
	call	CLOSE
	pop	ix
	ret

;	CLOSE2 - Close REL file

CLOSE2:	push	ix
	ld	ix,IOB2
	call	CLOSE
	pop	ix
	ret

CLOSE:	ld	a,(ix+BUFCNT)
	or	(ix+BUFCNT+1)
	jr	z,CLS1
	ld	a,EOF
	call	FWRITE
	jr	CLOSE
CLS1:	ld	e,(ix+FCBADR)
	ld	d,(ix+FCBADR+1)
	jp	CLSFIL

;	OPNLIB - Open MACLIB or INCLUDE file
;	HL points to file name
;
;	Input file structure as saved in high memory:
;
;	db	STINPF		; type = include/input file state
;	dw	len		; total length of the following fields:
;	db	iflag		;  input device code
;	dw	recno		;  current record number
;	dw	ci		;  current char index
;	ds	36		;  current FCB

OPNLIB:	ld	a,(INCLVL)
	cp	5		; check nested include level
	jp	nc,FNERR1	; error if above maximum

	push	hl
	ld	bc,1+2+2+36	; iflag + recno + char index + FCB
	ld	e,STINPF	; type = file
	call	MALLOC		; allocate block
	pop	de
	ret	c		; on error, return

	push	hl		; save block address
	push	de		; save pointer to file name
	ld	a,(IFLAG)
	ld	(hl),a		; store input device code
	inc	hl
	ld	bc,(IRECNO)
	ld	(hl),c		; store starting record number
	inc	hl
	ld	(hl),b
	inc	hl
	ld	bc,(IBCNT)
	ld	(hl),c		; store char index
	inc	hl
	ld	(hl),b
	inc	hl

	ex	de,hl		; DE = addr to store FCB
	ld	hl,FCB1
	ld	bc,36
	ldir			; store FCB
	pop	hl		; restore ptr to filename
	ld	de,FCB1		; FCB address in DE
	call	MKFCB		; make FCB
	jp	c,FNERR		; bad file name

	push	hl
	ld	hl,ASMEXT	; default include extension is .MAC
	call	ADDEXT
	pop	hl
	call	OPNFIL
	jr	z,FNERR		; file not found

	ex	(sp),hl		; drop block address
	ld	hl,0
	ld	(IBCNT),hl	; init pointers
	ld	(IBLEN),hl
	ld	a,'@'
	ld	(IFLAG),a
	ld	hl,INCLVL
	inc	(hl)
	pop	hl		; restore record pointer
	or	a
	ret

FNERR:	ex	(sp),hl		; restore block address, save record pointer
	push	hl
	ld	de,1+2+2
	add	hl,de
	ld	de,FCB1
	ld	bc,36
	ldir			; restore old FCB
	pop	hl
	dec	hl
	dec	hl
	dec	hl
	call	MFREE		; free allocated block
	pop	hl		; restore record pointer
FNERR1:	ld	a,'V'
	ld	(ERRFLG),a	; set error flag
	scf
	ret

;	MKFCB - Create FCB from string
;	HL points to string
;	DE points to FCB

MKFCB:	call	CLRFCB
	ld	a,(hl)
	or	a
	scf
	ret	z
	push	de
	call	UCASE
	sub	'A'-1
	ld	b,a		; may be disk name
	inc	hl
	ld	a,(hl)
	cp	':'
	jr	z,MF3
	dec	hl
	jr	MF4
MF3:	ld	a,b
	ld	(de),a		; store disk name
	inc	hl
MF4:	inc	de
	ld	b,8
	call	GETNAM
	ld	a,(hl)
	cp	'.'
	jr	nz,MF5
	inc	hl
MF5:	ld	b,3
	call	GETNAM
	pop	de
	xor	a
	ret
	
CLRFCB:	push	de
	ld	b,36
	xor	a
CLRF1:	ld	(de),a
	inc	de
	djnz	CLRF1
	pop	de
	ret

GETNAM:	ld	a,(hl)
	call	UCASE
	call	VALID
	jr	c,SFILL
	cp	'.'
	jr	z,SFILL
	ld	(de),a
	inc	hl
	inc	de
	djnz	GETNAM
SKIP:	ld	a,(hl)
	call	UCASE
	call	VALID
	ret	c
	cp	'.'
	ret	z
	jr	SKIP
SFILL:	ld	a,' '
SF:	ld	(de),a
	inc	de
	djnz	SF
	ret

ADDEXT:	push	de
	ex	de,hl
	ld	bc,8+1
	add	hl,bc
	ld	a,(hl)
	cp	' '		; extension present?
	jr	nz,ADDE1	; return if not
	ex	de,hl
	ld	bc,3
	ldir			; else set it
ADDE1:	pop	de
	ret

;	CLSLIB - Close current MACLIB or INCLUDE file

CLSLIB:	ld	a,(INCLVL)
	or	a
	ret	z		; nothing to do, no INCLUDEs active
	dec	a
	ld	(INCLVL),a

	ld	de,FCB1
	call	CLSFIL		; close file

	ld	c,STINPF
	call	FNDREC		; get previous file record
;	jp	c,...		; should not happen

	push	hl		; save start of file record
	inc	hl
	inc	hl
	inc	hl

	ld	a,(hl)		; get input device code
	ld	(IFLAG),a
	inc	hl

	ld	e,(hl)		; get starting record number
	inc	hl
	ld	d,(hl)
	inc	hl
	push	de

	ld	e,(hl)		; get char index
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	(IBLEN),de	; in case we were reading from terminal
	push	de

	ld	de,FCB1
	ld	bc,36
	ldir			; restore FCB

	pop	hl		; get char index into HL
	pop	de		; and starting record number in DE
	cp	'X'		; IFLAG still in A
	jr	z,ICLS2

	ld	bc,-128
ICLS1:	add	hl,bc		; reduce starting record number
	inc	de
	jr	c,ICLS1
	dec	de
	ld	(FCB1+33),de
	ld	bc,128
	add	hl,bc
	push	hl
	call	REFILL		; refill input buffer
	pop	hl
ICLS2:	ld	(IBCNT),hl	; set input char pointer

	pop	hl		; pop start of record
	call	MFREE		; release storage

	or	0FFh		; NZ
	ret

;	INCMEM - No memory increase function in CP/M (already using
;	         all available memory)

INCMEM:	scf
	ret

	dseg

; I/O block offset definitions

BUFCNT	equ	0		; buffer index (2 bytes)
BUFSZ	equ	BUFCNT+2	; buffer size (2 bytes)
FCBADR	equ	BUFSZ+2		; file control block address (2 bytes)
BUFADR	equ	FCBADR+2	; buffer address (2 bytes)
IOBSZ	equ	BUFADR+2	; I/O block size

IOB2:	ds	2		; buffer char counter
	dw	OBUFSZ		; buffer size
	dw	FCB2		; FCB address (REL)
	dw	BUF2		; buffer address

IOB3:	ds	2		; buffer char counter
	dw	OBUFSZ		; buffer size
	dw	FCB3		; FCB address (PRN)
	dw	BUF3		; buffer address

IFLAG:	ds	1		; input device code
FCB1:	ds	36		; file control block (source)
INBUF:	ds	IBUFSZ		; .MAC input buffer
IBCNT:	ds	2		; index of next char in input buffer
IBLEN:	ds	2		; number of valid bytes in input buffer
IRECNO:	ds	2		; starting record number of input buffer

FCB2:	ds	36		; file control block (REL)
BUF2:	ds	OBUFSZ		; .REL output buffer

FCB3:	ds	36		; file control block (PRN)
BUF3:	ds	OBUFSZ		; .PRN output buffer

INCLVL:	ds	1		; nested INCLUDE level

MODE:	ds	1		; 0=interactive command mode
EFLAG:	ds	1		; I/O error output flag

TOD	equ	$
DAYS:	ds	2		; days (1 = 1-Jan-1978)
HRS:	ds	1		; hours (packed BCD)
MIN:	ds	1		; minutes (packed BCD)
SEC:	ds	1		; seconds (packed BCD)
MONTH:	ds	1
DAY:	ds	1
YEAR:	ds	2

	ds	128
STACK	equ	$		; Z80 stack

	public	$MEMRY

$MEMRY:	ds	2

	end	START
