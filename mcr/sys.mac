;**********************************************************************;
;                                                                      ;
;   MCR-like command line interpreter for RSX180 - external commands.  ;
;   Copyright (C) 2014-2023, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

	.Z80

	cseg

	ident	'02.27'

	include	SYSTEM.INC
	include	SYSFN.INC
	include	PCB.INC
	include	TCB.INC
	include	THDR.INC
	include	FCB.INC
	include	DCB.INC
	include	LCB.INC
	include	AST.INC
	include	QIO.INC
	include	CLKQ.INC
	include	BDRATES.INC
	include	ERRORS.INC

CR	equ	0Dh
LF	equ	0Ah
TAB	equ	09h
ESC	equ	1Bh

EFN	equ	1

	public	GETNS,GETFS,GETCMD,FNDCMD,CHKEQ,CHKTI,GETDEV,STRLEN
	public	CMDERR,SYSERR,ERRMCR,GETDEC,CHKPRV,PDNAME,PRINTN
	public	PNAM,PNAM9,FNDEV,FNDLGN,ERFAIL,GETFN,GETUN,GETN
	public	CHKT3,PADBL

	public	LNPTR,CMDNAM,FNAME,OPTSW,SWVAL,DEVCW,TTDEV,LCBBUF
	public	TMPDEV,TMPDV2,DEVST

	extrn	PFN,PDN,PERROR,CRLF,UCASE,BCD2BIN,BIN2BCD,CPHLDE
	extrn	ADEC,ADEC2,HLDEC,LDEC,AHEX,HLHEX,GCCL,CMLBUF,PUTCH
	extrn	ATTACH,DETACH,PUTSTR,TTFLSH,TTLUN,NHEX
	extrn	QIOBLK,QIOSB

	extrn	CMDSET			; SYSOV1
	extrn	CMDATL,CMDTAL,CMDTAS	; SYSOV2
	extrn	CMDASN,CMDRED,CMDDEV	; SYSOV3

KCALL	MACRO	addr
	call	$SWSTK
	dw	addr
	ENDM

;-----------------------------------------------------------------------

START:	ld	sp,stack

	ld	de,'TI'
	ld	c,0
	call	FNDEV		; get the terminal name
	ld	(TTDEV),de
	ld	a,c
	ld	(TTDEV+2),a

	ld	a,(TTLUN)
	ld	b,a
	SC	.ALUN		; assign LUN 5 to console

	ld	hl,tcksec
	ld	c,I.TCKS
	SC	.GIN		; get ticks/sec

	call	GCCL		; get MCR command line
	call	STPEOL		; strip EOL
	call	PARSE		; parse and execute it

	ld	hl,EX.SUC	; exit normally
	jr	nc,ex1
	ld	hl,EX.SEV	; or with error
ex1:	push	hl
	call	TTFLSH
	pop	hl
	SC	.EXIT

; Strip EOL from command line.

STPEOL:	push	hl
	call	STRLEN
	ld	a,c
	or	a
	jr	z,stpe1
	dec	hl
	ld	a,(hl)
	call	iseol
	jr	nz,stpe1
	ld	(cmdtrm),a
	ld	(hl),0
stpe1:	pop	hl
	ret

; Return Z if char in A is EOL.

iseol:	or	a
	ret	z
	cp	CR
	ret	z
	cp	LF
	ret	z
	cp	ESC
	ret	z
	cp	1Ah
	ret

;-----------------------------------------------------------------------

; Print error message in the form 'MCR -- message'

CMDERR:	ld	hl,snerr
ERRMCR:	push	hl
	ld	hl,eprfx
	call	PUTSTR
	pop	hl
	call	PUTSTR
	ld	c,CR
	call	PUTCH
	scf
	ret

SYSERR:	push	af
	ld	hl,eprfx
	call	PUTSTR
	pop	af
	call	PERROR
	ld	c,CR
	call	PUTCH
	scf
	ret

eprfx:	db	CR,LF,'SYS -- ',0
snerr:	db	'Syntax error',0
illfn:	db	'Illegal function',0

ERFAIL:	ld	hl,opfail
	jp	ERRMCR

opfail:	db	'Operation failed',0

;-----------------------------------------------------------------------

; Parse the command line and execute the command.

PARSE:	ex	de,hl
	call	skpnam		; skip MCR name
	ex	de,hl
	ld	(LNPTR),hl
	call	GETCMD		; get command name
	ld	hl,cmdtab
	call	FNDCMD
	or	a
	ret	z
	cp	0FFh
	jr	z,CMDERR
	dec	a
	rlca
	ld	e,a
	ld	d,0
	ld	hl,jmptab
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	jp	(hl)

cmdtab:	db	'ACT',0
	db	'ATL',0
	db	'ALT',0
	db	'ASN',0
	db	'CLQ',0
	db	'DEV',0
	db	'LUN',0
	db	'PAR',0
	db	'REA',0
	db	'RED',0
	db	'RUN',0
	db	'SET',0
	db	'TAL',0
	db	'TAS',0
	db	'TIM',0
	db	0

jmptab:	dw	cmdact,CMDATL,altpri,CMDASN,cmdclq,CMDDEV,cmdlun
	dw	cmdpar,cmdrea,CMDRED,cmdrun,CMDSET,CMDTAL,CMDTAS
	dw	cmdtim

;-----------------------------------------------------------------------

; Copy string (HL) <- (DE)

cpstr:	ld	a,(de)
	or	a
	ret	z
	ld	(hl),a
	inc	hl
	inc	de
	jr	cpstr

; Get command name (9 chars max) from input line into CMDNAM.

GETCMD:	ld	b,9
	ld	de,(LNPTR)
	ld	hl,CMDNAM
	call	GETNS
gcm1:	call	getfs1
	jr	z,gcm3
	call	UCASE
	ld	(hl),a
	inc	hl
	inc	de
	djnz	gcm1
gcm2:	call	getfs1
	jr	z,gcm3
	inc	de
	jr	gcm2
gcm3:	ld	(hl),0
	ld	(LNPTR),de
	ret

; Get name (B chars max) from input line into CMDNAM.

GETN:	ld	de,(LNPTR)
	ld	hl,CMDNAM
	call	GETNS
	call	getnam
	ld	(LNPTR),de
	ret

; Get filename from input into FNAME buffer.

GETFN:	ld	de,(LNPTR)
	ld	hl,FNAME
	ld	b,FNSZ-1
	call	GETNS
	call	getnam
	ld	(LNPTR),de
	ret

; Get task name (6 chars max) into CMDNAM, padding with blanks if neccessary.
; If the task name is empty, return a name of type TTnn.

GETTN:	ld	b,6
	call	GETN
	call	PADBL
	ld	hl,CMDNAM
	ld	a,(hl)
	cp	' '		; empty task name?
	ret	nz		; return if not
	ld	hl,TTDEV
	ld	de,CMDNAM
	ld	bc,2
	ldir			; copy first two letters of device name
	ld	a,(hl)
	call	BIN2BCD		; convert unit number to two BCD digits
	ld	c,a
	rrca
	rrca
	rrca
	rrca
	and	0Fh
	jr	z,skip0		; skip first digit if zero
	add	a,'0'		; else convert to ASCII
	ld	(de),a		; and store it
	inc	de
skip0:	ld	a,c
	and	0Fh
	add	a,'0'		; convert to ASCII
	ld	(de),a		; the rest is already filled with with spaces
	ld	hl,CMDNAM	; return with HL = task name
	ret

; Get user name (9 chars) into CMDNAM, padding with blanks if neccessary.

GETUN:	call	GETCMD
PADBL:	inc	b
	dec	b
	ret	z
sfill:	ld	(hl),' '
	inc	hl
	djnz	sfill
	ret

; Get a name (up to B bytes in length) into HL buffer.

getnam:	call	GETFS		; get char
	jr	z,gn3		; exit loop if delimiter
	call	UCASE
	ld	(hl),a
	inc	hl
	inc	de
	djnz	getnam
gn2:	call	GETFS		; skip any extra chars
	jr	z,gn3
	inc	de
	jr	gn2
gn3:	ld	(hl),0
	ret

; Return Z if char in A is blank.

isblnk:	or	a
	ret	z
	cp	' '
	ret	z
	cp	TAB
	ret

; Get next non-blank char.

GETNS:	ld	a,(de)
	or	a
	ret	z
	call	isblnk
	ret	nz
	inc	de
	jr	GETNS

; Skip name

skpnam:	ld	a,(de)
	or	a
	ret	z
	call	isblnk
	jr	z,GETNS		; return via GETNS
	inc	de
	jr	skpnam

; Get next char. Returns Z on end of line or if char is a delimiter.

GETFS:	ld	a,(de)
	or	a
	ret	z
	cp	' '
	jr	c,gf1
	ret	z
	cp	'='
	ret	z
	cp	','
	ret	z
	cp	'/'
	ret
gf1:	xor	a
	ret

getfs1:	call	GETFS
	ret	z
	cp	':'
	ret	z
	cp	'-'
	ret

; Read a decimal number from input line into HL
; Returns CY if the number contains invalid chars or if overflow happens.

GETDEC:	ld	de,(LNPTR)
	call	GETNS
	ld	hl,0
newdig:	call	getfs1		; note getfs1
	jr	z,endnum	; note no CY
	sub	'0'
	jr	c,endnum	; note CY
	cp	10
	ccf
	jr	c,endnum	; note CY
	call	adddig		; note CY on overflow
	inc	de
	jr	nc,newdig
endnum:	ld	(LNPTR),de
	ret

adddig:	ld	c,l
	ld	b,h
	add	hl,hl
	ret	c
	add	hl,hl
	ret	c
	add	hl,bc
	ret	c
	add	hl,hl
	ret	c
	ld	c,a
	ld	b,0
	add	hl,bc
	ret

; Read a binary-coded decimal number from input line into HL
; Returns CY if the number contains invalid chars or if overflow happens.

GETBCD:	ld	de,(LNPTR)
	call	GETNS
	ld	hl,0
newbcd:	call	getfs1		; note getfs1
	jr	z,endbcd	; note no CY
	sub	'0'
	jr	c,endbcd	; note CY
	cp	10
	ccf
	jr	c,endbcd	; note CY
	call	addbcd		; note CY on overflow
	inc	de
	jr	nc,newbcd
endbcd:	ld	(LNPTR),de
	ret

addbcd:	add	hl,hl
	ret	c
	add	hl,hl
	ret	c
	add	hl,hl
	ret	c
	add	hl,hl
	ret	c
	ld	c,a
	ld	b,0
	add	hl,bc
	ret

; Search for the command (CMDNAM) in the command table (HL = cmdtab).
; Returns A=0FFh if not found, or 0 if CMDNAM contains an empty string.
; Otherwise returns the command position in the table (1-based).

FNDCMD:	ld	de,CMDNAM
	ld	a,(de)
	or	a
	ret	z
	ld	c,0		; keyword index
fcmd0:	ld	de,CMDNAM
	inc	c
fcmd1:	ld	a,(hl)
	call	UCASE
	ld	b,a
	ld	a,(de)
	cp	b		; match?
	jp	nz,fcmd2	; jump if not
	or	a		; end of both strings?
	ld	a,c
	ret	z		; return if yes, we have a match
	inc	hl
	inc	de
	jr	fcmd1		; else keep comparing
fcmd2:	ld	a,(hl)
	or	a		; end of keyword?
	ld	a,c
	ret	z		; return if yes, we have a match
fcmd4:	inc	hl		; else skip to end of keyword
	ld	a,(hl)
	or	a
	jr	nz,fcmd4
	inc	hl		; skip over null
	ld	a,(hl)
	or	a		; end of table?
	jr	nz,fcmd0	; try again if not
	ld	a,0FFh		; else return 'not found' flag
	ret

; Return Z if task name in CMDNAM is 3 chars or less.

CHKT3:	ld	de,CMDNAM+3
	ld	b,3
ck3:	ld	a,(de)
	cp	' '
	ret	nz
	inc	de
	djnz	ck3
	ret

;-----------------------------------------------------------------------

; ACT [/ALL][/TERM=ttn:] - show active tasks

cmdact:	xor	a
	ld	(OPTSW),a	; default action is to show tasks
	ld	hl,(TTDEV)	;  active at current terminal
	ld	(TMPDEV),hl
	ld	a,(TTDEV+2)
	ld	(TMPDEV+2),a
actopt:	ld	de,(LNPTR)
	call	GETNS		; see if user supplied an argument
	or	a
	jr	z,act0		; jump if not
	cp	'/'		; else it must be a switch
	jp	nz,CMDERR
	inc	de
	ld	(LNPTR),de
	call	GETCMD
	ld	hl,actswt
	call	FNDCMD		; search for switch name in table
	or	a
	jp	z,CMDERR
	cp	0FFh
	jp	z,CMDERR
	ld	c,a
	dec	c		; ALL?
	jr	z,actall
	call	CHKEQ		; '=' required for TERM
	jp	nz,CMDERR
	dec	c
	jr	z,acterm
	jp	CMDERR

actall:	ld	a,1
	ld	(OPTSW),a	; set ALL flag
	jp	actopt

acterm:	ld	a,(OPTSW)
	or	a
	jp	nz,CMDERR
	call	PDN		; parse terminal name
	jp	c,CMDERR
	ld	(TMPDEV),de	; store it
	ld	a,c
	ld	(TMPDEV+2),a
	ld	(LNPTR),hl
	jp	actopt

act0:	ld	c,1
	SC	.SUPER		; put MCR in supervisor mode
	jp	c,ERFAIL
	ld	c,5		; LUN 5 is console
	ld	de,0		; no ASTs
	call	ATTACH
	ld	hl,($TLIST)	; get task list head into IX
act1:	ld	a,h
	or	l
	jr	z,act2
	push	hl
	pop	ix
	call	shwact		; show task details
	ld	l,(ix+T.TCBL)
	ld	h,(ix+T.TCBL+1)	; next TCB in list
	jr	act1
act2:	ld	c,5
	call	DETACH
	ld	c,0
	SC	.SUPER
	ret

shwact:	bit	TS.ACT,(ix+T.ST)
	ret	z		; skip if task not active
	ld	a,(OPTSW)	; check option
	or	a		; all?
	jr	nz,shact1	; skip terminal check if yes
	ld	e,(ix+T.TI)
	ld	d,(ix+T.TI+1)
	KCALL	$UCBDN
	ld	hl,TMPDEV
	ld	a,(hl)		; else compare terminal name
	cp	e
	ret	nz
	inc	hl
	ld	a,(hl)
	cp	d
	ret	nz
	inc	hl
	ld	a,(hl)
	cp	c
	ret	nz
shact1:	call	CRLF
	push	ix
	pop	hl
	ld	de,T.NAME	; task name offset
	add	hl,de
	ld	b,6
	call	PRINTN		; display task name
	ld	c,CR
	call	PUTCH
	ret

actswt:	db	'ALL',0
	db	'TERM',0
	db	0

CHKEQ:	ld	hl,(LNPTR)
	ld	a,(hl)
	cp	'='
	ret	nz
	inc	hl
	ld	(LNPTR),hl
	ret

;-----------------------------------------------------------------------

; ALT tsknam/PRI=nn
; ALT tsknam/RPRI=nn

; TODO: xxx -> ...xxx or xxxtn (last one rpri only)

altpri:	call	CHKPRV
	jp	c,SYSERR
	xor	a
	ld	(OPTSW),a
	call	GETTN		; get task name, return buf addr in HL
	ld	de,tskn1
	ld	bc,6
	ldir
altopt:	ld	de,(LNPTR)
	call	GETNS		; see if user supplied an argument
	or	a
	jr	z,setpri
	cp	'/'		; it must be a switch
	jp	nz,CMDERR
	inc	de
	ld	(LNPTR),de
	call	GETCMD
	ld	hl,altswt
	call	FNDCMD		; search for switch name in table
	or	a
	jp	z,CMDERR
	cp	0FFh
	jp	z,CMDERR
	ld	c,a
	call	CHKEQ		; '=' required for all switches
	jp	nz,CMDERR
	dec	c		; PRI?
	jr	z,altp
	dec	c		; RPRI?
	jr	z,altrp
	jp	CMDERR

altp:	call	GETDEC
	jp	c,CMDERR
	ld	a,h
	or	a
	jp	nz,CMDERR	; priority must be < 256
	ld	a,l
	ld	(pri),a
	ld	hl,OPTSW
	set	0,(hl)		; bit 0 set = change installed priority
	jr	altopt

altrp:	call	GETDEC
	jp	c,CMDERR
	ld	a,h
	or	a
	jp	nz,CMDERR	; priority must be < 256
	ld	a,l
	ld	(rpri),a
	ld	hl,OPTSW
	set	1,(hl)		; bit 1 set = change running priority
	jr	altopt

setpri:	ld	a,(OPTSW)
	or	a
	jp	z,CMDERR
	ld	c,a
	bit	0,c
	jr	z,stpri1
	ld	a,(pri)
	ld	e,a
	ld	d,1		; change first installed priority
	ld	hl,tskn1
	SC	.ALTPR		; set priority
	jp	c,SYSERR
stpri1:	bit	1,c
	or	a
	ret	z
	ld	a,(rpri)
	ld	e,a
	ld	d,0		; change only running priority
	ld	hl,tskn1
	SC	.ALTPR		; set priority
	jp	c,SYSERR
	ret

altswt:	db	'PRI',0
	db	'RPRI',0
	db	0

FNDLGN:
  IF 1
	push	de
	ld	de,(TMPDV2)
	ld	a,(TMPDV2+2)
	ld	c,a
	push	ix
	ld	ix,($CTCB)
	KCALL	$FNDEV
	pop	ix
	pop	de
	ld	bc,U.LCB
	add	hl,bc
	ld	a,(hl)		; get U.LCB field into HL
	inc	hl
	ld	h,(hl)
	ld	l,a
	or	h		; set?
	scf
	ret	z		; return CY if not
	push	hl
	pop	iy
	xor	a
	ret
  ELSE
	ld	hl,U.LCB
	add	hl,de
	ld	a,(hl)		; get U.LCB field into HL
	inc	hl
	ld	h,(hl)
	ld	l,a
	or	h		; set?
	scf
	ret	z		; return CY if not
	push	hl
	pop	iy
	ret
  ENDIF

; Print directory name (HL = file info), do not show the extension.

PDNAME:	ld	c,'['
	call	PUTCH
	call	PNAM9
	ld	c,']'
	call	PUTCH
	ret

PNAM9:	ld	b,9
PNAM:	ld	a,(hl)
	cp	' '
	ld	c,a
	call	nz,PUTCH
	inc	hl
	djnz	PNAM
	ret

; Print string @HL, length in B

PRINTN:	ld	c,(hl)
	call	PUTCH
	inc	hl
	djnz	PRINTN
	ret

;-----------------------------------------------------------------------

; CLQ - display clock queue

cmdclq:	ld	c,1
	SC	.SUPER		; enter supervisor mode
	jp	c,ERFAIL

	ld	c,5		; LUN 5 is console
	ld	de,0		; no ASTs
	call	ATTACH		; attach console

;;	xor	a
;;	ld	(SYSLVL),a	; disable task dispatching

	ld	hl,($CLKQ)
clq1:	ld	a,h
	or	l
	jp	z,clq6
	push	hl
	pop	ix		; get clock queue ebtry into IX
	ld	a,(ix+C.TYPE)
	cp	CT.RUN
	jp	nz,clq5		; skip if not a scheduled task run
	ld	c,LF
	call	PUTCH
	ld	l,(ix+C.TCB)	; get TCB address into HL
	ld	h,(ix+C.TCB+1)
	ld	de,T.NAME	; offset to task name field
	add	hl,de
	ld	b,6
	call	PRINTN		; display task name
	ld	hl,schmsg
	call	PUTSTR
	ld	hl,dtbuf
	SC	.GDAT		; get current date and time
	di
	ld	hl,TICCNT
	ld	de,buf
	ld	b,4
	xor	a		; clear CY
	push	ix
clq2:	ld	a,(ix+C.TIME)
	sbc	a,(hl)		; compute delta time = scheduled - current
	ld	(de),a
	inc	ix
	inc	hl
	inc	de
	djnz	clq2
	pop	ix
	ei
	call	nc,addtim	; note: CY here means expired...
	ld	hl,dtbuf
	call	PRDAT		; output date
	ld	c,' '
	call	PUTCH
	call	PRTIM		; output time
	ld	c,'.'
	call	PUTCH
	ld	a,(buf)
	call	ADEC2
	ld	hl,buf
	ld	b,4
	push	ix
	ld	c,0
clq3:	ld	a,(ix+C.RSI)
	ld	(hl),a		; get reschedule interval
	or	c
	ld	c,a
	inc	ix
	inc	hl
	djnz	clq3
	pop	ix
	ld	a,c
	or	a
	jr	z,clq4		; skip it if zero
	call	cvtdt
	ld	hl,rsimsg
	call	PUTSTR
	ld	hl,buf+3
	ld	a,(hl)
	call	ADEC2		; output reschedule interval
	ld	c,':'
	call	PUTCH
	dec	hl
	ld	a,(hl)
	call	ADEC2
	ld	c,':'
	call	PUTCH
	dec	hl
	ld	a,(hl)
	call	ADEC2
	ld	c,'.'
	call	PUTCH
	dec	hl
	ld	a,(hl)
	call	ADEC2
clq4:	ld	c,CR
	call	PUTCH
clq5:	ld	l,(ix+C.LNK)
	ld	h,(ix+C.LNK+1)
	jp	clq1

clq6:
;;	ld	a,1
;;	ld	(SYSLVL),a	; enable task dispatching

	ld	c,5		; LUN
	call	DETACH

	ld	c,0
	SC	.SUPER		; leave supervisor mode
	ret

schmsg:	db	' Scheduled at ',0
rsimsg:	db	', Reschedule interval ',0

addtim:	call	cvtdt		; convert delta ticks to delta hh:mm:ss
	ld	hl,dtbuf+6	; seconds field
	ld	de,buf+1
	ld	a,(de)
	call	BIN2BCD
	add	a,(hl)		; add seconds
	daa
	ld	(hl),a
	cp	60h
	ccf
	jr	nc,addt1
	sub 	60h
	daa
	ld	(hl),a
	scf
addt1:	dec	hl
	rl	c		; save CY
	inc	de
	ld	a,(de)
	call	BIN2BCD
	rr	c		; restore CY
	adc	a,(hl)		; add minutes
	daa
	ld	(hl),a
	cp	60h
	ccf
	jr	nc,addt2
	sub	60h
	daa
	ld	(hl),a
	scf
addt2:	dec	hl
	rl	c		; save CY
	inc	de
	ld	a,(de)
	call	BIN2BCD
	rr	c		; restore CY
	adc	a,(hl)		; add hours
	daa
	ld	(hl),a
	cp	24h
	ret	c
	sub	24h
	daa
	ld	(hl),a
	dec	hl
	ld	a,(hl)
	add	a,01h		; carry to day
	daa
	ld	(hl),a
	cp	31h+1		; TODO: month days for year in timbuf+6!
	ret	c
	ld	(hl),01h
	dec	hl
	ld	a,(hl)
	add	a,01h		; carry to month
	daa
	ld	(hl),a
	cp	12h+1
	ret	c
	ld	(hl),01h
	dec	hl
	dec	hl
	ld	a,(hl)
	add	a,01h		; carry to year
	daa
	ld	(hl),a
	ret	nc
	inc	hl
	ld	a,(hl)
	add	a,01h
	daa
	ld	(hl),a
	ret

cvtdt:	ld	de,(buf)
	ld	hl,(buf+2)	; load delta time into HLDE
	ld	a,(tcksec)
	ld	c,a
	call	DDIV		; ticks = delta % tcksec
	ld	(buf),a
	ld	a,h
	or	l
	or	d
	or	e
	ret	z
	ld	c,60
	call	DDIV		; seconds = quot % 60
	ld	(buf+1),a
	ld	a,h
	or	l
	or	d
	or	e
	ret	z
	ld	c,60
	call	DDIV		; minutes = quot % 60
	ld	(buf+2),a
	ld	a,e		; hours = quot / 60, must be < 24
	ld	(buf+3),a
	ret

; 32-bit unsigned division: HLDE=HLDE/C, remainder in A

DDIV:	ex	de,hl
	ld	b,32
	xor	a
dd1:	add	hl,hl
	rl	e
	rl	d
	rla
	cp	c
	jr	c,dd2
	inc	l
	sub	c
dd2:	djnz	dd1
	ex	de,hl
	ret

;-----------------------------------------------------------------------

; RUN taskname[/PRI=pri][/TERM=ddn:][/INC=inc][/TASK=name][/CMD=cmd]...
;  -or-
; RUN taskname dtime[/RSI=rsi][/UIC=[grp,usr]]

cmdrun:	call	GETFN		; get task file name into FNAME
	ld	de,FNAME
	call	setnam		; set task name in TDB
	call	initdb		; set terminal name in TDB, clear other fields
	ld	de,(LNPTR)
	call	GETNS		; get next non-blank char
	or	a
	jp	z,run0		; if end of line
	cp	'/'		;  or switch
	jp	z,run0		;   then it is an immediate run request

	call	CHKPRV		; else is a time-scheduled request
	jp	c,SYSERR	; user must be privileged

	call	tmval		; get relative time and units
	jp	c,CMDERR

	ld	(dtime),hl	; store dtime magnitude
	ld	a,e
	ld	(dtime+2),a	; store dtime units
	ld	hl,0
	ld	(rsi),hl	; default rsi magnitude
	ld	a,1
	ld	(rsi+2),a	; default rsi units

rs0:	ld	de,(LNPTR)
	call	GETNS
	or	a		; any (more) options?
	jr	z,rs2		; no, schedule task
	cp	'/'		; valid option switch?
	jp	nz,CMDERR
	inc	de
	ld	(LNPTR),de
	call	GETCMD		; else get option name
	ld	hl,rsiopt
	call	FNDCMD
	ld	c,a
	call	CHKEQ		; '=' required for all switches
	jp	nz,CMDERR
	dec	c		; RSI?
	jr	z,rs1
	dec	c		; UIC?
	jp	nz,CMDERR
	call	getuic
	jp	c,CMDERR
	ld	(newtsk+TD.USR),bc ; set UIC
	jr	rs0

rs1:	call	tmval		; get reschedule interval
	jp	c,CMDERR
	ld	(rsi),hl	; store rsi magnitude
	ld	a,e
	ld	(rsi+2),a	; store rsi units
	jr	rs0

rs2:	ld	hl,newtsk	; note: followed by dtime and rsi
	SC	.RUN		; schedule task
	jp	c,SYSERR
	ret

run0:	; immediate RUN request

	ld	hl,newtsk+TD.NAME
	ld	de,gtkbuf
	SC	.GTSK		; task installed?
	jr	c,run2		; no, try running from file
	ld	a,(gtkbuf+GT.ST)
	bit	TS.ACT,a	; task active?
	ld	a,E.TACT
	jp	nz,SYSERR	; yes, error

	ld	de,(LNPTR)
	call	GETNS
	or	a		; option follows?
	jr	z,run4		; no
	cp	'/'		; valid option switch?
	jp	nz,CMDERR
	inc	de
	ld	(LNPTR),de
	call	GETCMD		; else get option name
	ld	hl,uicopt
	call	FNDCMD
	dec	a		; UIC?
	jp	nz,CMDERR	; no, error
	call	CHKPRV
	jp	c,SYSERR	; option is privileged
	call	CHKEQ		; '=' required
	call	getuic
	jp	c,CMDERR
	ld	(newtsk+TD.USR),bc ; set task UIC
run4:	ld	hl,newtsk
	ld	a,(cmdtrm)	; check command terminator
	cp	ESC		; ESC?
	jr	z,run3		; yes, user wants exit notification
	ld	bc,0
	SC	.RQST		; else request the task and exit
	jp	c,SYSERR
	ret

run3:	ld	c,1
	SC	.SUPER
	jp	c,SYSERR
	ld	ix,($CTCB)
	set	TA.MCR,(ix+T.ATTR) ; set our TA.MCR bit to notify MCR...
	ld	c,0
	SC	.SUPER
	SC	.RPOI		; request task and pass offspring information
	jp	c,SYSERR
	ret

run2:	ld	hl,buf
	ld	de,inscmd
	call	cpstr		; copy INS command name
	ld	(hl),' '
	inc	hl
	ld	de,FNAME
	call	cpstr		; copy requested task file name
	ld	de,runopt
	call	cpstr		; add run options
	ex	de,hl
	ld	hl,TTDEV	; use TTnn as default task name
	ld	bc,2
	ldir
	ld	a,(hl)
	call	BIN2BCD
	ld	c,a
	rrca
	rrca
	rrca
	rrca
	and	0Fh
	jr	z,run1
	add	a,'0'
	ld	(de),a
	inc	de
run1:	ld	a,c
	and	0Fh
	add	a,'0'
	ld	(de),a
	inc	de
	ex	de,hl
	ld	de,(LNPTR)
	call	cpstr		; add user-supplied options
	ld	(hl),0
	ld	hl,buf
	jp	runtsk		; request ...INS and connect to it

inscmd:	db	'INS',0
runopt:	db	'/RUN=REM/TASK=',0

rsiopt:	db	'RSI',0
uicopt:	db	'UIC',0
	db	0

; Get time interval specification, returns magnitude in HL and units in E.

tmval:	ld	de,(LNPTR)
	call	GETNS
	cp	'0'		; digit?
	ret	c		; return error if not
	cp	'9'+1
	ccf
	ret	c
	ld	(LNPTR),de
	call	GETDEC		; get magnitude of time interval into HL
	ld	a,(de)		; get units
	or	a
	scf
	ret	z
	inc	de
	ld	(LNPTR),de
	call	UCASE
	ld	e,1
	cp	'T'		; Ticks?
	ret	z		; return if yes
	inc	e
	cp	'S'		; Seconds?
	ret	z		; return if yes
	inc	e
	cp	'M'		; Minutes?
	ret	z		; return if yes
	inc	e
	cp	'H'		; Hours?
	ret	z		; return if yes
	scf
	ret			; else return error

; Get UIC specification, returns user ID in C, group ID in B.

getuic:	ld	de,(LNPTR)
	call	GETNS
	cp	'['		; check delimiter
	scf
	ret	nz
	inc	de
	ld	(LNPTR),de
	call	getnid		; get group ID
	ret	c
	ld	b,a
	ld	de,(LNPTR)
	call	GETNS
	cp	','		; check delimiter
	scf
	ret	nz
	inc	de
	ld	(LNPTR),de
	call	getnid		; get user ID
	ret	c
	ld	c,a
	ld	de,(LNPTR)
	call	GETNS
	cp	']'		; check delimiter
	scf
	ret	nz
	inc	de
	ld	(LNPTR),de
	xor	a
	ret

getnid:	push	bc
	call	GETDEC		; get decimal value
	pop	bc
	ld	a,h
	or	a
	scf
	ret	nz		; error if > 255
	ld	a,l
	or	a
	ret	nz		; return if > 0
	scf
	ret			; error if 0

;-----------------------------------------------------------------------

; Run installed task given as command.
; - The first 3 chars of the command will be used to request a task ...XXX
; - If ...XXX is active under another terminal, a temporary task with a name
;   like XXXTnn will be requested.
;
; Called with HL = full command line

runtsk:	call	runpgm
	ret	nc
	or	a
	jp	z,CMDERR
	jp	SYSERR

runpgm:	ld	(cmdptr),hl
	ex	de,hl
	ld	hl,newtsk+TD.NAME
	ld	a,'.'
	ld	b,3
rpgm0:	ld	(hl),a
	inc	hl
	djnz	rpgm0
	ld	b,3
rpgm7:	call	GETFS
	jp	z,rcmder
	call	UCASE
	ld	(hl),a
	inc	hl
	inc	de
	djnz	rpgm7
	call	initdb		; init TDB and set terminal name
	ld	hl,(cmdptr)
	call	setcml		; setup command line for task
	ld	hl,newtsk
	SC	.RPOI		; request task and pass offspring info
	ret	nc		; return on success
	cp	E.TACT		; task active?
	jr	z,rpgm2
	cp	E.TRUN		; or task already running?
	jp	nz,SYSERR	; error if neither
rpgm2:	ld	c,1
	SC	.SUPER
	ld	hl,newtsk+TD.NAME
	ld	de,$SCRBF
	ld	bc,6
	ldir
	ld	bc,$SCRBF
	KCALL	$FNTSK		; get task TCB
	jr	c,rpgm3
	ld	de,tcbbuf
	ld	bc,TCBSZ
	ldir
rpgm3:	push	af
	ld	c,0
	SC	.SUPER
	pop	af
	ret	c		; error if not found

	; TODO: check console, start a new copy only if ...XXX is active
	; on another terminal.

	ld	hl,newtsk+TD.NAME+3 ; remove dots, try running task as XXXTn
	ld	de,newtsk+TD.NAME
	ld	bc,3
	ldir			; 3 chars of task name
	push	de
	ld	b,3
	ld	a,' '
rpgm4:	ld	(de),a
	inc	de
	djnz	rpgm4
	pop	de
	ld	a,(newtsk+TD.TI) ; or use TTDEV?
	ld	(de),a
	inc	de
	ld	a,(newtsk+TD.TI+2)
	call	BIN2BCD
	ld	c,a
	rrca
	rrca
	rrca
	rrca
	and	0Fh
	jr	z,rpgm5
	add	a,'0'
	ld	(de),a
	inc	de
rpgm5:	ld	a,c
	and	0Fh
	add	a,'0'
	ld	(de),a
	ld	hl,newtsk
	SC	.RPOI		; request task and pass offspring info
	ret	nc
	cp	E.TNF		; expecting this error
	scf
	ret	nz

	ld	c,1
	SC	.SUPER
	ret	c
	xor	a
	ld	(SYSLVL),a	; disable task dispatching
	ld	hl,newtsk+TD.NAME
	ld	de,tcbbuf+T.NAME
	ld	bc,6
	ldir
	ld	a,(tcbbuf+T.ATTR)
	res	TA.FIX,a
	set	TA.REM,a	; remove on exit
	ld	(tcbbuf+T.ATTR),a
	xor	a
	ld	(tcbbuf+T.ST),a
	ld	(tcbbuf+T.ST+1),a
	ld	(tcbbuf+T.CPCB),a
	ld	(tcbbuf+T.CPCB+1),a
	ld	bc,TCBSZ
	KCALL	$ALLOC		; allocate new TCB
	jr	c,rpgm6
	push	hl
	pop	ix		; get TCB address into IX for $LKTCB call below
	ex	de,hl
	ld	hl,tcbbuf
	ld	bc,TCBSZ
	ldir			; copy TCB
	ld	iy,$TLIST
	ld	bc,T.TCBL
	KCALL	$LKTCB		; install temporary task with different name
	xor	a
rpgm6:	push	af
	ld	a,1
	ld	(SYSLVL),a	; enable task dispatching
	ld	c,0
	SC	.SUPER
	pop	af
	ret	c

	call	initdb		; reset TDB and set terminal name
	ld	hl,(cmdptr)
	call	setcml		; setup command line for task
	ld	hl,newtsk
	SC	.RPOI		; and request it
	ret

rcmder:	xor	a		; syntax error
	scf
	ret

; Set terminal name in TDB to TTDEV and clear all other fields, except
; task name field.

initdb:	xor	a
	ld	(newtsk+TD.ATTR),a	; clear all attributes
	ld	(newtsk+TD.USR),a	; default user number
	ld	(newtsk+TD.GRP),a	; default user group
	ld	hl,TTDEV		; default terminal
	ld	de,newtsk+TD.TI		;  is user's terminal
	ld	bc,3
	ldir
	ld	hl,0
	ld	(newtsk+TD.SDAT),hl	; no data to send
	ld	(newtsk+TD.SLEN),hl
	ret

; Set task name in TDB

setnam:	ld	hl,newtsk+TD.NAME
	ld	b,6		; 6 chars
setn1:	ld	a,(de)
	or	a
	jp	z,PADBL		; pad with blanks if necessary
	ld	(hl),a
	inc	hl
	inc	de
	djnz	setn1
	ret

; Setup task command line. HL = address of command tail

setcml:	push	hl
	call	STRLEN
	ld	hl,0
	ld	(newtsk+TD.CMD),hl
	ld	(newtsk+TD.CML),hl
	pop	hl
	ld	a,c
	or	a
	ret	z		; no command supplied
	ld	b,0
	inc	bc		; count the trailing CR
	ld	(newtsk+TD.CML),bc
	dec	bc
	ld	de,cmlbuf
	ld	(newtsk+TD.CMD),de
	ldir
	ld	a,CR
	ld	(de),a
	ret

STRLEN:	ld	c,0
strl1:	ld	a,(hl)
	or	a
	ret	z
	inc	hl
	inc	c
	jr	strl1

;-----------------------------------------------------------------------

; REA tsknam lun ddn: - reassign static LUN

cmdrea:	call	CHKPRV
	jp	c,SYSERR
	call	gtsknm		; get task name and task info
	jp	c,SYSERR
	call	GETDEC		; get LUN
	ld	a,h
	or	a
	jr	nz,rea1		; validate LUN
	or	l
	jr	z,rea1
	cp	16+1
	jr	nc,rea1
	ld	(temp),hl	; store LUN
	ex	de,hl
	call	PDN		; get device name
	jp	c,CMDERR
	ld	(TMPDEV),de	; store device name
	ld	a,c
	ld	(TMPDEV+2),a
	ld	hl,gtkbuf+GT.SBLK
	ld	a,(hl)		; check starting block number
	inc	hl
	or	(hl)
	inc	hl
	or	(hl)
	inc	hl
	or	(hl)
	ret	z		; return if task is a resident kernel task
	ld	de,(gtkbuf+GT.LDEV)
	ld	a,(gtkbuf+GT.LDEV+2)
	ld	c,a
	ld	b,1		; assign task load device to LUN 1
	SC	.ALUN
	jp	c,SYSERR
	ld	hl,buf
	ld	bc,(gtkbuf+GT.SBLK)
	ld	de,(gtkbuf+GT.SBLK+2)
	call	dskrd		; read task header
	jp	c,SYSERR
	ld	hl,(temp)	; get LUN
	dec	hl		; make it zero-based
	add	hl,hl
	add	hl,hl
	ld	de,buf+TH.LUNT
	add	hl,de		; index into LUN table of task header
	ex	de,hl		; DE = dst
	ld	hl,TMPDEV	; HL = src
	ld	bc,3
	ldir			; reassign LUN
	ld	hl,buf
	ld	bc,(gtkbuf+GT.SBLK)
	ld	de,(gtkbuf+GT.SBLK+2)
	call	dskwr		; write changes back
	jp	c,SYSERR
	ret

rea1:	ld	hl,remsg
	jp	ERRMCR

remsg:	db	'Invalid LUN',0

gtsknm:	ld	b,6
	call	GETN		; get task name into CMDNAM
	call	PADBL		; pad with blanks
	ld	hl,CMDNAM
	ld	de,gtkbuf
	SC	.GTSK		; get task info
	ret	nc		; return on success
	call	CHKT3		; is task name 3 chars or less?
	ld	a,E.TNF
	scf
	ret	nz		; error if not
	ld	hl,CMDNAM
	ld	de,CMDNAM+3
	ld	bc,3
	ldir
	ld	hl,CMDNAM
	ld	b,3
gt1:	ld	(hl),'.'	; try ...tsk
	inc	hl
	djnz	gt1
	ld	hl,CMDNAM
	ld	de,gtkbuf
	SC	.GTSK		; get task info
	ret

;-----------------------------------------------------------------------

; LUN tsknam - display static LUN assignments

cmdlun:	call	gtsknm		; get task name and task info
	jp	c,SYSERR
	ld	hl,gtkbuf+GT.SBLK
	ld	a,(hl)
	inc	hl
	or	(hl)
	inc	hl
	or	(hl)
	inc	hl
	or	(hl)
	ret	z		; return if task is a resident kernel task
	ld	de,(gtkbuf+GT.LDEV)
	ld	a,(gtkbuf+GT.LDEV+2)
	ld	c,a
	ld	b,1		; LUN
	SC	.ALUN
	jp	c,SYSERR
	ld	hl,buf
	ld	bc,(gtkbuf+GT.SBLK)
	ld	de,(gtkbuf+GT.SBLK+2)
	call	dskrd		; read task header
	jp	c,SYSERR
	ld	hl,buf+TH.LUNT
	ld	b,16
lun1:	ld	e,(hl)		; get device name and unit
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	c,(hl)
	inc	hl
	inc	hl
	call	shwlun		; display LUN assignment
	djnz	lun1
	ret

shwlun:	ld	a,d
	or	e
	ret	z
	push	bc
	call	CRLF
	ld	c,e
	call	PUTCH		; output device name
	ld	c,d
	call	PUTCH
	pop	bc
	ld	a,c
	call	ADEC		; output unit number
	ld	c,':'
	call	PUTCH
	ld	c,TAB
	call	PUTCH
	ld	a,16+1
	sub	b
	call	ADEC		; output LUN
	ld	c,CR
	call	PUTCH
	ret

; Read disk block (number in DEBC) using LUN 1 to buffer @HL

dskrd:	ld	a,IO.RLB	; function code
	jr	dskio		; continue via common code

; Write disk block (number in DEBC) using LUN 1 from buffer @HL

dskwr:	ld	a,IO.WLB	; function code
dskio:	push	ix
	ld	ix,QIOBLK
	ld	(ix+Q.FUNC),a	; store function code
	ld	(ix+Q.SUBF),0	; subfunction
	ld	(ix+Q.LUN),1	; use LUN 1
	ld	(ix+Q.BUF),l	; buffer address
	ld	(ix+Q.BUF+1),h
	ld	(ix+Q.BLK),c	; block number
	ld	(ix+Q.BLK+1),b
	ld	(ix+Q.BLK+2),e
	ld	(ix+Q.BLK+3),d
	ld	hl,512
	ld	(ix+Q.LEN),l
	ld	(ix+Q.LEN+1),h
	ld	(ix+Q.EFN),9	; flag number
	ld	(ix+Q.WAIT),1	; wait
	ld	hl,QIOSB
	ld	(ix+Q.IOSB),l	; set result address
	ld	(ix+Q.IOSB+1),h
	ld	hl,0
	ld	(QIOSB+2),hl	; clear number of bytes read
	ld	(ix+Q.AST),l	; no AST
	ld	(ix+Q.AST+1),h
	push	ix
	pop	hl
	SC	.QIO		; .QIOW
	pop	ix
	ret	c
	ld	a,(QIOSB)	; get return code
	or	a
	ret	z
	scf
	ret

;-----------------------------------------------------------------------

; PAR - Display partitions

cmdpar:	ld	c,1
	SC	.SUPER		; enter supervisor mode
	jp	c,ERFAIL

	ld	c,5		; LUN 5 is console
	ld	de,0		; no ASTs
	call	ATTACH		; attach console

	ld	hl,($PLIST)
p1:	ld	a,h
	or	l		; end of partition list?
	jr	z,p4		; exit loop if yes
	push	hl
	pop	ix
	call	dmppar		; display partition details
	ld	l,(ix+P.SUB)
	ld	h,(ix+P.SUB+1)
	push	ix
p2:	ld	a,h
	or	l		; end of subpartition list?
	jr	z,p3		; exit inner loop if yes
	push	hl
	pop	ix
	call	dmppar		; display subpartition details
	ld	l,(ix+P.LNK)
	ld	h,(ix+P.LNK+1)
	jr	p2
p3:	pop	ix
	ld	l,(ix+P.LNK)
	ld	h,(ix+P.LNK+1)
	jr	p1

p4:	ld	c,5		; LUN
	call	DETACH

	ld	c,0
	SC	.SUPER		; leave supervisor mode
	ret

dmppar:	push	ix
	pop	hl
	ld	c,LF
	call	PUTCH
	ld	bc,P.NAME
	add	hl,bc
	ld	b,6
	call	PRINTN		; display partition name
	ld	c,' '
	call	PUTCH
	push	ix
	pop	hl
	call	HLHEX		; display PCB address
	ld	c,' '
	call	PUTCH
	ld	a,(ix+P.BASE)
	rrca
	rrca
	rrca
	rrca
	ld	c,a
	call	NHEX		; display partition base address
	ld	a,c
	and	0F0h
	call	AHEX
	ld	a,0
	call	AHEX
	ld	c,' '
	call	PUTCH
	ld	a,(ix+P.SIZE)
	rrca
	rrca
	rrca
	rrca
	ld	c,a
	call	NHEX		; display partition size
	ld	a,c
	and	0F0h
	call	AHEX
	ld	a,0
	call	AHEX
	ld	c,' '
	call	PUTCH
	bit	PA.SUB,(ix+P.ATTR)
	ld	hl,ptype1
	jr	z,dmp2		; branch if main partition
	ld	hl,ptype2	; else is subpartition
dmp2:	push	af
	call	PUTSTR		; display type (MAIN or SUB)
	pop	af
	jr	nz,dmp4
	bit	PA.SYS,(ix+P.ATTR)
	ld	hl,pstat1
	jr	nz,dmp3		; branch if system-controlled
	ld	hl,pstat2
dmp3:	call	PUTSTR		; if MAIN, display status (SYS or TASK)
dmp4:	ld	l,(ix+P.TCB)	; get TCB of owner
	ld	h,(ix+P.TCB+1)
	ld	a,h
	or	l
	jr	z,dmp5
	bit	PA.SUB,(ix+P.ATTR)
	jr	z,dmp5
	ld	bc,T.NAME
	add	hl,bc
	ld	c,'('
	call	PUTCH
	ld	b,6
	call	PRINTN		; output task name
	ld	c,')'
	call	PUTCH
dmp5:	ld	c,CR
	call	PUTCH
	ret

ptype1:	db	'MAIN ',0
ptype2:	db	'SUB  ',0

pstat1:	db	'SYS',0
pstat2:	db	'TASK',0

;-----------------------------------------------------------------------

; TIM - Show/Set date and time

; TIM
; TIM hh:mm[:ss]
; TIM DD-MMM-[YY]YY
; TIM MM/DD/[YY]YY
; TIM hh:mm[:ss] DD-MMM-[YY]YY
; TIM DD-MMM-[YY]YY hh:mm[:ss]
; TIM hh:mm[:ss] MM/DD/[YY]YY
; TIM MM/DD/[YY]YY hh:mm[:ss]

cmdtim:	ld	hl,dtbuf	; get current date and time
	SC	.GDAT		;  for display or default values

	ld	de,(LNPTR)
	call	GETNS		; get next non-blank character
	or	a		; end of command line?
	jp	z,shdate	; then display current date and time

	call	CHKPRV
	jp	c,SYSERR

	ld	hl,0
	ld	(temp),hl
stm0:	call	tgetn		; get number
	ld	a,(de)
	cp	':'		; time separator?
	jr	nz,stm1		; jump if not, check for date
	inc	de
	ld	(LNPTR),de
	ld	a,1
	ld	(temp),a
	ld	de,23h		; else must be hour (note BCD value!)
	call	tvalid		; validate
	ld	a,l
	ld	(dtbuf+4),a
	call	tgetn		; get next number
	ld	de,59h		; must be minute (BCD value)
	call	tvalid
	ld	a,l
	ld	(dtbuf+5),a
	ld	de,(LNPTR)
	ld	a,(de)
	cp	':'		; seconds given?
	ld	hl,0
	jr	nz,stm3		; no, zero the seconds field
	inc	de
	ld	(LNPTR),de
	call	tgetn
	ld	de,59h
	call	tvalid
stm3:	ld	a,l
	ld	(dtbuf+6),a
	ld	a,(temp+1)
	or	a		; date already processed?
	jp	nz,dtset	; set date&time and exit if yes

	ld	de,(LNPTR)
	call	GETNS
	or	a		; end of command line?
	jp	z,dtset		; set time and exit if yes

	call	tgetn		; else get day/month
	ld	a,(de)

stm1:	ld	c,a
	ld	a,(temp+1)
	or	a		; date already processed?
	jp	nz,CMDERR	; error if yes
	ld	a,c
	cp	'-'		; try DD-MMM-YYYY
	jr	nz,stm2
	inc	de
	ld	(LNPTR),de
	ld	a,1
	ld	(temp+1),a
	ld	de,31h		; must be day, limit to 31 for now
	call	tvalid
	ld	a,l
	ld	(dtbuf+3),a
	call	tgetm		; month must follow
	ld	de,(LNPTR)
	ld	a,(de)
	cp	'-'
	jp	nz,CMDERR
	jr	stm4		; process year via common code

stm2:	cp	'/'		; try MM/DD/YYYY
	jp	nz,CMDERR
	inc	de
	ld	(LNPTR),de
	ld	a,1
	ld	(temp+1),a
	ld	de,12h		; must be month
	call	tvalid
	ld	a,l
	ld	(dtbuf+2),a
	call	tgetn		; get day
	ld	de,31h
	call	tvalid
	ld	a,l
	ld	(dtbuf+3),a
	ld	de,(LNPTR)
	ld	a,(de)
	cp	'/'
	jp	nz,CMDERR
stm4:	inc	de
	ld	(LNPTR),de
	call	tgetn		; get year
	call	yvalid
	ld	a,h
	ld	(dtbuf+0),a	; store BCD MSB first
	ld	a,l
	ld	(dtbuf+1),a
	ld	a,(temp)
	or	a		; time already processed?
	jp	nz,dtset	; set date&time and return if yes

	ld	de,(LNPTR)
	call	GETNS
	or	a		; end of command line?
	jp	z,dtset		; set date and exit if yes

	jp	stm0		; else jump to process time string

dtset:	call	DOW		; compute day of week
	ld	hl,dtbuf
	SC	.SDAT		; set date and time
	jp	c,CMDERR
	ret

shdate:	call	CRLF
	ld	hl,dtbuf
	call	PRTIM		; display time
	ld	c,' '
	call	PUTCH
	call	PRDAT		; display date
	ld	c,CR
	call	PUTCH
	ret

tgetn:	call	GETBCD		; read BCD number from command line
	ret	nc		; return if no error
	inc	sp
	inc	sp		; else discard return address
	jp	CMDERR		; and exit via error routine

tvalid:	call	CPHLDE
	ret	nc
	inc	sp
	inc	sp
	jp	CMDERR

yvalid:	ld	de,99h
	call	CPHLDE
	jr	c,yv1
	ld	a,l
	cp	78h
	ld	h,19h
	ret	nc
	ld	h,20h
	ret
yv1:	ld	de,1977h
	ret	c
	inc	sp
	inc	sp
	jp	CMDERR

tgetm:	call	GETCMD
	ld	hl,month
	call	FNDCMD
	dec	a		; error if 0 or 0FFh
	jp	m,tgm1
	inc	a
	call	BIN2BCD
	ld	(dtbuf+2),a	; month is 1-based
	ld	a,(dtbuf+3)
	or	a
	jr	z,tgm1
	ret			; TODO: trim day of month
tgm1:	inc	sp
	inc	sp
	jp	CMDERR

tascii:	call	UCASE
	cp	'A'
	ret	c
	cp	'Z'+1
	ccf
	ret

; Day-of-Week computation using formula:

;  if (m < 3) --y;
;  w = (y + y / 4 - y / 100 + y / 400 + tadj[m-1] + d) % 7;
;  w is 0 = Sunday, 1 = Monday, ... 6 = Saturday

DOW:	ld	a,(dtbuf)	; year MSB
	call	BCD2BIN
	ld	e,a
	ld	d,100
	call	MULT8
	ld	a,(dtbuf+1)	; year LSB
	call	BCD2BIN
	ld	e,a
	ld	d,0
	add	hl,de
	ld	a,(dtbuf+2)	; month
	cp	3
	jr	nc,d1
	dec	hl		; if (month < 3) --year
d1:	ld	e,l		; DE = year
	ld	d,h
	srl	h
	rr	l
	srl	h
	rr	l		; HL = year / 4
	ex	de,hl
	add	hl,de
	ex	de,hl
	ld	c,25
	call	DIV8		; HL = (year / 4) / 25 = year / 100
	ex	de,hl
	or	a
	sbc	hl,de
	srl	d
	rr	e
	srl	d
	rr	e		; DE = (year / 100) / 4 = year / 400
	add	hl,de
	ex	de,hl
	ld	hl,tadj
	ld	a,(dtbuf+2)	; month
	call	BCD2BIN
	dec	a
	ld	c,a
	ld	b,0
	add	hl,bc
	ld	c,(hl)
	ex	de,hl
	add	hl,bc
	ld	a,(dtbuf+3)	; day
	call	BCD2BIN
	ld	c,a
	add	hl,bc
	ld	c,7
	call	DIV8
	inc	a		; 0..6 -> 1..7
	ld	(dtbuf+7),a
	ret

tadj:	db	0,3,2,5,0,3,5,1,4,6,2,4

; HL = D * E

MULT8:	ld	hl,0
	ld	a,d
	ld	d,0
next:	or	a
	ret	z
	rra
	jr	nc,shift
	add	hl,de
shift:	ex	de,hl
	add	hl,hl
	ex	de,hl
	jr	next

; HL = HL / C, remainder in A

DIV8:	xor	a
	ld	b,16
dv81:	add	hl,hl
	rla
	jr	c,dv83
	cp	c
	jr	c,dv82
dv83:	sub	c
	inc	hl
dv82:	djnz	dv81
	ret	

PRDAT:	push	hl
	inc	hl
	inc	hl
	inc	hl
	ld	a,(hl)		; day
	call	AHEX
	ld	c,'-'
	call	PUTCH
	dec	hl
	ld	a,(hl)		; month
	call	BCD2BIN
	dec	a
	cp	12
	jr	c,pr1
	xor	a
pr1:	add	a,a		; *2
	add	a,a		; *4
	push	hl
	ld	hl,month
	ld	c,a
	ld	b,0
	add	hl,bc
	call	PUTSTR
	pop	hl
	ld	c,'-'
	call	PUTCH
	dec	hl
	dec	hl
	ld	a,(hl)		; year
	call	AHEX
	inc	hl
	ld	a,(hl)
	call	AHEX
	pop	hl
	ret

PRTIM:	push	hl
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	a,(hl)		; hour
	call	AHEX
	ld	c,':'
	call	PUTCH
	inc	hl
	ld	a,(hl)		; min
	call	AHEX
	ld	c,':'
	call	PUTCH
	inc	hl
	ld	a,(hl)		; sec
	call	AHEX
	pop	hl
	ret

month:	db	'Jan',0
	db	'Feb',0
	db	'Mar',0
	db	'Apr',0
	db	'May',0
	db	'Jun',0
	db	'Jul',0
	db	'Aug',0
	db	'Sep',0
	db	'Oct',0
	db	'Nov',0
	db	'Dec',0
	db	0

; Validate date (only day and month)

valdt:	inc	hl
	inc	hl
	ld	c,12h+1		; month
	call	vldt1		; check if in range
	ret	c
	ld	c,31h+1		; day
vldt1:	ld	a,(hl)
	inc	hl
	or	a
	scf
	ret	z
	cp	c
	ccf
	ret

;-----------------------------------------------------------------------

; Get physical device name assigned to logical device name in DE-C

FNDEV:	push	de
	push	bc
	ld	b,2		; use LUN 2
	SC	.ALUN
	jr	c,fndv1
	ld	hl,buf
	ld	c,2
	SC	.GTLUN		; det device info
	jr	c,fndv1
	ld	de,(buf)	; get physical device number
	ld	a,(buf+2)
	ld	c,a
	pop	hl
	pop	hl
	ret
fndv1:	pop	bc		; on error, return logical device name
	pop	de
	ret

; Get device name, unit number, status byte and control word

GETDEV:	ld	l,(ix+D.NAME)	; get physical device name
	ld	h,(ix+D.NAME+1)
	ld	(TMPDV2),hl
	ld	hl,U.UNIT
	add	hl,de
	ld	a,(hl)		; get unit number
	ld	(TMPDV2+2),a
	ld	hl,U.ST
	add	hl,de
	ld	a,(hl)		; get unit status bits
	ld	(DEVST),a
	ld	hl,U.CW
	add	hl,de
	ld	a,(hl)		; get unit control word
	inc	hl
	ld	h,(hl)
	ld	l,a
	ld	(DEVCW),hl
	ret

; Check if terminal name in DE-C is our terminal (TI:). If not, then
; check if user is privileged.

CHKTI:	ld	hl,(TTDEV)
	call	CPHLDE
	jr	nz,CHKPRV
	ld	a,(TTDEV+2)
	sub	c
	ret	z
	; continue below

; Check if user is privileged. Return with CY set and error code in A
; if not.

CHKPRV:	ld	hl,LCBBUF
	ld	c,I.USCB
	SC	.GIN
	ret	c
	ld	hl,LCBBUF+L.ST
	ld	a,E.PRIV
	bit	LS.PRV,(hl)
	scf
	ret	z
	xor	a
	ret

;-----------------------------------------------------------------------

	dseg

TTDEV:	ds	3

LCBBUF:	ds	LCBSZ

OPTSW:	ds	1
pri:	ds	1
rpri:	ds	1

LNPTR:	ds	2
CMDNAM:	ds	10
tskn1:	ds	6
FNAME:	ds	FNSZ

TMPDEV:	ds	3		; physical device name (ASN, DEV commands)
TMPDV2:	ds	3		; temp device name (ASN, DEV, SET commands)
SWVAL:	ds	1		; switch value (ASN, DEV command)
DEVST:	ds	1		; device status (DEV, SET commands)
DEVCW:	ds	2		; device/unit control word (DEV command)

tcksec:	ds	2
dtbuf:	ds	7
temp:	ds	2		; used by TIM and TAL/ATL
buf:	ds	512
gtkbuf:	ds	GTKSZ
tcbbuf:	ds	TCBSZ
newtsk:	ds	TDBSZ		; ! do not ! task descriptor for RUN command
dtime:	ds	3		; ! change ! dtime for RUN command
rsi:	ds	3		; ! order  ! reschedule interval
cmdptr:	ds	2		; ptr to command args (RUN command)
cmdtrm:	ds	1

	public	?MEMRY
?MEMRY:	ds	2

	ds	256		; stack space
stack	equ	$

	end	START
