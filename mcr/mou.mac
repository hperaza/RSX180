;**********************************************************************;
;                                                                      ;
;   MCR external command MOUNT for RSX180.                             ;
;   Copyright (C) 2014-2023, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

	.Z80

	ident	'01.05'

	include	SYSFN.INC
	include	SYSTEM.INC
	include	QIO.INC
	include	DCB.INC
	include	TCB.INC
	include	FCB.INC
	include	LCB.INC
	include	VCB.INC
	include	GCML.INC
	include	ERRORS.INC

CR	equ	0Dh
LF	equ	0Ah
TAB	equ	09h
ESC	equ	1Bh

LUNCML	equ	1
LUNMOU	equ	2

SW.ACP	equ	0
SW.FPRO	equ	1
SW.UNL	equ	2
SW.VI	equ	3

	extrn	PDN,PERROR,PUTCH,PUTSTR,UCASE,ADEC,HLDEC,TTFLSH
	extrn	CPHLDE,GCML,RCML,CRLF,ATTACH,DETACH,TTLUN

KCALL	MACRO	addr
	call	$SWSTK
	dw	addr
	ENDM

;-----------------------------------------------------------------------

	cseg

START:	ld	sp,stack	; setup stack

	ld	c,1
	SC	.SUPER		; map kernel database
	jr	c,m3

	ld	hl,EX.SUC	; default to 'success' exit code
m0:	ld	(excod),hl

m1:	call	TTFLSH
	ld	iy,GDAT
	call	GCML		; get command line tail
	jr	c,m2		; jump on error

	ld	(lnptr),hl	; save pointer to command tail
	call	domnt		; process the command
	jr	nc,m1		; loop for more
	ld	hl,EX.ERR	; on error, set exit code to 'error'
	jr	m0

m2:	cp	E.EOF		; end of file?
	jr	z,m4		; exit normally if yes

	call	CMLERR		; else display error
	ld	iy,GDAT
	call	RCML		; reset command state
	ld	hl,(excod)
	ld	a,l
	cp	EX.SUC
	jr	nz,m1
	ld	hl,EX.WRN	; change 'success' exit code to 'warning'
	jr	m0		; and loop
	
m3:	ld	hl,EX.SEV	; severe error, fatal exit
	ld	(excod),hl
	call	SYSERR
m4:	call	TTFLSH
	ld	hl,(excod)
	SC	.EXIT		; exit

;-----------------------------------------------------------------------

; Print error message in the form 'MOU -- message'

CMDERR:	ld	hl,snerr
ERROR:	push	hl
	ld	hl,eprfx
	call	PUTSTR
	pop	hl
	call	PUTSTR
	call	ATLINE
	ld	c,CR
	call	PUTCH
	scf
	ret

SYSERR:	push	af
	ld	hl,eprfx
	call	PUTSTR
	pop	af
	call	PERROR
	call	ATLINE
	ld	c,CR
	call	PUTCH
	scf
	ret

eprfx:	db	CR,LF,'MOU -- ',0
snerr:	db	'Syntax error',0

; Display CML or system error message

CMLERR:	or	a
	jp	m,SYSERR
	ld	hl,ERROR
	push	hl
	cp	GE.SN
	ld	hl,snerr
	ret	z
	cp	GE.LEN
	ld	hl,msglen
	ret	z
	cp	GE.NLV
	ld	hl,msgnlv
	ret	z
	pop	hl
	jp	SYSERR

msglen:	db	'Line too long in command file',0
msgnlv:	db	'Command nesting level too deep',0

; Display line number of indirect file where error happened

ATLINE:	ld	hl,GDAT+G.ST
	bit	GS.FIL,(hl)
	ret	z
	ld	hl,(GDAT+G.LN)
	ld	a,h
	or	l
	ret	z
	push	hl
	ld	hl,atln
	call	PUTSTR
	pop	hl
	xor	a
	call	HLDEC
	ret

atln:	db	' at line ',0

;-----------------------------------------------------------------------

; Return Z if char in A is blank.

isblnk:	or	a
	ret	z
	cp	' '
	ret	z
	cp	TAB
	ret	z
	cp	CR
	ret	z
	cp	LF
	ret

; Return Z if char in A is a delimiter.

delim:	call	isblnk
	ret	z
	cp	'/'
	ret	z
	cp	'='
	ret	z
	cp	':'
	ret	z
	cp	','
	ret	z
	cp	CR
	ret	z
	cp	LF
	ret

; Skip blanks and return next char

skipbl:	ld	a,(hl)
	or	a
	ret	z
	call	isblnk
	ret	nz
	inc	hl
	jr	skipbl

; Get command name into nambuf (6 char max).

getcmd:	ld	de,nambuf
	ld	b,6
gcmd1:	ld	a,(hl)
	call	delim
	jr	z,gcmd3
	call	UCASE
	ld	(de),a
	inc	hl
	inc	de
	djnz	gcmd1
gcmd2:	ld	a,(hl)
	call	delim
	jr	z,gcmd3
	inc	hl
	jr	gcmd2
gcmd3:	xor	a
	ld	(de),a		; null-terminated
	ret

; Get blank-padded name (6 chars) into nambuf.

getnam:	call	getcmd
	inc	b
	dec	b
	ret	z
	ld	a,' '
sfill:	ld	(de),a
	inc	de
	djnz	sfill
	ret

; Read a hexadecimal number from input line into DE. Return number of
; processed chars in C. Returns CY if the number contains invalid chars,
; or on overflow.

gethex:	ld	hl,(lnptr)
	call	skipbl
	ld	de,0
	ld	c,0
gh1:	ld	a,(hl)		; get next char
	call	delim
	jr	z,gh2		; note no CY
	call	hexbin		; convert to binary
	jr	c,gh2
	inc	c		; count digit
	ex	de,hl
	call	addhex		; add digit, note CY on overflow
	ex	de,hl
	inc	hl
	jr	nc,gh1
gh2:	ld	(lnptr),hl
	ret

hexbin:	call	UCASE
	sub	'0'
	ret	c
	cp	10
	ccf
	ret	nc
	cp	11h
	ret	c
	cp	17h
	ccf
	ret	c
	sub	7
	ret

addhex:	add	hl,hl
	ret	c
	add	hl,hl
	ret	c
	add	hl,hl
	ret	c
	add	hl,hl
	ret	c
	add	a,l
	ld	l,a
	ret	nc
	ld	a,h
	adc	a,0
	ld	h,a
	ret

; Search for the command (nambuf) in the command table (address in HL).
; Returns A=0FFh if not found, or 0 if nambuf contains an empty string.
; Otherwise returns the 1-based command ordinal.

fndcmd:	ld	de,nambuf
	ld	a,(de)
	or	a
	ret	z
	ld	c,0		; keyword index
fcmd0:	ld	de,nambuf
	inc	c
fcmd1:	ld	a,(hl)
	call	UCASE
	ld	b,a
	ld	a,(de)
	cp	b		; match?
	jp	nz,fcmd2	; jump if not
	or	a		; end of both strings?
	ld	a,c
	ret	z		; return if yes, we have a match
	inc	hl
	inc	de
	jr	fcmd1		; else keep comparing
fcmd2:	ld	a,(hl)
	or	a		; end of keyword?
	ld	a,c
	ret	z		; return if yes, we have a match
fcmd4:	inc	hl		; else skip to end of keyword
	ld	a,(hl)
	or	a
	jr	nz,fcmd4
	inc	hl		; skip over null
	ld	a,(hl)
	or	a		; end of table?
	jr	nz,fcmd0	; try again if not
	ld	a,0FFh		; else return 'not found' flag
	ret

;-----------------------------------------------------------------------

domnt:	call	chkprv		; privileged command
	jp	c,SYSERR

	ld	hl,dfacp
	ld	de,ACPTDB+TD.NAME
	ld	bc,6
	ldir			; default ACP is SYSFCP

	ld	hl,(lnptr)
	call	PDN
	jp	c,baddev

	ld	(lnptr),hl
	ld	(dev),de
	ld	a,c
	ld	(dev+2),a

	xor	a
	ld	(optsw),a	; clear option switches
	call	getopt		; parse options
	ret	c		; on error, return

	ld	de,(dev)
	ld	a,(dev+2)
	ld	c,a
	ld	b,LUNMOU
	SC	.ALUN		; assign LUN
	jp	c,SYSERR

	ld	de,(dev)
	ld	a,(dev+2)
	ld	c,a
	ld	ix,($CTCB)
	KCALL	$FNDEV		; get UCB address
	jp	c,SYSERR
	KCALL	$REDIR		; follow any redirection links
	push	hl
	pop	ix
	bit	DV.MNT,(ix+U.CW)
	ld	hl,nmmsg
	jp	z,ERROR		; error if the unit is not mountable

	xor	a
	ld	(SYSLVL),a	; disable task dispatching
	ld	bc,ACPTDB+TD.NAME
	call	fndtsk		; find ACP in STD
	ex	de,hl
	ld	a,1
	ld	(SYSLVL),a	; re-enable task dispatching
	ld	a,d
	or	e
	ld	hl,npmsg
	jp	z,ERROR		; error if not found
	ld	hl,T.ATTR
	add	hl,de
	bit	TA.ACP,(hl)
	ld	hl,namsg
	jp	z,ERROR		; error if not an ACP

	xor	a
	ld	(SYSLVL),a	; disable task dispatching
	ld	l,(ix+U.ACP)
	ld	h,(ix+U.ACP+1)
	ld	(oldacp),hl
	ld	a,h
	or	l		; already registered with an ACP?
	jr	z,mnt1		; no, go ahead
	call	CPHLDE		; same as the requested one?
	ld	hl,ammsg
	jr	nz,mnt3		; error if not

mnt1:	ld	(ix+U.ACP),e	; set ACP in UCB
	ld	(ix+U.ACP+1),d
	ld	a,1
	ld	(SYSLVL),a	; re-enable task dispatching

	ld	hl,ACPTDB
	ld	bc,0		; don't connect to the ACP task
	SC	.RQST		; start the ACP if not already running
	jr	nc,mnt2		; continue on success (note BC still 0)
	cp	E.TRUN		; task already running (unstopped)?
	jr	z,mnt2		; continue if yes
	cp	E.TACT		; task active?
	jr	nz,mnt4		; no, error is fatal

mnt2:	ld	hl,qio1		; register unit with file processor
	SC	.QIO		; .QIOW
	jr	c,mnt4
	ld	a,(iosb)
	or	a		; check result
	jp	nz,SYSERR
	ld	a,(optsw)
	or	a
	call	nz,setopt
	ret

mnt3:	ld	a,1
	ld	(SYSLVL),a	; re-enable task dispatching
	jp	ERROR		; output error and return

mnt4:	ld	c,a
	xor	a
	ld	(SYSLVL),a	; disable task dispatching
	ld	hl,(oldacp)
	ld	(ix+U.ACP),l	; restore orig ACP
	ld	(ix+U.ACP+1),h
	ld	a,1
	ld	(SYSLVL),a	; re-enable task dispatching
	ld	a,c
	jp	SYSERR		; output error and return

baddev:	ld	hl,bdmsg
	jp	ERROR

bdmsg:	db	'Invalid device specification',0
nmmsg:	db	'Device not mountable',0
ammsg:	db	'Device already mounted',0
npmsg:	db	'ACP not installed',0
namsg:	db	'Task is not an ACP',0
dfacp:	db	'SYSFCP'

getopt:	ld	hl,(lnptr)
	call	skipbl
	or	a
	ret	z
	cp	'/'
	jp	nz,CMDERR
	inc	hl
	call	getcmd
	ld	(lnptr),hl
	ld	hl,optlst
	call	fndcmd		; search option in table
	dec	a
	jr	z,optacp
	dec	a
	jr	z,optfpro
	dec	a
	jr	z,optunl
	dec	a
	jr	z,optvi
	jp	CMDERR

optacp:	call	chkeq
	jp	nz,CMDERR
	ld	hl,(lnptr)
	call	skipbl
	call	getnam
	ld	(lnptr),hl
	ld	hl,nambuf
	ld	a,(hl)
	cp	' '
	jp	z,CMDERR
	ld	de,ACPTDB+TD.NAME
	ld	bc,6
	ldir			; set ACP name in TDB
	jr	getopt

optunl:	ld	hl,optsw
	set	SW.UNL,(hl)
	jr	getopt

optvi:	ld	hl,optsw
	set	SW.VI,(hl)
	jr	getopt

optfpro:call	chkeq
	jp	nz,CMDERR
	call	skipbl
	cp	'['		; check for [RWED,...] format
	jr	z,prot1
	ld	(lnptr),hl
	call	gethex		; else get hexadecimal value
	jp	c,CMDERR
	ld	a,c
	or	a		; can't be empty string
	jp	z,CMDERR
	jr	prot6

prot1:	ld	de,0
	ld	b,4		; number of groups
prot2:	inc	hl
	call	skipbl
	cp	']'
	jr	z,prot4
	cp	','		; group separator?
	jr	z,prot3		; yes
	call	gtrwed		; else get prot bit
	jp	c,CMDERR
	ld	a,e
	and	c		; already set?
	jp	nz,CMDERR	; error if yes
	ld	a,e
	or	c
	ld	e,a		; else set bit
	jr	prot2		; and loop to process next

prot3:	ex	de,hl
	add	hl,hl		; shift mask
	add	hl,hl
	add	hl,hl
	add	hl,hl
	ex	de,hl
	djnz	prot2
prot5:	jp	CMDERR

prot4:	djnz	prot5		; all groups must have been specified
	inc	hl
	ld	(lnptr),hl
	ex	de,hl
prot6:	ld	(dfpro),hl	; store result
	ld	hl,optsw
	set	SW.FPRO,(hl)
	jp	getopt

gtrwed:	call	UCASE
	ld	c,08h
	cp	'R'
	ret	z
	srl	c
	cp	'W'
	ret	z
	srl	c
	cp	'E'
	ret	z
	srl	c
	cp	'D'
	ret	z
	scf
	ret

chkeq:	ld	hl,(lnptr)
	call	skipbl
	cp	'='
	ret	nz
	inc	hl
	ld	(lnptr),hl
	ret

optlst:	db	'ACP',0		; specify alternate ACP
	db	'FPRO',0	; specify default file protection
	db	'UNL',0		; unlock write access to special files
	db	'VI',0		; display volume info
	db	0

; Post-process mount options

setopt:	push	ix
	pop	de
	call	fndvcb		; find VCB of mounted device
	jp	c,SYSERR	; should not happen
	ld	hl,optsw
	bit	SW.UNL,(hl)
	jr	z,s1
	set	MS.UNL,(iy+M.ST)
s1:	bit	SW.FPRO,(hl)
	jr	z,s2
	ld	de,(dfpro)
	ld	(iy+M.DFPR),e
	ld	(iy+M.DFPR+1),d
s2:	bit	SW.VI,(hl)
	call	nz,prinfo
	xor	a
	ret

prinfo:	ld	a,(TTLUN)
	ld	c,a
	call	ATTACH
	call	CRLF
	ld	hl,info
	call	PUTSTR		; 'volume information'
	call	CRLF
	inc	hl
	call	PUTSTR		; 'class'
	ex	de,hl
	ld	hl,class
	call	PUTSTR
	call	CRLF
	ex	de,hl
	inc	hl
	call	PUTSTR		; 'device'
	call	prdevn
	call	CRLF
	inc	hl
	call	PUTSTR		; 'volume label'
	call	prlbl
	call	CRLF
	inc	hl
	call	PUTSTR		; 'default'
	call	prbits
	call	CRLF
	inc	hl
	call	PUTSTR		; 'processor'
	call	pracp
	ld	c,CR
	call	PUTCH
	ld	a,(TTLUN)
	ld	c,a
	call	DETACH
	xor	a
	ret

info:	db	'Volume information',0
	db	'Class:        ',0
	db	'Device:       ',0
	db	'Volume label: ',0
	db	'Default:      ',0
	db	'Processor:    ',0

prdevn:	push	ix
	pop	de
	KCALL	$UCBDN
	push	bc
	ld	c,e
	call	PUTCH
	ld	c,d
	call	PUTCH
	pop	bc
	ld	a,c
	call	ADEC
	ld	c,':'
	jp	PUTCH

prlbl:	push	iy
	ex	(sp),hl
	ld	de,M.LABEL
	add	hl,de
	ld	b,16
prl1:	ld	a,(hl)
	or	a
	jr	z,prl2
	ld	c,a
	call	PUTCH
	inc	hl
	djnz	prl1
prl2:	pop	hl
	ret

prbits:	push	hl
	ld	c,'['
	call	PUTCH
	ld	e,(iy+M.DFPR)
	ld	d,(iy+M.DFPR+1)
	call	pp1
	ld	c,']'
	call	PUTCH
	pop	hl
	ret

pp1:	ld	a,d
	call	pp2
	ld	c,','
	call	PUTCH
	ld	a,e
pp2:	call	pp3
	ld	b,a
	ld	c,','
	call	PUTCH
	ld	a,b
pp3:	ld	hl,rwed
	ld	b,4
pp4:	rlca
	push	af
	ld	c,(hl)
	call	c,PUTCH
	pop	af
	inc	hl
	djnz	pp4
	ret

rwed:	db	'RWED'

pracp:	ld	e,(ix+U.ACP)
	ld	d,(ix+U.ACP+1)
	ld	a,d
	or	e
	ret	z
	push	hl
	ld	hl,T.NAME
	add	hl,de
	ld	b,6
prn1:	ld	c,(hl)
	call	PUTCH
	inc	hl
	djnz	prn1
	pop	hl
	ret

class:	db	'VOL180',0
	db	'Foreign',0

; Find task by name in STD. Assumes kernel database is already mapped.

fndtsk:	ld	hl,$TLIST
ftsk1:	ld	a,(hl)		; find task in STD
	inc	hl
	ld	h,(hl)
	ld	l,a
	or	h
	ret	z		; return HL=0 if not found
	push	bc
	push	hl
	ld	de,T.NAME	; name offset
	add	hl,de
	ld	d,6		; name length
ftsk2:	ld	a,(bc)
	cp	(hl)
	jr	nz,ftsk3	; jump if no match
	inc	hl
	inc	bc
	dec	d
	jr	nz,ftsk2	; loop unitl all chars processed
	pop	hl		; found, return this TCB
	pop	bc
	ret
ftsk3:	pop	hl
	ld	bc,T.TCBL
	add	hl,bc
	pop	bc
	jr	ftsk1

; Find volume control block by UCB. Assumes kernel database is mapped.

fndvcb:	ld	hl,($MVTBL)
fmnt1:	ld	a,h
	or	l		; end of list?
	ld	a,E.DEVNM
	scf
	ret	z		; yes, return error
	push	hl
	ld	bc,M.UCB
	add	hl,bc
	ld	a,(hl)
	cp	e
	jr	nz,fmnt2
	inc	hl
	ld	a,(hl)
	cp	d
	jr	nz,fmnt2
	pop	iy		; found
	xor	a
	ret
fmnt2:	pop	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	jr	fmnt1

; Check if user is privileged. Return with CY set and error code in A
; if not.

chkprv:	ld	hl,lcbbuf
	ld	c,I.USCB
	SC	.GIN
	ret	c
	ld	hl,lcbbuf+L.ST
	ld	a,E.PRIV
	bit	LS.PRV,(hl)
	scf
	ret	z
	xor	a
	ret

;-----------------------------------------------------------------------

	dseg

GDAT:	GCML$	cmdbuf,80,'MOU',LUNCML,2

cmdbuf:	ds	82
lnptr:	ds	2
dev:	ds	3
optsw:	ds	1
nambuf:	ds	7
excod:	ds	2
oldacp:	ds	2
dfpro:	ds	2
lcbbuf:	ds	LCBSZ

ACPTDB:	db	'SYSFCP'
	dw	0,0
	db	0,0,0
	db	'CO',0
	dw	0,0

qio1:	QIOW$	IO.MNT,LUNMOU,9,iosb
iosb:	ds	4

	ds	256		; stack space
stack	equ	$

	end	START
