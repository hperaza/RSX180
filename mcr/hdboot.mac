;**********************************************************************;
;                                                                      ;
;   DU: GIDE secondary boot loader, included in the INI task.          ;
;   Copyright (C) 2004-2020, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

;----------------------------------------------------------------------;
;                                                                      ;
;   DU: GIDE hard disk secondary boot loader                           ;
;                                                                      ;
;----------------------------------------------------------------------;

; Adapted from the hard disk boot loader for P112 CP/M 3 and MP/M
; (GIDE version)
;
; This is the secondary loader that resides on the boot block
; of the partition. Assumes that:
; - the hard disk has been initialized by the ROM BIOS,
; - the ROM is still mapped in,
; - the disk geometry and partition parameters passed by the primary
;   loader are correct.

	.Z180

Z80182	equ	1
	include Z180.INC

	public	HDBOOT,HDBTSZ

CR	equ	0Dh
LF	equ	0Ah

himem	equ	0C200h		; loader execution address
system	equ	100h		; system entry point
cmdline	equ	80h		; system command line, to pass boot device

romdat	equ	0FE00h		; start of ROM data area
romlen	equ	200h		; length of ROM data area
tmpbuf	equ	8200h		; temp buffer to save ROM data

; GIDE adresses

GIDE	equ	50h		; base address of GIDE board

IdeDOR	equ	GIDE+6		; Digital Output Register
IdeDat	equ	GIDE+8		; Data Register
IdeErr	equ	GIDE+9		; Error Register
IdeSCnt	equ	GIDE+0Ah	; Sector Count
IdeSNum	equ	GIDE+0Bh	; Sector Number
IdeCLo	equ	GIDE+0Ch	; Cylinder Low
IdeCHi	equ	GIDE+0Dh	; Cylinder High
IdeSDH	equ	GIDE+0Eh	; Drive and Head
IdeCmd	equ	GIDE+0Fh	; Command / Status

; Commands for IDE hard disk drives:

CmdRd	equ	20h		; Read Sector
CmdWr	equ	30h		; Write Sector
CmdInit	equ	91h		; Initialize Drive Params

;-----------------------------------------------------------------------

; The secondary boot sector is loaded and executed at 8000H.
; The incoming machine state is:
;	IX - Points to hard disk geometry parameters:
;		dw  cylinders
;		db  heads
;		db  sectors
;	IY - Points to boot partition parameters:
;		dw  start_cylinder
;		dw  size
;		db  type
;		db  active_flags
;	C  - Boot partition number
;	SP - Valid stack frame
 
	cseg

HDBOOT	equ	$

	.phase	8000h

boot:	jp	load

	dw	ldr - boot + hddat

load:	ld	hl,ldr+hddat	; copy parameters from primary loader
	ld	a,(ix+0)	; cylinders
	ld	(hl),a
	inc	hl
	ld	a,(ix+1)
	ld	(hl),a
	inc	hl
	ld	a,(ix+2)	; heads
	ld	(hl),a
	inc	hl
	ld	a,(ix+3)	; sectors
	ld	(hl),a
	inc	hl
	ld	a,(iy+0)	; partition start
	ld	(hl),a
	inc	hl
	ld	a,(iy+1)
	ld	(hl),a
	ld	a,c		; partition number
	ld	(ldr+datofs),a

	ld	hl,romdat
	ld	de,tmpbuf
	ld	bc,romlen
	ldir			; copy ROM data area

	in0	a,(RAMLBR)
	add	a,1Fh-1
	in0	c,(RAMUBR)
	cp	c		; require 128K minimum
	jp	nc,nomem

	ld	a,c		; use last memory page for loader
	sub	0Fh
	out0	(CBR),a		; set common page

	ld	hl,tmpbuf
	ld	de,romdat
	ld	bc,romlen
	ldir			; restore ROM data

	ld	hl,ldr
	ld	de,himem
	ld	bc,size
	ldir			; now copy the loader to high memory
	jp	loader		; and execute it

ldr:
	.dephase
	.phase	himem

loader:	in0	a,(RAMLBR)	; use all the available RAM, even the
	sub	8		;  shadowed ROM area, use a 1-page sliding
	out0	(BBR),a		;   window (8000-8FFF) to load the system

	ld	hl,blkbuf
	ld	de,1
	call	ldblk		; load volume id

	ld	hl,blkbuf
	ld	de,vid
	ld	b,6
chkid:	ld	a,(de)		; check signature
	cp	(hl)
	jp	nz,badv
	inc	hl
	inc	de
	djnz	chkid

	ld	hl,(blkbuf+8)
	ld	a,h
	cp	5		; filesystem level must be 5
	jp	nz,badv

	ld	de,(blkbuf+72)	; get LBN of system image file
	ld	a,d
	or	e
	jp	z,noboot
	exx
	ld	hl,(blkbuf+76)	; get size of system image file
	ld	a,h
	or	l
	exx
	jp	z,noboot

loopp:	ld	b,8		; blocks per page
	ld	hl,8000h	; start of page
loop:	call	ldblk		; load block
	inc	de		; next block
	exx
	dec	hl		; decrement block count
	ld	a,h		; exit loop if reached zero
	or	l
	exx
	jr	z,gosys
	djnz	loop		; continue until page is full
	in0	a,(BBR)
	inc	a		; next page
	out0	(BBR),a
	jr	loopp

gosys:	in0	a,(SCR)
	set	3,a		; disable ROM
	out0	(SCR),a
	ld	a,0C0h		; keep loader mapped in, we're not done yet
	out0	(CBAR),a
	in0	a,(RAMLBR)
	out0	(BBR),a		; map system in
	ld	hl,cmdline+1
	ld	(hl),'D'
	inc	hl
	ld	(hl),'U'
	inc	hl
	ld	a,(bdev)
	ld	(hl),a
	inc	hl
	ld	(hl),0
	jp	system		; start system

; Load absolute block number in DE to address in HL

ldblk:	push	bc
	push	de
	push	hl
	call	hdread		; read a block from hard disk
	jr	c,lderr
	ld	hl,blkbuf
	pop	hl		; restore load address
	ld	de,512
	add	hl,de		; advance pointer
	pop	de
	pop	bc
	ret

nomem:	ld	de,nmmsg
	jr	error

nmmsg:	db	'Not enough memory',CR,0

lderr:	ld	de,errmsg
	jr	error

errmsg:	db	'Load error',CR,0

noboot:	ld	de,nbmsg
	jr	error

nbmsg:	db	'No system',CR,0

badv:	ld	de,badvol
error:	ld	hl,prefx
	in0	a,(SCR)
	res	3,a		; enable the ROM in case it was shadowed
	out0	(SCR),a
	rst	20h
	ex	de,hl
	rst	20h
	rst	38h

prefx:	db	'BOOT -- ',0
badvol:	db	'Invalid volume type',CR,0

vid:	db	'VOL180'

;-----------------------------------------------------------------------

; GIDE I/O routines

; Compute the CHS Address and Read the specified Block.
; Enter: DE = block number,
;        HL = load address.
; Exit : CY set on errors.

hdread:	ld	bc,0		; Wait up to several seconds for drive ready
WtLp:	in0	a,(IdeCmd)	; Get the Busy Bit
	rla			; Is it BSY?
	jr	nc,HdOp0	; ..jump if Not
	push	bc		; Else Pause: Save overall Counter
	ld	b,0		;  Set max loop delay
hdel0:	djnz	hdel0		; ..pause..
	pop	bc		;    restore regs
	dec	bc
	ld	a,b
	or	c
	jr	nz,WtLp		;..loop if more time remains
	scf
	ret			; Else Return Timeout Error
HdOp0:	push	hl
	ld	hl,(hdoffs)	; Fetch Track offset for this partition
	ld	b,4
	xor	a
mul16:	add	hl,hl		; Multiply by 16
	adc	a,a		;   with 20-bit result
	djnz	mul16
	add	hl,de		; Add desired relative block #
	adc	a,0		;   to 20-bit resulting block Number
	ld	c,a

; This routine uses physical drive characteristics.
;
; The routine computes Head, Sector and Track from a sequential block number
; defined by: Trk_Offset * 16 + Block #.  The Physical characteristics
; needed are Number_of_Heads (nheads) and Sectors_per_Track (nspt).
;
; Computation of the CHS address is per:
;
;   Sector := (Block# MOD nspt)+1	(* Quotient1 := Block# DIV nspt *)
;   Head   := Quotient1 MOD nheads	(* Quotient2 := Quotient1 DIV nheads *)
;   Track  := Quotient2
;
; Prepare for Disk Read by Preloading all Registers

	ld	a,(nspt)	; Load Number of Sectors-per-Track
	ld	e,a
	call	Divide		; Divide CHL by E
	inc	a		;  Make Sector Number Base at 1
	out0	(IdeSNum),a	;   Send to GIDE Register
	ld	a,(nheads)	; Get Number of Heads
	ld	e,a
	call	Divide		; Divide CHL (Quotient from above) by E
	or	0A0h		;  add Fixed Pattern (Assuming Unit 0, Master)
	out0	(IdeSDH),a	;   Send to GIDE Register
	out0	(IdeCHi),h	; Send Hi-Byte of Cylinder Number to GIDE
	out0	(IdeCLo),l	;  and send Lo-Byte of Cylinder Number
	pop	hl		; Restore Load Address
	ld	A,0AAh
	out0	(IdeErr),a	; Activate Retries w/pattern in GIDE Err Reg
	ld	a,1		; One Block to Read
	out0	(IdeSCnt),a	;   pass to GIDE
	ld	b,5		; Give it a few tries
HDOps0:	push	bc		; Save Count
	call	GoGIDE		; Try Read/Write Operation
	pop	bc
	ret	z		; ..quit if Ok
	djnz	HDOps0		; Loop while tries remain
	scf			; Else return Error
	ret

;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
; The IDE/ATA Command Block layout is:
;
; Byte		 Format    R/W/V    Init    RdID    Power   Diag   PwrSet  Home
; 0 [ Command ]    50    20/30/40    91	     EC   E0/E1/E5   90    E2/E3    10
; 1 [ BitMap  ]    70     7C/(7E)    74      40	     00	     00	    04      40
; 2 [ Drv/Hd  ]   0AnH     0AnH    0AnH-1   0AnH     -	     -	    -      0An0
; 3 [ Cyl#(Hi)]   CylHi    CylHi    CylHi    -	     -	     -	    -       -
; 4 [ Cyl#(Lo)]   CylLo    CylLo    CylLo    -	     -	     -	    -       -
; 5 [ Sector# ]	   -	   Sctr	     -	     -	     -	     -	    -       -
; 6 [ Sctr Cnt]	   -	   SCnt     NSecs    -	     -	     -	  n*5Secs   -
; 7 [ Err Reg ]	   -	   (0AA)     -	     -	     -	     -	    -       -
; 8 [ Dgtl Out]	   -	    -	     -	     -	     -	     -	    -       -
;   Rslts/Stat:   Stat     Stat     Stat    Stat    SCnt    Err	    -      Stat
;		  Reg      Reg      Reg     Reg     Reg     Reg	           Reg
;
; Enter: GIDE Registers primed for Read/Write.
;	 (_cmdblk+0) has respective Read/Write Command
; Exit :  A = 0, Zero Flag Set (Z) if Ok, Zero Flag Clear (NZ) if Errors
;	  H = Error Byte value (If any)
;	  L = Status Byte value (If any)
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

; Raw GIDE Driver.
;   The Target is (hopefully) still ready from initial test
;   HL = load buffer

GoGIDE:	ld	bc,IdeDat	;   Pre-load Data Reg Adr in C, 0 in B

; Read a Sector from the Disk, or Disk Parameters to the Buffer

HRead:	ld	a,CmdRd
	call	Cmd_Wt		; Send Command in A, Return when Ready
HRead0:	in0	a,(IdeCmd)	; Get Status
	bit	3,a		; Ready?
	jr	z,HRead0	; ..loop if Not
	inir			; Read 512 bytes
	inir			;   in two-256 byte sequences
HdFini:	call	Wt_Rdy		; Wait for drive to become Ready
;; -- May need this with some Older Drives that send ECC bytes with no warning!
;;	bit	4,a		; DRQ Shifted?
;;	jr	z,HdFnQ		; ..jump if Not
;;	in0	a,(IdeDat)	; Else Read data reg (ECC Bytes?
;;	jr	HdFini		; ..loop til no more data

HdFnQ:	in0	a,(IdeCmd)	; Restore byte
	and	10001001B	; Busy, DRQ, or Error?
	ret	z		; ..exit if Ok
	scf			; Else Set Error Status
	ret

;================== SUPPORT ROUTINES ==================
; Divide 24-bit Number by 7-bit Number returning Quotient and Remainder
; Enter: CHL = 24-bit Unsigned Dividend
;	 E = 7-bit Unsigned Divisor
; Exit : CHL = 24-bit Quotient
;	 A = 8-bit Remainder
; Uses : AF,BC,HL

Divide:	ld	b,24+1		; 25 times thru Loop
	xor	a		; Clear Remainder and Carry
Div:	adc	a,a		; Shift Accum Left + Carry
	sbc	a,e		;  Subtract Divisor
	jr	nc,Div0		; ..jump if it Worked
	add	a,e		; Else restore Accum & Carry
Div0:	ccf			; Flip Carry Bit
	adc	hl,hl		;  Shift any Carry into
	rl	c		;   Dividend/Quotient
	djnz	Div		;  ..loop til Done
	ret

;.....
; Send command to the IDE Command Register, fall thru to wait for Ready Status

Cmd_Wt:	out0	(IdeCmd),a	;   Start Operation
			;..fall thru to wait for Ready
; Wait for Drive to become Ready (No Timeout)

Wt_Rdy:	in0	a,(IdeCmd)	; Get Drive Status
	rla			; Ready?
	jr	c,Wt_Rdy	; ..loop if Not
	ret

;-----------------------------------------------------------------------

; RAM variables:

hddat	equ	$ - loader

; Hard disk geometry definition.
; The following default values are for a WD Tidbit-60
; These can be overwritten by the boot installer.

ncyl:	dw	1024		; number of cylinders
nheads:	db	7		; number of heads
nspt:	db	17		; number of sectors per track
hdoffs:	dw	2000		; partition offset in UZI tracks

datofs	equ	$ - loader

bdev:	db	0

size	equ	$ - loader

blkbuf	equ	$

	.dephase

HDBTSZ	equ	$ - HDBOOT

	end
