;**********************************************************************;
;                                                                      ;
;   MCR-like command line interpreter for RSX180 - external commands.  ;
;   Copyright (C) 2014-2022, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

;   SET command

	.Z80

	cseg

	ident	'02.25'

	include	SYSTEM.INC
	include	SYSFN.INC
	include	TCB.INC
	include	PCB.INC
	include	FCB.INC
	include	DCB.INC
	include	LCB.INC
	include	QIO.INC
	include	BDRATES.INC
	include	ERRORS.INC

CR	equ	0Dh
LF	equ	0Ah
TAB	equ	09h
ESC	equ	1Bh

EFN	equ	1

	public	CMDSET

	extrn	PFN,PDN,ADEC,HLDEC,PUTCH,PUTSTR,UCASE,CPHLDE

	extrn	GETNS,GETCMD,FNDCMD,CHKEQ,CHKTI,GETDEV,STRLEN
	extrn	CMDERR,SYSERR,ERRMCR,GETDEC,CHKPRV,PDNAME,PNAM9
	extrn	FNDEV,FNDLGN,ERFAIL,GETN,GETFN,GETUN,PNAM

	extrn	LNPTR,CMDNAM,FNAME,SWVAL,DEVCW,TTDEV,LCBBUF,DEVST
	extrn	TMPDV2

KCALL	MACRO	addr
	call	$SWSTK
	dw	addr
	ENDM

;-----------------------------------------------------------------------

; SET /option...

CMDSET:	ld	de,(LNPTR)
	call	GETNS		; get argument
	cp	'/'		; it must be a switch
	jp	nz,CMDERR
	inc	de
	call	chkneg		; check for NO or -
	ld	(LNPTR),de
	call	GETCMD
	ld	hl,setopt
	call	FNDCMD		; search for switch name in table
	or	a
	jp	z,CMDERR	; switch name can't be empty
	dec	a
	cp	23		; ensure value is in range
	jp	nc,CMDERR
	rlca
	ld	c,a
	ld	b,0
	ld	hl,setfn
	add	hl,bc
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	jp	(hl)		; execute function

setopt	equ	$
msbro:	db	'BRO',0
msecho:	db	'ECHO',0
mslowr:	db	'LOWER',0
mscrt:	db	'CRT',0
msansi:	db	'ANSI',0
	db	'LOGON',0
msslav:	db	'SLAVE',0
mspriv:	db	'PRIV',0
mspub:	db	'PUB',0
msspd:	db	'SPEED',0
msdir:	db	'DIR',0
mshost:	db	'HOST',0
	db	'NODE',0
mspool:	db	'POOL',0
mspar:	db	'PAR',0
	db	'TOP',0
	db	'COLOG',0
msrndc:	db	'RNDC',0
msrndh:	db	'RNDH',0
msrndl:	db	'RNDL',0
msswpc:	db	'SWPC',0
msswpr:	db	'SWPR',0
msguic:	db	'UIC',0
	db	0

setfn:	dw	stbro,stecho,stlowr,stcrt,stansi,stlogn,stslav
	dw	stpriv,stpub,stspd,stdir,sthost,sthost,stpool
	dw	stpar,sttop,stlog,strndc,strndh,strndl,stswpc
	dw	stswpr,stuic

chkneg:	xor	a
	ld	(negsw),a
	ld	a,(de)
	cp	'-'
	jr	z,n1
	call	UCASE
	cp	'N'
	ret	nz
	inc	de
	ld	a,(de)
	dec	de
	call	UCASE
	cp	'O'
	ret	nz
	inc	de
n1:	inc	de
	ld	a,1
	ld	(negsw),a
	ret

stecho:	; SET /ECHO

	call	CHKEQ		; '=' present?
	jr	nz,shecho
	ld	hl,(LNPTR)
	call	PDN		; parse device name
	jp	c,CMDERR
	push	bc
	ld	c,1
	SC	.SUPER
	pop	bc
	jp	c,SYSERR
	ld	ix,($CTCB)	; needed for TI:
	KCALL	$FNDEV		; get UCB address
	jr	c,ster1
	push	hl
	pop	ix		; IX = UCB address
	ex	de,hl
	KCALL	$UCBDN
	ld	(TMPDV2),de
	ld	a,c
	ld	(TMPDV2+2),a	; if terminal is not TI:, then user
	call	CHKTI		;  must be privileged
	jr	c,ster1
	bit	DV.TTY,(ix+U.CW); unit is a terminal?
	jr	z,ster2		; error if not
	ld	l,TC.NEC	; L = characteristic bit number
setn:	ld	a,(negsw)
setv:	ld	h,a		; H = state
	ld	de,(TMPDV2)
	ld	a,(TMPDV2+2)
	ld	c,a		; DE-C = terminal name
	call	TTSET
	jr	c,ster1
ste2:	ld	c,0
	SC	.SUPER
	ret

ster1:	call	SYSERR
	jr	ste2

ster2:	ld	hl,errnt
	call	ERRMCR
	jr	ste2

errnt:	db	'Not a terminal device',0

shecho:	xor	a
	set	TC.NEC,a
	ld	(SWVAL),a
	ld	hl,chkexo	; matching routine address
	ld	de,msecho
	call	shds
	ret

chkexo:	ld	hl,(DEVCW)
	bit	DV.TTY,l
	scf
	ret	z
	ld	a,(SWVAL)
	and	h
	ld	c,a
	ld	a,(negsw)
	or	a
	jr	z,ckexo1
	ld	a,c
	or	a
	ret	nz
	scf
	ret
ckexo1:	ld	a,c
	or	a
	ret	z
	scf
	ret	

stlowr:	; SET /LOWER

	call	CHKEQ		; '=' present?
	jr	nz,shlowr
	ld	hl,(LNPTR)
	call	PDN		; parse device name
	jp	c,CMDERR
	push	bc
	ld	c,1
	SC	.SUPER
	pop	bc
	jp	c,SYSERR
	ld	ix,($CTCB)	; needed for TI:
	KCALL	$FNDEV		; get UCB address
	jp	c,ster1
	push	hl
	pop	ix		; IX = UCB address
	ex	de,hl
	KCALL	$UCBDN
	ld	(TMPDV2),de
	ld	a,c
	ld	(TMPDV2+2),a	; if terminal is not TI:, then user
	call	CHKTI		;  must be privileged
	jp	c,ster1
	bit	DV.TTY,(ix+U.CW); unit is a terminal?
	jp	z,ster2		; error if not
	ld	l,TC.SMR	; L = characteristic bit number
setp:	ld	a,(negsw)
	cpl
	and	01h
	jp	setv		; finish via common code

shlowr:	xor	a
	set	TC.SMR,a
	ld	(SWVAL),a
	ld	hl,chktsl	; matching routine address
	ld	de,mslowr
	call	shds
	ret

stcrt:	; SET /CRT

	call	CHKEQ		; '=' present?
	jr	nz,shcrt
	ld	hl,(LNPTR)
	call	PDN		; parse device name
	jp	c,CMDERR
	push	bc
	ld	c,1
	SC	.SUPER
	pop	bc
	jp	c,SYSERR
	ld	ix,($CTCB)	; needed for TI:
	KCALL	$FNDEV		; get UCB address
	jp	c,ster1
	push	hl
	pop	ix		; IX = UCB address
	ex	de,hl
	KCALL	$UCBDN
	ld	(TMPDV2),de
	ld	a,c
	ld	(TMPDV2+2),a	; if terminal is not TI:, then user
	call	CHKTI		;  must be privileged
	jp	c,ster1
	bit	DV.TTY,(ix+U.CW); unit is a terminal?
	jp	z,ster2		; error if not
	ld	l,TC.SCP	; L = characteristic bit number
	jr	setp		; continue via common code

shcrt:	xor	a
	set	TC.SCP,a
	ld	(SWVAL),a
	ld	hl,chktsl	; matching routine address
	ld	de,mscrt
	call	shds
	ret

stansi:	; SET /ANSI

	call	CHKEQ		; '=' present?
	jr	nz,shansi
	ld	hl,(LNPTR)
	call	PDN		; parse device name
	jp	c,CMDERR
	push	bc
	ld	c,1
	SC	.SUPER
	pop	bc
	jp	c,SYSERR
	ld	ix,($CTCB)	; needed for TI:
	KCALL	$FNDEV		; get UCB address
	jp	c,ster1
	push	hl
	pop	ix		; IX = UCB address
	ex	de,hl
	KCALL	$UCBDN
	ld	(TMPDV2),de
	ld	a,c
	ld	(TMPDV2+2),a	; if terminal is not TI:, then user
	call	CHKTI		;  must be privileged
	jp	c,ster1
	bit	DV.TTY,(ix+U.CW); unit is a terminal?
	jp	z,ster2		; error if not
	ld	l,TC.ANS	; L = characteristic bit number
	jp	setp		; continue via common code

shansi:	xor	a
	set	TC.ANS,a
	ld	(SWVAL),a
	ld	hl,chktsl	; matching routine address
	ld	de,msansi
	call	shds
	ret

stbro:	; SET /BRO

	call	CHKEQ		; '=' present?
	jr	nz,shbro	; jump if not
	ld	hl,(LNPTR)
	call	PDN		; parse device name
	jp	c,CMDERR
	call	FNDEV		; get the physical device name
	jp	c,SYSERR
	ld	(TMPDV2),de
	ld	a,c
	ld	(TMPDV2+2),a
	call	CHKTI		; if terminal is not TI:, then user
	jp	c,SYSERR	;  must be privileged
	ld	c,1
	SC	.SUPER
	jp	c,SYSERR
	ld	l,TC.NBR	; L = characteristic bit number
	jp	setn		; finish via common code

shbro:	xor	a
	set	TC.NBR,a
	ld	(SWVAL),a
	ld	hl,chkexo	; matching routine address
	ld	de,msbro
	call	shds
	ret

stpriv:	; SET /PRIV

	call	CHKEQ		; '=' present?
	jr	nz,shp1		; jump if not
	call	CHKPRV
	jp	c,SYSERR
	ld	hl,(LNPTR)
	call	PDN		; parse device name
	jp	c,CMDERR
	call	FNDEV		; get the physical device name
	jp	c,SYSERR
	ld	(TMPDV2),de
	ld	a,c
	ld	(TMPDV2+2),a
	ld	c,1
	SC	.SUPER
	jp	c,SYSERR
	call	FNDLGN		; find session
	jr	nc,stp3
	ld	hl,sserr
	call	ERRMCR
	jr	stp2
stp3:	ld	a,(negsw)	; /nopriv?
	or	a
	jr	nz,stp1		; jump if yes
	set	LS.PRV,(iy+L.ST)
	jr	stp2
stp1:	res	LS.PRV,(iy+L.ST)
stp2:	ld	c,0
	SC	.SUPER
	ret

shp1:	ld	hl,cktprv	; matching routine address
	ld	de,mspriv
	call	shds
	ret

cktprv:
  IF 0
	call	devlog		; get session if terminal
	ret	c
	ld	a,(negsw)
	add	a,0FFh
	sbc	a,a		; a=0FFh if negsw<>0 else a=0
	xor	(iy+L.ST)
	bit	LS.PRV,a	; privileged?
	ret	nz		; return if yes (note CY is clear)
	scf
	ret
  ELSE
	ld	bc,(DEVCW)
	bit	DV.TTY,c	; terminal device?
	scf
	ret	z		; return CY if not
	call	FNDLGN		; find session
	ret	c
	ld	a,(negsw)
	add	a,0FFh
	sbc	a,a		; a=0FFh if negsw<>0 else a=0
	xor	(iy+L.ST)
	bit	LS.PRV,a	; privileged?
	ret	nz		; return if yes (note CY is clear)
	scf
	ret
  ENDIF

sserr:	db	'Session not found',0

stpub:	; SET /PUB

	call	CHKEQ		; '=' present?
	jr	nz,shpub
	call	CHKPRV
	jp	c,SYSERR
	ld	hl,(LNPTR)
	call	PDN		; parse device name
	jp	c,CMDERR
	push	bc
	ld	c,1
	SC	.SUPER
	pop	bc
	jp	c,SYSERR
	ld	ix,($CTCB)
	KCALL	$FNDEV		; get UCB address
	jr	c,stpbe1
	push	hl
	pop	ix		; IX = UCB address
	ex	de,hl
	KCALL	$UCBDN
	ld	(TMPDV2),de
	ld	a,c
	ld	(TMPDV2+2),a
	bit	US.MNT,(ix+U.ST); unit mounted?
	jr	nz,stpbe2	; error if yes
	ld	a,(negsw)	; /nopub?
	or	a
	jr	nz,stpb3	; jump if yes
	set	US.PUB,(ix+U.ST)
	jr	stpb2
stpb3:	res	US.PUB,(ix+U.ST)
stpb2:	ld	c,0
	SC	.SUPER
	ret

stpbe1:	call	SYSERR
	jr	stpb2

stpbe2:	ld	hl,errdm
	call	ERRMCR
	jr	stpb2

errdm:	db	'Device mounted',0

shpub:	xor	a
	set	US.PUB,a
	ld	(SWVAL),a
	ld	hl,chkdvs	; matching routine address
	ld	de,mspub
	call	shds
	ret

chkdvs:	ld	hl,DEVST
	ld	a,(SWVAL)
	and	(hl)
	ld	c,a
	ld	a,(negsw)
	or	a
	jr	nz,ckds1
	ld	a,c
	or	a
	ret	nz
	scf
	ret
ckds1:	ld	a,c
	or	a
	scf
	ret	nz
	or	a
	ld	a,(SWVAL)
	bit	US.MNT,a
	ret	nz
	scf
	ret	

stslav:	; SET /SLAVE

	call	CHKEQ		; '=' present?
	jp	nz,shslav
	ld	hl,(LNPTR)
	call	PDN		; parse device name
	jp	c,CMDERR
	push	bc
	ld	c,1
	SC	.SUPER
	pop	bc
	jp	c,SYSERR
	ld	ix,($CTCB)	; needed for TI:
	KCALL	$FNDEV		; get UCB address
	jp	c,ster1
	push	hl
	pop	ix		; IX = UCB address
	ex	de,hl
	KCALL	$UCBDN
	ld	(TMPDV2),de
	ld	a,c
	ld	(TMPDV2+2),a	; if terminal is not TI:, then user
	call	CHKTI		;  must be privileged
	jp	c,ster1
	bit	DV.TTY,(ix+U.CW); unit is a terminal?
	jp	z,ster2		; error if not
	ld	l,TC.SLV	; L = characteristic bit number
	jp	setp		; finish via common code

shslav:	xor	a
	set	TC.SLV,a
	ld	(SWVAL),a
	ld	hl,chktsl	; matching routine address
	ld	de,msslav
	call	shds
	ret

chktsl:	ld	hl,(DEVCW)
	bit	DV.TTY,l
	scf
	ret	z
	ld	a,(SWVAL)
	and	h
	ld	c,a
	ld	a,(negsw)
	or	a
	jr	nz,cksl1
	ld	a,c
	or	a
	ret	nz
	scf
	ret
cksl1:	ld	a,c
	or	a
	ret	z
	scf
	ret	

shds:	ld	(devmfn),hl	; save matching routine address
	ex	de,hl
	ld	(optnam),hl	; save message address
	ld	c,1
	SC	.SUPER		; enter supervisor mode
	jp	c,ERFAIL

	ld	c,CR
	call	PUTCH
	ld	hl,($PHYDV)	; get head of physical devices list
shds1:	ld	a,h
	or	l		; end of list?
	jr	z,shds5		; exit if yes
	push	hl
	pop	ix
	ld	e,(ix+D.UCBL)	; get UCB list head into DE
	ld	d,(ix+D.UCBL+1)
shds2:	ld	a,d
	or	e		; end of UCB list?
	jr	z,shds4		; exit loop if yes
	call	GETDEV		; else get device name, status and control word
	call	shds6		; match against switch option
	jr	c,shds3		; skip if no match
	ld	hl,(optnam)
	call	optmsg
	ld	hl,(TMPDV2)
	ld	c,l
	call	PUTCH		; show physical device name
	ld	c,h
	call	PUTCH
	ld	a,(TMPDV2+2)
	call	ADEC
	ld	c,':'
	call	PUTCH
	ld	c,CR
	call	PUTCH
shds3:	ld	hl,U.LNK
	add	hl,de
	ld	e,(hl)		; get address of next UCB into DE
	inc	hl
	ld	d,(hl)
	jr	shds2		; loop until all units processed
shds4:	ld	l,(ix+D.LNK)
	ld	h,(ix+D.LNK+1)
	jr	shds1

shds5:	ld	c,0
	SC	.SUPER		; leave supervisor mode
	ret

shds6:	push	hl
	ld	hl,(devmfn)	; get routine address
	ex	(sp),hl		; push routine address, restore HL
	ret			; exec routine

optmsg:	ld	c,LF
	call	PUTCH
	push	hl
	ld	a,(negsw)
	or	a
	ld	hl,msno
	call	nz,PUTSTR
	pop	hl
	call	PUTSTR
	ld	c,'='
	jp	PUTCH

msno:	db	'NO',0

stlogn:	; SET /LOGON

	; check that nothing follows command?
	call	CHKPRV
	jp	c,SYSERR
	ld	c,1
	SC	.SUPER		; enter supervisor mode
	jp	c,SYSERR
	ld	hl,$MFLGS
	ld	a,(negsw)	; /nologon?
	or	a
	jr	nz,stl1		; jump if yes
	set	0,(hl)		; set logon bit on MCR flags
	jr	stl2
stl1:	res	0,(hl)		; clear logon bit on MCR flags
stl2:	ld	c,0
	SC	.SUPER
	ret

stspd:	; SET /SPEED

	ld	a,(negsw)	; can't be negated
	or	a
	jp	nz,CMDERR
	call	CHKEQ		; '=' present?
	jr	nz,shtisp	; no, display speed of user's terminal TI:
	ld	hl,(LNPTR)
	call	PDN		; parse device name
	ld	(LNPTR),hl
	jp	c,CMDERR
	push	bc
	ld	c,1
	SC	.SUPER
	pop	bc
	jp	c,SYSERR
	ld	ix,($CTCB)	; needed for TI:
	KCALL	$FNDEV		; get UCB address
	jp	c,ster1
	push	hl
	pop	ix		; IX = UCB address
	ex	de,hl
	KCALL	$UCBDN
	ld	(TMPDV2),de
	ld	a,c
	ld	(TMPDV2+2),a	; if terminal is not TI:, then user
	call	CHKTI		;  must be privileged
	jp	c,ster1
	bit	DV.TTY,(ix+U.CW); unit is a terminal?
	jp	z,ster2		; error if not
	call	GETCMD
	ld	hl,bdrtbl	; address of baud rate table
	call	FNDCMD		; search speed in table
	or	a		; no speed specified?
	jr	z,shspd0	; then display speed for the specified terminal
	cp	S.115K2+1
	jp	nc,CMDERR	; ensure value is in range
	ld	l,TC.SPD	; L = characteristic name
	jp	setv		; continue via common code

shspd0:	ld	c,0
	SC	.SUPER
	jr	shspd

shtisp:	ld	hl,'TI'
	ld	(TMPDV2),hl
	xor	a
	ld	(TMPDV2+2),a
shspd:	ld	c,1
	SC	.SUPER
	jp	c,SYSERR
	ld	de,(TMPDV2)
	ld	a,(TMPDV2+2)
	ld	c,a
	ld	ix,($CTCB)	; needed for TI:
	KCALL	$FNDEV		; get UCB address
	jp	c,ster1
	push	hl
	pop	ix		; IX = UCB address
	bit	DV.TTY,(ix+U.CW); unit is a terminal?
	jp	z,ster2		; error if not

UX.BDR	equ	UCBSZ + 0	; must match value in devtt.mac

	ld	a,(ix+UX.BDR)	; fetch baudrate code
	ld	(temp),a
	ld	c,0
	SC	.SUPER
	ld	hl,msspd
	call	optmsg
	ld	hl,(TMPDV2)
	ld	c,l
	call	PUTCH		; show physical device name
	ld	c,h
	call	PUTCH
	ld	a,(TMPDV2+2)
	call	ADEC
	ld	c,':'
	call	PUTCH
	ld	hl,bdrmsg	; point to message table
	ld	a,(temp)
	or	a
	jr	z,shsp2		; S.0 is "Unknown"
	cp	S.115K2+1
	jr	nc,shsp2	; and so is S.UNK and anything above S.115K2
	ld	bc,0
	ld	e,a		; get baudrate code into E
	xor	a		; null delimites strings in table
shsp1:	cpir			; skip string, point to start of next
	dec	e		; decrement counter
	jr	nz,shsp1	; and loop
shsp2:	call	PUTSTR		; output baudrate
	ld	c,CR
	jp	PUTCH

bdrmsg:	db	'Unknown',0
bdrtbl:	db	'50',0
	db	'75',0
	db	'110',0
	db	'134',0
	db	'150',0
	db	'200',0
	db	'300',0
	db	'600',0
	db	'1200',0
	db	'1800',0
	db	'2000',0
	db	'2400',0
	db	'3600',0
	db	'4800',0
	db	'7200',0
	db	'9600',0
	db	'14400',0
	db	'19200',0
	db	'28800',0
	db	'38400',0
	db	'57600',0
	db	'76800',0
	db	'115200',0
	db	0

stdir:	; SET /DIR

	ld	a,(negsw)
	or	a
	jp	nz,CMDERR
	ld	de,(LNPTR)
	call	GETNS
	ld	(LNPTR),de	; end of command?
	jr	z,shwcd		; display current dir if yes
	call	CHKEQ		; else require '='
	jp	nz,CMDERR
	call	GETFN		; get directory name
	ld	hl,FNAME
	ld	a,(hl)
	or	a		; valid?
	jp	z,CMDERR	; error if not
	ld	de,dirext
	call	addext
	ld	hl,FNAME
	ld	ix,fdb
	call	PFN
	ld	a,E.BADF
	jr	c,std1
	ld	a,(ix+F.ATTR)
	and	FN.DIR
	ld	hl,fdb+F.DIR
	jr	nz,std2
	ld	hl,fdb+F.NAME
std2:	ld	c,SD.TI
	SC	.SDIR
	ret	nc
std1:	call	SYSERR
	ret

shwcd:	ld	hl,CMDNAM	; use CMDNAM as dest buffer
	ld	c,GD.TI
	SC	.GDIR		; get current dir name
	jp	c,SYSERR
	ld	a,(hl)		; current dir set?
	or	a
	ret	z		; return if not
	push	hl
	ld	hl,msdir
	call	optmsg
	pop	hl
	call	PDNAME		; else display name
	ld	c,CR
	call	PUTCH
	ret

addext:	ld	hl,FNAME
ade0:	ld	a,(hl)
	cp	'.'
	ret	z
	or	a
	jr	z,ade1
	inc	hl
	jr	ade0
ade1:	ld	(hl),'.'
	inc	hl
	ex	de,hl
	ld	bc,3
	ldir
	ex	de,hl
	ld	(hl),0
	ret

dirext:	db	'DIR'
tskext:	db	'TSK'

stuic:	; SET /UIC

	ld	a,(negsw)
	or	a
	jp	nz,CMDERR
	ld	de,(LNPTR)
	call	GETNS
	ld	(LNPTR),de	; end of command?
	jr	z,shwuic	; display current UIC if yes
	call	CHKEQ		; else require '='
	jp	nz,CMDERR
	ld	c,'['
	call	stuic1		; test delimiter and get group ID
	jp	c,CMDERR
	ld	(temp),a
	ld	c,','
	call	stuic1		; test delimiter and get user ID
	jp	c,CMDERR
	ld	(temp+1),a
	ld	de,(LNPTR)
	call	GETNS
	cp	']'
	jp	nz,CMDERR
	call	CHKPRV		; user must be privileged to change UIC
	jp	c,SYSERR
	ld	c,1
	SC	.SUPER
	jp	c,SYSERR
	ld	ix,($CTCB)
	ld	l,(ix+T.TI)
	ld	h,(ix+T.TI+1)
	ld	bc,U.LCB
	add	hl,bc
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ld	bc,L.USR
	add	hl,bc
	ld	de,(temp)
	ld	(hl),e		; set effective UIC
	inc	hl
	ld	(hl),d
	ld	c,0
	SC	.SUPER
	ret

stuic1:	ld	de,(LNPTR)
	call	GETNS		; get next char
	cp	c		; delimiter?
	scf
	ret	nz		; return CY set if not
	inc	de
	ld	(LNPTR),de
	call	GETDEC		; get value
	ld	a,h
	or	a		; ensure 8-bit
	scf
	ret	nz		; else return with CY set
	or	l
	ret	nz
	scf			; can't be zero, either
	ret

shwuic:	ld	hl,LCBBUF
	ld	c,I.USCB
	SC	.GIN
	jp	c,SYSERR
	ld	hl,msguic
	call	optmsg
	ld	c,'['
	call	PUTCH
	ld	a,(LCBBUF+L.GRP)
	call	ADEC
	ld	c,','
	call	PUTCH
	ld	a,(LCBBUF+L.USR)
	call	ADEC
	ld	c,']'
	call	PUTCH
	ld	c,CR
	call	PUTCH
	ret

sthost:	; SET /HOST

	ld	a,(negsw)
	or	a
	jp	nz,CMDERR
	ld	de,(LNPTR)
	call	GETNS
	ld	(LNPTR),de	; end of command?
	jr	z,shwhst	; display current host name if yes
	call	CHKEQ		; else require '='
	jp	nz,CMDERR
	call	CHKPRV
	jp	c,SYSERR	; setting host name requires privileges
	call	GETUN		; get host name
 IF 0
	ld	hl,CMDNAM
	ld	a,(hl)
	cp	' '		; valid?
	jp	z,CMDERR	; error if not
 ENDIF
	ld	c,1
	SC	.SUPER		; enter supervisor mode
	jp	c,SYSERR
	ld	hl,CMDNAM
	ld	de,$HOSTN
	ld	bc,9
	ldir			; set host name
	ld	c,0
	SC	.SUPER		; exit supervisor mode
	ret

shwhst:	ld	hl,CMDNAM	; use CMDNAM as dest buffer
	ld	c,I.HOST
	SC	.GIN		; get host name
	jp	c,SYSERR
  IF 0
	ld	a,(hl)		; host name set?
	cp	' '
	ret	z		; return if not
  ENDIF
	push	hl
	ld	hl,mshost
	call	optmsg
	pop	hl
	call	PNAM9		; else display name
	ld	c,CR
	call	PUTCH
	ret

stpool:	; SET /POOL

	ld	a,(negsw)
	or	a
	jp	nz,CMDERR
	ld	de,(LNPTR)
	call	GETNS
	ld	(LNPTR),de	; end of command?
	jr	z,shpool	; display pool statistics if yes
	call	CHKEQ		; else require '='
	jp	nz,CMDERR
	call	CHKPRV
	jp	c,SYSERR	; setting pool limit requires privileges
;;	call	getval		; get top address
;;	ld	c,1
;;	SC	.SUPER		; enter supervisor mode
;;	jp	c,SYSERR
;;	...
;;	ld	c,0
;;	SC	.SUPER		; exit supervisor mode
	ret

shpool:	ld	hl,0
	ld	(ptotal),hl	; clear variables
	ld	(plrgst),hl
	ld	c,1
	SC	.SUPER		; enter supervisor mode
	jp	c,SYSERR

	ld	hl,(SYSTOP)
	ld	(plimit),hl
	ld	hl,($POOL)
	xor	a
	ld	(SYSLVL),a
sp1:	ld	a,h
	or	l		; no (more) free blocks?
	jr	z,sp3		; return then
	ld	e,(hl)		; get link to next block
	inc	hl
	ld	d,(hl)
	inc	hl
	push	de
	ld	e,(hl)		; get free block size
	inc	hl
	ld	d,(hl)
	ld	hl,(ptotal)	; collect statistics
	add	hl,de
	ld	(ptotal),hl
	ld	hl,(plrgst)
	ex	de,hl
	call	CPHLDE
	jr	nc,sp2
	ld	(plrgst),hl
sp2:	pop	hl
	jr	sp1		; process next block

sp3:	ld	a,1
	ld	(SYSLVL),a
	ld	c,0
	SC	.SUPER
	ld	hl,mspool
	call	optmsg
	ld	hl,(plimit)
	xor	a
	call	HLDEC
	ld	c,':'
	call	PUTCH
	ld	hl,(plrgst)
	xor	a
	call	HLDEC
	ld	c,':'
	call	PUTCH
	ld	hl,(ptotal)
	xor	a
	call	HLDEC
	ld	c,CR
	call	PUTCH
	ret

stpar:	; SET /PAR

	ld	a,(negsw)
	or	a		; /NOPAR?
	jp	nz,delpar	; yes, delete partition
	ld	iy,wcmask
	ld	(iy),a		; clear wildcard mask
	ld	de,(LNPTR)
	call	GETNS
	call	CHKEQ		; require '='
	jp	nz,CMDERR
	call	GETUN		; get partition name
	ld	hl,CMDNAM
	ld	a,(hl)
	cp	' '
	jp	z,CMDERR	; can't be empty
	ld	de,pname
	ld	bc,6
	ldir			; make a local copy
	ld	de,(LNPTR)
	call	GETNS
	jp	z,shwpar	; if nothing follows name, display details
	call	CHKPRV
	jp	c,SYSERR	; creating partitions requires privileges
	ld	a,(de)
	cp	':'
	jp	nz,CMDERR
	inc	de
	call	GETNS
	jp	z,CMDERR
	cp	'*'		; wildcard base?
	jr	nz,spar1	; no
	inc	de
	ld	(LNPTR),de
	set	0,(iy)		; else set flag
	jr	spar2
spar1:	ld	(LNPTR),de
	call	GETDEC		; get base
	ld	(base),hl
	ld	a,h		; validate
	or	a
	ld	a,E.INV
	jp	nz,SYSERR
spar2:	call	GETNS
	cp	':'
	jp	nz,CMDERR
	inc	de
	call	GETNS
	jp	z,CMDERR
	cp	'*'		; wildcard size?
	jr	nz,spar3	; no
	inc	de
	ld	(LNPTR),de
	set	1,(iy)		; else set flag
	jr	spar4
spar3:	ld	(LNPTR),de
	call	GETDEC		; get size
	ld	(size),hl
	ld	a,h		; validate
	or	a
	ld	a,E.INV
	jp	nz,SYSERR
	ld	a,h
	or	l		; can't be zero
	ld	a,E.INV
	jp	z,SYSERR
spar4:	call	GETNS
	cp	':'
	jp	nz,CMDERR
	inc	de
	ld	(LNPTR),de
	ld	b,6
	call	GETN		; get type
	ld	hl,ptyp1
	call	FNDCMD
	or	a
	jp	z,CMDERR	; can't be empty
	cp	0FFh
	jp	z,CMDERR
	ld	(type),a

	ld	c,1
	SC	.SUPER
	jp	c,SYSERR
	xor	a
	ld	(SYSLVL),a

	ld	hl,pname
	ld	de,$SCRBF
	push	de
	ld	bc,6
	ldir
	pop	bc
	KCALL	$FNPAR		; make sure partition does not exist
	ccf
	ld	hl,pemsg
	ld	a,0
	jr	c,spar5
	call	newpar		; create partition
	jr	c,spar5
	xor	a
spar5:	push	af
	ld	a,1
	ld	(SYSLVL),a
	ld	c,0
	SC	.SUPER
	pop	af
	ret	nc
	or	a
	jp	nz,SYSERR
	ld	a,h
	or	l
	jp	nz,ERRMCR
	ret

newpar:	ld	iy,wcmask
	bit	0,(iy)		; wilcard base?
	jr	z,np1		; branch if not
	ld	hl,16		; else default to 16 (skips kernel partition)
	ld	(base),hl
np1:	bit	1,(iy)		; wildcard size?
	jr	z,np2		; branch if not
	ld	hl,($MEMSZ)	; else default to max
	srl	h
	rr	l
	srl	h
	rr	l
	ld	(size),hl

np2:	ld	hl,$PLIST	; scan main partition list
np3:	ld	(prev),hl	; remember address of 'prev' link
	ld	e,(hl)		; get pointer to next PCB in list
	inc	hl
	ld	d,(hl)
	ld	(next),de	; save address of next PCB
	ld	a,d
	or	e		; end of list?
	jp	z,np10		; exit loop if yes, create new partition @end

	ld	hl,P.BASE
	add	hl,de
	ld	c,(hl)		; get base of this partition
	inc	hl
	ld	b,(hl)
	ld	(pbase),bc
	ld	hl,P.SIZE
	add	hl,de
	ld	c,(hl)		; and its size
	inc	hl
	ld	b,(hl)
	ld	(psize),bc

	bit	0,(iy)		; wildcard base?
	jr	z,np6		; no

	; wildcard base, check for gap

	ld	hl,(pbase)
	ld	de,(base)
	call	CPHLDE		; pbase > base?
	jr	nc,np5		; no

	; gap found

	bit	1,(iy)		; wildcard size?
	jr	z,np4		; no

	; wildcard size, make the partition as large as the gap

	ld	hl,(pbase)
	ld	(size),hl	; size = pbase (base will be subtracted below)
	jr	np10		; exit loop

np4:	; size specified

	ld	hl,(pbase)
	ld	de,(base)
	or	a
	sbc	hl,de		; gap size = pbase - base
	ex	de,hl
	ld	hl,(size)
	call	CPHLDE
	jr	nc,np10		; exit loop if >= size (fits in gap)

np5:	ld	hl,(pbase)
	ld	de,(psize)
	add	hl,de
	ld	(base),hl	; new base = pbase + psize
	ld	a,h
	cp	10h
	ccf
	ld	hl,spmsg
	ld	a,0
	ret	c		; error if overflow
	jr	np9		; loop to process next PCB

np6:	; base specified

	ld	hl,(pbase)
	ld	de,(base)
	call	CPHLDE		; pbase > base?
	jr	nc,np8		; no

	bit	1,(iy)		; wildcard size?
	jr	z,np7		; no

	; wildcard size, make the partition as large as the gap

	ld	(size),hl	; size = pbase (base will be subtracted below)
	jr	np10		; exit loop

np7:	; size specified

	ld	hl,(pbase)
	ld	de,(base)
	or	a
	sbc	hl,de		; pbase - base
	ex	de,hl
	ld	hl,(size)
	call	CPHLDE
	jr	nc,np10		; exit loop if >= size (fits in gap)

	ld	hl,spmsg	; else return error (note CY set)
	ld	a,0
	ret

np8:	ld	de,(psize)
	add	hl,de		; pbase + psize
	ld	de,(base)
	call	CPHLDE
	jr	z,np9
	ld	hl,spmsg
	ld	a,0
	ret	c		; error if > base

np9:	ld	hl,(next)
	jp	np3		; loop

np10:	bit	1,(iy)		; wilcard size?
	jr	z,np11		; skip if yes

	ld	hl,(size)
	ld	de,(base)
	or	a
	sbc	hl,de		; size -= base
	ld	a,E.INV
	scf
	ret	z		; result can't be zero
	ld	(size),hl

np11:	ld	bc,PCBSZ
	KCALL	$ALLOC
	ret	c
	push	hl
	pop	ix
	ld	(ix+P.MAIN),l
	ld	(ix+P.MAIN+1),h
	ld	hl,(base)
	ld	(ix+P.BASE),l	; set partition base
	ld	(ix+P.BASE+1),h
	ld	hl,(size)
	ld	(ix+P.SIZE),l	; set partition size
	ld	(ix+P.SIZE+1),h
	push	ix
	pop	hl
	ld	de,P.NAME
	add	hl,de
	ex	de,hl
	ld	hl,pname
	ld	bc,6
	ldir			; set partition name
	xor	a
	ld	(ix+P.SUB),a	; subpartition list is initially empty
	ld	(ix+P.SUB+1),a
	ld	(ix+P.WAIT),a
	ld	(ix+P.WAIT+1),a
	ld	(ix+P.ATTR),a
	ld	(ix+P.STAT),a
	ld	(ix+P.TCB),a
	ld	(ix+P.TCB+1),a
	ld	hl,(next)
	ld	(ix+P.LNK),l	; set address of next PCB
	ld	(ix+P.LNK+1),h
	push	ix
	pop	de
	ld	hl,(prev)
	ld	(hl),e		; set link on prev PCB
	inc	hl
	ld	(hl),d
	ld	a,(type)
	dec	a		; system-controlled type?
	jr	nz,np12		; return if not
	set	PA.SYS,(ix+P.ATTR) ; else set PA.SYS bit
np12:	xor	a		; return success
	ret

ptyp1:	db	'SYS',0
ptyp2:	db	'TASK',0
	db	0

pemsg:	db	'Partition already exists',0
spmsg:	db	'Space used',0

shwpar:	ld	c,1
	SC	.SUPER
	jp	c,SYSERR
	ld	hl,pname
	ld	de,$SCRBF
	push	de
	ld	bc,6
	ldir
	pop	bc
	KCALL	$FNPAR
	jr	c,spar7
	ex	de,hl
	ld	hl,mspar
	call	optmsg
	ld	hl,P.NAME
	add	hl,de
	ld	b,6
	call	PNAM		; output name
	ld	c,':'
	call	PUTCH
	ld	hl,P.BASE
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	xor	a
	call	HLDEC		; output base
	ld	c,':'
	call	PUTCH
	ld	hl,P.SIZE
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	xor	a
	call	HLDEC		; output size
	ld	c,':'
	call	PUTCH
	ld	hl,P.ATTR
	add	hl,de
	bit	PA.SYS,(hl)
	ld	hl,ptyp1
	jr	nz,spar6	; branch if system-controlled
	ld	hl,ptyp2
spar6:	call	PUTSTR		; display status (SYS or TASK)
	ld	c,CR
	call	PUTCH
spar7:	push	af
	ld	c,0
	SC	.SUPER
	pop	af
	jp	c,SYSERR
	ret

delpar:	call	CHKPRV
	jp	c,SYSERR	; deleting partitions requires privileges
	ld	de,(LNPTR)
	call	GETNS
	call	CHKEQ		; require '='
	jp	nz,CMDERR
	call	GETUN		; get partition name
	ld	hl,CMDNAM
	ld	a,(hl)
	cp	' '
	jp	z,CMDERR	; can't be empty
	ld	c,1
	SC	.SUPER
	jp	c,SYSERR
	xor	a
	ld	(SYSLVL),a
	ld	de,$SCRBF
	push	de
	ld	bc,6
	ldir			; copy name to schratch buffer
	pop	bc
	KCALL	$FNPAR		; find partition by name
	jr	c,dp3		; error if not found
	push	de		; push prev ptr
	ex	de,hl		; get PCB address into DE
	ld	hl,$TLIST	; check task list
dp1:	ld	a,(hl)		; get TCB address
	inc	hl
	ld	h,(hl)
	ld	l,a
	or	h
	jr	z,dp2		; no tasks installed in the partition
	push	hl
	ld	bc,T.PCB
	add	hl,bc
	ld	a,(hl)		; get pointer to partition
	inc	hl
	ld	h,(hl)
	ld	l,a
	ld	bc,P.MAIN
	add	hl,bc
	ld	a,(hl)		; get main PCB address
	inc	hl
	ld	h,(hl)
	ld	l,a
	call	CPHLDE		; match?
	pop	hl
	ld	a,E.PBSY
	scf
	jr	z,dp2		; yes, partition is busy
	ld	bc,T.TCBL
	add	hl,bc
	jr	dp1		; loop to process next task
dp2:	ex	de,hl		; get PCB address back into HL
	pop	de		; restore prev ptr
	jr	c,dp3		; can't remove partition
	ld	a,(hl)		; unlink PCB
	ld	(de),a
	inc	hl
	inc	de
	ld	a,(hl)
	ld	(de),a
	dec	hl
	ld	de,PCBSZ
	KCALL	$FREE		; free PCB
	xor	a		; success
dp3:	push	af
	ld	a,1
	ld	(SYSLVL),a
	ld	c,0
	SC	.SUPER
	pop	af
	jp	c,SYSERR
	ret

sttop:	; SET /TOP

	ld	a,(negsw)
	or	a
	jp	nz,CMDERR	; can't be negated
	call	CHKPRV
	jp	c,SYSERR	; operation requires privileges
	ld	iy,wcmask
	ld	(iy),a		; clear wildcard mask
	ld	de,(LNPTR)
	call	GETNS
	call	CHKEQ		; require '='
	jp	nz,CMDERR
	call	GETUN		; get partition name
	ld	hl,CMDNAM
	ld	a,(hl)
	cp	' '
	jp	z,CMDERR	; can't be empty
	ld	de,pname
	ld	bc,6
	ldir			; make a local copy
	ld	de,(LNPTR)
	call	GETNS
	cp	':'		; delimiter required
	jp	nz,CMDERR
	inc	de
	call	GETNS
	jp	z,CMDERR
	cp	'+'		; relative value?
	jr	nz,stt1		; no
	set	0,(iy)		; else set flag
	inc	de
	call	GETNS
stt1:	cp	'-'		; negative value?
	jr	nz,stt2		; no
	bit	0,(iy)
	jp	nz,CMDERR	; can't appear after '+'
	set	1,(iy)		; set flag
	inc	de
	call	GETNS
stt2:	cp	'*'		; wildcard?
	jr	nz,stt3		; no
	inc	de
	ld	(LNPTR),de
	set	2,(iy)		; else set flag
	jr	stt4
stt3:	call	GETNS
	jp	z,CMDERR
	ld	(LNPTR),de
	call	GETDEC		; get top
	ld	(temp),hl
	ld	a,h
	or	l		; validate
	ld	a,E.INV
	jp	z,SYSERR
stt4:	call	GETNS
	jp	nz,CMDERR	; that should be it

	ld	c,1
	SC	.SUPER
	jp	c,SYSERR
	xor	a
	ld	(SYSLVL),a

	ld	hl,pname
	ld	de,$SCRBF
	push	de
	ld	bc,6
	ldir
	pop	bc
	KCALL	$FNPAR		; find partition
	jp	c,stt11

	; compute current top

	push	hl
	pop	ix
	ld	a,(ix+P.BASE)	; current partition top = base + size
	add	a,(ix+P.SIZE)
	ld	l,a
	ld	a,(ix+P.BASE+1)
	adc	a,(ix+P.SIZE+1)
	ld	h,a
	ld	(top),hl

	; compute mintop

	ld	e,(ix+P.BASE)	; minimum possible top = base + 1
	ld	d,(ix+P.BASE+1)
	inc	de
	ld	l,(ix+P.SUB)
	ld	h,(ix+P.SUB+1)
	ld	a,h
	or	l		; partition empty?
	jr	z,stt6		; yes, use min top
	push	ix
stt5:	push	hl
	pop	ix
	ld	l,(ix+P.LNK)	; else search for last subpartition in list
	ld	h,(ix+P.LNK+1)
	ld	a,h
	or	l		; this one?
	jr	nz,stt5		; no, loop
	ld	a,(ix+P.BASE)
	add	a,(ix+P.SIZE)	; minimum top = top of last subpartition
	ld	e,a
	ld	a,(ix+P.BASE+1)
	adc	a,(ix+P.SIZE+1)
	ld	d,a
	pop	ix
stt6:	ld	(mintop),de

	; compute maxtop

	ld	de,($MEMSZ)
	srl	d
	rr	e
	srl	d
	rr	e
	ld	l,(ix+P.LNK)
	ld	h,(ix+P.LNK+1)
	ld	a,h
	or	l		; is this the last partition in system?
	jr	z,stt7		; yes, max possible top = memtop
	ld	bc,P.BASE
	add	hl,bc
	ld	e,(hl)		; else is the base of the next partition
	inc	hl
	ld	d,(hl)
stt7:	ld	(maxtop),de	

	ld	hl,(temp)	; get value
	ld	a,l
	add	a,(ix+P.BASE)
	ld	l,a
	ld	a,l
	adc	a,(ix+P.BASE+1)
	ld	h,a
	ld	iy,wcmask
	ld	a,(iy)
	or	a
	jr	z,stt10		; value is absolute size
	bit	2,(iy)		; wildcard top?
	jr	z,stt8		; no
	bit	1,(iy)		; min possible?
	ld	hl,(mintop)
	jr	nz,stt10	; yes
	ld	hl,(maxtop)	; else is max possible
	jr	stt10		; set value

stt8:	ld	de,(temp)
	ld	hl,(top)
	bit	1,(iy)		; adjust down?
	jr	z,stt9		; no
	or	a
	sbc	hl,de
	ld	a,E.INV
	jr	c,stt11		; alignment error or E.INV
	jr	stt10
stt9:	add	hl,de
	ld	a,E.INV
	jr	c,stt11
	ld	a,h
	or	a
	scf
	ld	a,E.INV
	jr	nz,stt11	; alignment error or E.INV

stt10:	ld	de,(mintop)
	ex	de,hl
	call	CPHLDE
	ex	de,hl
	ld	a,E.INV
	jr	c,stt11		; alignment error or E.INV
	ld	de,(maxtop)
	call	CPHLDE
	jr	c,stt12		; space used

	ld	e,(ix+P.BASE)
	ld	d,(ix+P.BASE+1)
	or	a
	sbc	hl,de
	ld	a,E.INV
	scf
	jr	z,stt11		; result can't be zero
	ld	(ix+P.SIZE),l
	ld	(ix+P.SIZE+1),h
	xor	a		; success
	jr	stt11

stt12:	ld	hl,spmsg
	xor	a
	scf

stt11:	push	af
	ld	a,1
	ld	(SYSLVL),a
	ld	c,0
	SC	.SUPER
	pop	af
	ret	nc
	or	a
	jp	nz,SYSERR
	ld	a,h
	or	l
	jp	nz,ERRMCR
	ret

stlog:	; SET /COLOG

	ld	a,(negsw)
	or	a
	jp	nz,SYSERR
	ld	de,(LNPTR)
	call	GETNS
	ld	(newtsk+TD.CMD),de ; pass command tail to console logger
	ex	de,hl
	call	STRLEN
	ld	(hl),CR
	ld	b,0
	inc	bc		; account for the CR terminator
	ld	(newtsk+TD.CML),bc
	ld	hl,cotsk
	ld	de,newtsk+TD.NAME
	ld	bc,6
	ldir
	xor	a
	ld	(newtsk+TD.USR),a
	ld	(newtsk+TD.GRP),a
	set	TA.MCR,a
	ld	(newtsk+TD.ATTR),a
	ld	hl,0
	ld	(newtsk+TD.SDAT),hl
	ld	(newtsk+TD.SLEN),hl
	ld	hl,TTDEV
	ld	de,newtsk+TD.TI
	ld	bc,3
	ldir
	ld	hl,newtsk
	SC	.RPOI		; request COT... and pass offspring info
	jp	c,SYSERR
	ret

cotsk:	db	'COT...'

strndc:	; SET /RNDC

	ld	ix,$RNDC
	ld	iy,temp
	ld	(iy),1		; min
	ld	(iy+1),255	; max
	ld	hl,msrndc
strval:	ld	a,(negsw)
	or	a
	jp	nz,CMDERR
	ld	de,(LNPTR)
	call	GETNS
	ld	(LNPTR),de	; end of command?
	jr	z,shrval	; display current value if yes
	call	CHKEQ		; else require '='
	jp	nz,CMDERR
	call	CHKPRV
	jp	c,SYSERR	; operation requires privileges
	call	GETDEC		; get value
	ld	a,h
	or	a
	jp	nz,CMDERR	; value must be < 256
	ld	a,l
	cp	(iy)
	jp	c,errval	; must be >= min
	ld	a,(iy+1)
	cp	l
	jp	c,errval	; must be <= max
	ld	c,1
	SC	.SUPER		; enter supervisor mode
	jp	c,SYSERR
	ld	(ix),l		; set value
	ld	c,0
	SC	.SUPER		; exit supervisor mode
	ret

shrval:	ld	c,1
	SC	.SUPER		; enter supervisor mode
	jp	c,SYSERR
	call	optmsg
	ld	a,(ix)
	call	ADEC
	ld	c,CR
	call	PUTCH
	ld	c,0
	SC	.SUPER
	ret

errval:	ld	hl,msginv
	jp	ERRMCR

msginv:	db	'Invalid value',0

strndh:	; SET /RNDH

	ld	c,1
	SC	.SUPER		; enter supervisor mode
	jp	c,SYSERR
	ld	ix,$RNDH
	ld	iy,temp
	ld	a,($RNDL)
	inc	a
	ld	(iy),a		; min
	ld	(iy+1),250	; max
	ld	hl,msrndh
	ld	c,0
	SC	.SUPER
	jp	strval

strndl:	; SET /RNDL

	ld	c,1
	SC	.SUPER		; enter supervisor mode
	jp	c,SYSERR
	ld	ix,$RNDL
	ld	iy,temp
	ld	(iy),0		; min
	ld	a,($RNDH)
	dec	a
	ld	(iy+1),a	; max
	ld	hl,msrndl
	ld	c,0
	SC	.SUPER
	jp	strval

stswpc:	; SET /SWPC

	ld	ix,$SWPC
	ld	iy,temp
	ld	(iy),0		; min
	ld	(iy+1),255	; max
	ld	hl,msswpc
	jp	strval

stswpr:	; SET /SWPR

	ld	ix,$SWPRI
	ld	iy,temp
	ld	(iy),0		; min
	ld	(iy+1),127	; max
	ld	hl,msswpr
	jp	strval

;-----------------------------------------------------------------------

; Set single terminal characteristic. Called with terminal name in DE-C,
; L = characteristic code, H = value.

TTSET:	ld	(ttchr),hl	; store characteristic and state
	ld	b,1
	SC	.ALUN		; assign LUN to terminal
	ret	c
	ld	hl,4		; 4 seconds
	ld	d,2
	ld	e,EFN
	ld	bc,0		; no AST
	SC	.MRKT		; schedule timeout event
	ld	hl,qttset
	SC	.QIO
	push	af
	ld	e,EFN
	ld	bc,0
	SC	.CMKT		; cancel timeout event if still pending
	pop	af
	ret	c
	ld	a,(iosb)	; check status
	or	a
	ret	z		; on success, return
	cp	E.PEND		; request pending (timoeut)?
	scf
	ret	nz		; return error if not
	ld	hl,qttkil
	SC	.QIO		; else kill request
	ld	a,E.TMO		; and return timeout error
	scf
	ret

;-----------------------------------------------------------------------

	dseg

qttset:	QIOW$	SF.SMC,1,EFN,iosb,,<ttchr,2>
qttkil:	QIOW$	IO.KIL,1,EFN,iosb
ttchr:	db	0,0
iosb:	ds	4

fdb:	ds	FDBSZ

negsw:	ds	1		; 1 means negated switch (/NOsw or /-sw)

ptotal:	ds	2		; total available pool space
plrgst:	ds	2		; largest fragment size
plimit:	ds	2		; pool top address

optnam:	ds	2		; option message address for shds routine
devmfn:	ds	2		; dev matching func addr for shds routine
temp:	ds	2

pname:	ds	6		; partition name
base:	ds	2		; partition base
size:	ds	2		; partition size
type:	ds	1		; partition type
wcmask:	ds	1		; wilcard mask

prev:	ds	2		; pointer to prev partition in list
next:	ds	2		; pointer to next partition in list
pbase:	ds	2		; base of partition in list
psize:	ds	2		; size of partition in list

top	equ	base		; current partition top !  shared   !
mintop	equ	size		; minimum partition top ! variables !
maxtop	equ	pbase		; maximum partition top !           !

newtsk:	ds	TDBSZ		; task descriptor for console logger

	end
