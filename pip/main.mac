;**********************************************************************;
;                                                                      ;
;   This file is part of PIP, a Peripheral Interchange Program for     ;
;   RSX180. Copyright (C) 2014-2020, Hector Peraza.                    ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

;   PIP - Peripheral Interchange Program - Main module.
;
;   "A life without PIP is a life in misery."
;   (Lars Persson about uRSX on alt.folklore.computers :-))

	.Z80

	TITLE	PIP - Peripheral Interchange Program
	IDENT	'M0123'

	cseg

	include	PIP.INC
	include	SYSFN.INC
	include	TCB.INC
	include	FCB.INC
	include	VCB.INC
;	include	DCB.INC
;	include	SCB.INC
	include	GCML.INC
	include	ERRORS.INC

CR	equ	0Dh
LF	equ	0Ah
TAB	equ	09h
ESC	equ	1Bh

	public	CMDERR,SYSERR,ERROR,ERRNF,CPSTR,SRCFDB,DSTFDB
	public	NFILES,ASGN,SWBITS,SWVAL,LFNB,RFNB,CRFNB,ERRFNB
	public	NRPARM

	extrn	PIPDIR,PIPCPY,PIPDEL,PIPUNL,PIPREN,PIPATR

	extrn	ATTACH,DETACH,PFN,PDN,PERROR,CRLF,UCASE,GCML,RCML
	extrn	RCTRLO,HLDEC,PUTCH,PUTSTR,TTFLSH,TTLUN,PRFNB

MAXRPA	equ	10

;-----------------------------------------------------------------------

START::	ld	sp,stack

	ld	a,LUNTI
	ld	(TTLUN),a

	call	INIT

m1:	call	TTFLSH
	ld	iy,GDAT
	call	GCML		; get command line tail
	jr	c,m2		; jump on error

	ld	(lnptr),hl	; save pointer to command tail
	ld	de,'TI'
	ld	c,0
	ld	b,a		; LUN
	SC	.ALUN
	ld	de,0
	ld	c,LUNTI
	call	ATTACH
	call	PROCESS		; process the command
	call	TTFLSH
	ld	c,LUNTI
	call	DETACH
	jr	m1		; loop for more

m2:	cp	E.EOF		; end of file?
	jr	z,exit		; exit normally if yes

	call	CMLERR		; else display error message
	ld	iy,GDAT
	call	RCML		; reset command state
	jr	m1		; and loop

exit:	call	TTFLSH
	ld	hl,EX.SUC
	SC	.EXIT

;-----------------------------------------------------------------------

; Perform initializations

INIT:	ld	hl,0
	ld	de,GTKBUF
	SC	.GTSK		; get task info
	ld	hl,GTKBUF+GT.NAME
	call	ckdots		; skip initial 3 dots if present
	ld	de,(GDAT+G.PRM)	; set prompt to our task name
	inc	de		; skip CR/LF
	inc	de
	ld	bc,3
	ldir
	ret

ckdots:	ld	b,3
	push	hl
ckd1:	ld	a,(hl)
	cp	'.'
	jr	nz,ckd2
	inc	hl
	djnz	ckd1
	inc	sp
	inc	sp
	ret
ckd2:	pop	hl
	ret

;-----------------------------------------------------------------------

; Print a 'No such file(s)' error message

ERRNF:	ld	hl,(CRFNB)
	ld	(ERRFNB),hl
	ld	hl,nferr
	jr	ERROR

; Print a 'Syntax error' message

CMDERR:	ld	hl,snerr
	; continue below

; Print error message in the form 'PIP -- message'.
; Called with HL = address of message string.

ERROR:	push	hl
	call	RCTRLO
	ld	hl,eprfx
	call	PUTSTR
	pop	hl
	call	PUTSTR
	call	ATLINE
	ld	c,CR
	call	PUTCH
	call	ERRFIL
	ld	c,CR
	call	PUTCH
	scf
	ret

; Same as above, but displays a standard system error message.
; Called with A = error code.

SYSERR:	push	af
	call	RCTRLO
	ld	hl,eprfx
	call	PUTSTR
	pop	af
	call	PERROR
	call	ATLINE
	ld	c,CR
	call	PUTCH
	call	ERRFIL
	ld	c,CR
	call	PUTCH
	scf
	ret

eprfx:	db	CR,LF,'PIP -- ',0
snerr:	db	'Syntax error',0
nferr:	db	'No such file(s)',0

; Display CML or system error message

CMLERR:	or	a
	jp	m,SYSERR
	ld	hl,ERROR
	push	hl
	cp	GE.OK
	ld	hl,msgok
	ret	z
	cp	GE.SN
	ld	hl,snerr
	ret	z
	cp	GE.LEN
	ld	hl,msglen
	ret	z
	cp	GE.NLV
	ld	hl,msgnlv
	ret	z
	pop	hl
	jp	SYSERR

msgok:	db	'No error',0
msglen:	db	'Line too long in command file',0
msgnlv:	db	'Command nesting level too deep',0

; Display line number of indirect file where error happened

ATLINE:	ld	hl,GDAT+G.ST
	bit	GS.FIL,(hl)
	ret	z
	ld	hl,(GDAT+G.LN)
	ld	a,h
	or	l
	ret	z
	push	hl
	ld	hl,atln
	call	PUTSTR
	pop	hl
	xor	a
	jp	HLDEC

atln:	db	' at line ',0

; Display name of file that generated an error, if any

ERRFIL:	ld	hl,(ERRFNB)
	ld	a,h
	or	l
	ret	z
	push	hl
	pop	ix
	ld	c,CR
	call	PUTCH
	jp	PRFNB

;-----------------------------------------------------------------------

; Display PIP version (from task image ID)

PIPVER:	ld	hl,eprfx
	call	PUTSTR
	ld	hl,pvmsg
	call	PUTSTR
	ld	hl,GTKBUF+GT.VID
	ld	b,6
pv1:	ld	c,(hl)
	call	PUTCH
	inc	hl
	djnz	pv1
	ld	c,CR
	call	PUTCH
	xor	a
	ret

pvmsg:	db	'Version ',0

;-----------------------------------------------------------------------

; Parse the command line and execute the command.

; TODO:
; - handle '!' comments

PROCESS:ld	hl,0
	ld	(ERRFNB),hl

	ld	de,(lnptr)
	call	getnb		; get first non-blank character
	ret	z		; return if empty line

	call	PARSE		; parse command

	ex	de,hl
	jp	c,ERROR
	call	iseol
	jp	nz,CMDERR	; any extra characters here means error

	; figure what to do

	ld	ix,SWBITS
	ld	a,(ix)
	and	0 OR (1 SHL S1.BR) OR (1 SHL S1.FU) ; /BR, /FU?
	jr	z,pip1
	set	S1.LI,(ix)	; /BR and /FU imply /LI

pip1:	ld	a,(ix)		; check switches
	and	0 OR (1 SHL S1.LI) OR (1 SHL S1.FR) ; /LI or /FR?
	jp	nz,PIPDIR	; then display directory

	ld	a,(ASGN)
	or	a		; single file operation?
	jr	nz,pmult	; jump if not

	; single-file operations

	bit	S2.PR,(ix+1)	; /PR?
	jp	nz,PIPATR

	bit	S2.OW,(ix+1)	; /OW?
	jp	nz,PIPATR

	bit	S2.DE,(ix+1)	; /DE?
	jp	nz,PIPDEL

	bit	S2.PU,(ix+1)	; /PU?
	jp	nz,PIPDEL	; purge is a delete operation

	bit	S2.UN,(ix+1)	; /UN?
	jp	nz,PIPUNL

	ld	a,(ix+4)
	bit	S5.MD,a		; /MD?
;	jp	nz,PIPMKD
	bit	S5.DF,a		; /DF?
;	jp	nz,PIPCHD

	bit	S1.ID,(ix+0)	; /ID?
	jp	nz,PIPVER

	jp	CMDERR

pmult:	; multiple-file operations

	ld	a,(ix+2)	; check for option conflicts
	and	0 OR (1 SHL S3.ME) OR (1 SHL S3.AP)
	cp	0 OR (1 SHL S3.ME) OR (1 SHL S3.AP)
	ld	hl,tmserr
	jp	z,ERROR		; /ME can't be specified with /AP


;;	bit	S3.ME,(ix+2)	; /ME?
;;	jp	nz,PIPCPY	; merge is done via copy
;;	bit	S3.AP,(ix+2)	; /AP?
;;	jp	nz,PIPCPY	; append is done via copy

	bit	S4.MV,(ix+3)	; /MV?
;	jp	nz,PIPMV

	bit	S4.RE,(ix+3)	; /RE?
	jp	nz,PIPREN

	jp	PIPCPY		; else try just plain copy (also handles
				;  /ME and /AP)

	jp	CMDERR

;-----------------------------------------------------------------------

; Copy string (HL) <- (DE)

CPSTR:	ld	a,(de)
	or	a
	ret	z
	ld	(hl),a
	inc	hl
	inc	de
	jr	CPSTR

; Return Z if char in A is blank.

isblnk:	or	a
	ret	z
	cp	' '
	ret	z
	cp	TAB
	ret

; Return Z if char in A is end-of-line.

iseol:	or	a
	ret	z
	cp	CR
	ret	z
	cp	LF
	ret	z
	cp	1Ah
	ret

; Get next non-blank char. Returns Z flag set on end of line.

getnb:	ld	a,(de)
	or	a
	ret	z
	call	isblnk
	ret	nz
	inc	de
	jr	getnb

; Get next char. Returns Z on end of line or if char is a delimiter.

getfs:	ld	a,(de)
	or	a
	ret	z
	cp	' '
	jr	c,gf1
	ret	z
	cp	'='
	ret	z
	cp	':'
	ret	z
	cp	','
	ret	z
	cp	'/'
	ret	z
	cp	'['
	ret	z
	cp	']'
	ret	z
	ret
gf1:	xor	a
	ret

; Read a 32-bit decimal number from input line into HL'HL.
; Returns CY if the number contains invalid chars or if overflow happens.

GETDEC:	ld	de,(lnptr)
	call	getnb
	ld	hl,0
	exx
	ld	hl,0
	exx
newdig:	call	getfs
	jr	z,endnum	; note no CY
	sub	'0'
	jr	c,endnum	; note CY
	cp	10
	ccf
	jr	c,endnum	; note CY
	call	adddig		; note CY on overflow
	inc	de
	jr	nc,newdig
endnum:	ld	(lnptr),de
	ret

adddig:	ld	c,l
	ld	b,h
	add	hl,hl
	exx
	adc	hl,hl		; *2
	exx
	ret	c
	add	hl,hl
	exx
	adc	hl,hl		; *4
	exx
	ret	c
	add	hl,bc
	exx
	ld	bc,0
	adc	hl,bc		; *5
	exx
	ret	c
	add	hl,hl
	exx
	adc	hl,hl		; *10
	exx
	ret	c
	ld	c,a
	ld	b,0
	add	hl,bc
	exx
	adc	hl,bc		; add digit
	exx
	ret

; Read a 16-bit hexadecimal number from input line into HL.
; Returns CY if the number contains invalid chars or if overflow happens.

GETHEX:	ld	de,(lnptr)
	call	getnb
	ld	hl,0
gh1:	call	getfs
	jr	z,gh3		; note no CY
	call	UCASE
	sub	'0'
	jr	c,gh3		; note CY
	cp	10
	jr	c,gh2		; note CY
	cp	11h
	jr	c,gh3
	cp	17h
	ccf
	jr	c,gh3
	sub	7
gh2:	call	addhex		; note CY on overflow
	inc	de
	jr	nc,gh1
gh3:	ld	(lnptr),de
	ret

addhex:	add	hl,hl		; *2
	ret	c
	add	hl,hl		; *4
	ret	c
	add	hl,hl		; *8
	ret	c
	add	hl,hl		; *16
	ret	c
	ld	c,a
	ld	b,0
	add	hl,bc		; add hex digit
	ret

;-----------------------------------------------------------------------

; TODO:
; - some switches apply to specific input files
; - ignore extra chars in switch name
; - process argument(s) for some switches /sw:n or /sw:[...]
; - allow negation /-sw or /nosw

PARSE:	xor	a		; initialize values
	ld	(ASGN),a	; no assignment operator yet
	ld	(NRPARM),a
	ld	hl,SWBITS
	ld	b,5
pclsw:	ld	(hl),a		; clear all switches
	inc	hl
	djnz	pclsw
	ld	hl,0
	ld	(SWVAL),hl	; clear switch args
	ld	(SWVAL+2),hl
	ld	ix,LFNB
	ld	(ix+F.ATTR),0
	ld	ix,RFNB
	ld	de,FNSZ
	ld	b,MAXRPA
pclr:	ld	(ix+F.ATTR),0
	add	ix,de
	djnz	pclr
	ld	hl,(lnptr)
par0:	ld	a,(hl)
	call	iseol
	ret	z
	ld	ix,RFNB		; assume right parameter
	ld	a,(NRPARM)
	ld	e,a
	ld	d,FNSZ
	push	hl
	call	mult8
	ex	de,hl
	pop	hl
	add	ix,de
	call	PFN		; try to parse file name

	ld	a,(NRPARM)	; check how many right params entered so far
	inc	a
	cp	MAXRPA+1	; 10 is maximum
	ld	de,tmerr
	ccf
	ret	c
	ld	(NRPARM),a	; increase counter

par01:	ld	a,(hl)		; see where PFN stopped
	call	iseol		; end of line?
	ret	z		; then return
	cp	'='		; assignment?
	jr	z,par1		; then it was a left parameter
	cp	','		; comma?
	jr	z,par2		; then a new right parameter begins
	cp	'/'		; switch?
	jr	z,par3		; then process it
	cp	'!'		; a comment?
	ret	z		; then just return - ignore it
par0e:	ld	de,snerr	; else is error
	scf
	ret

par1:	; handle assignment

	ld	a,(ASGN)	; is this the first time?
	or	a
	ld	de,snerr
	scf			; return with error if not
	ret	nz
	inc	a
	ld	(ASGN),a	; else set flag
	push	hl
	ld	hl,RFNB
	ld	de,LFNB
	ld	bc,FNSZ
	ldir			; copy the FNB to left side
	pop	hl
	ld	a,(NRPARM)
	cp	2		; two or more params entered so far?
	ld	de,snerr	; return error if yes, only 0 or 1 allowed
	ccf
	ret	c
	xor	a		; reset right parameter counter
	ld	(NRPARM),a
	inc	hl		; else skip delimiter
	jp	par0		; and loop

par2:	; handle comma

	inc	hl		; skip delimiter
	jp	par0		; and loop

par3:	; handle switch

	inc	hl		; skip delim
	ld	a,(hl)		; get first switch character
	call	iseol		; end of command?
	jr	z,par3e		; error if yes
	call	UCASE
	ld	d,a
	inc	hl
	ld	a,(hl)		; get second switch character
	call	iseol
	jr	z,par3e
	call	UCASE
	ld	e,a		; switch name now in DE
	inc	hl
	push	hl
	ld	hl,swtab
par30:	ld	a,(hl)
	inc	hl
	or	a		; end of table?
	jr	z,par3e0	; error - no switch matches
	cp	d
	jr	nz,par31
	ld	a,(hl)
	cp	e
	jr	z,par32
par31:	inc	hl
	inc	hl
	inc	hl
	jr	par30

par32:	inc	hl		; we have a match
	ld	a,(hl)		; see if argument optional or required
	or	a
	ex	(sp),hl		; push switch table ptr, pop cmd ptr
	call	nz,par4		; process argument
	ex	(sp),hl		; push cmd ptr, pop switch table ptr
	inc	hl
	ld	a,(hl)		; get the byte that follows
	rrca			; hi-nibble is switch byte index in table
	rrca
	rrca
	rrca
	and	0Fh
	ld	e,a		; byte index in DE
	ld	d,0
	ld	a,(hl)
	and	7		; bit number is in lo-nibble
	ld	b,a
	ld	a,80h
	inc	b		; so mask starts from 01h
par33:	rlca			; get bit into position
	djnz	par33
	ld	hl,SWBITS
	add	hl,de
	or	(hl)		; set switch bit
	ld	(hl),a
	pop	hl
	jp	par01		; after a switch only a comma
				;  or another switch can follow

par3e0:	pop	hl
par3e:	ld	de,swerr
	scf
	ret

par4:	; process switch argument, coded in the table as follows:
	;   01 = :n           n is a 32-bit decimal value
	;   02 = :[gid,uid]   UIC, gid and uid are 8-bit decimal values
	;   03 = :[rwed,...]  protection bits, forming a 16-bit word
	; hi-bit set means argument required, else is optional
	; note that in all cases above the argument result is 1 word

	ld	c,a
	ld	a,(hl)
	cp	':'		; argument present?
	ret	nz		; return if not
	inc	hl
	dec	c
	jp	z,par4n
	dec	c
	jp	z,par4u

	; get access protection bits, [rwed,rwed,rwed,rwed] or hex value

	ex	de,hl
	call	getnb
	cp	'['		; check for [rwed...] format
	jr	z,par4p
	ld	(lnptr),de
	call	GETHEX		; else get hexadecimal value
	jp	c,par0e		; exit on overflow error
	ld	a,c
	or	a
	jp	z,par0e		; can't be empty string
	ld	(SWVAL),de	; store result
	ld	hl,(lnptr)
	ret

par4p:	; decode [rwed...] access bits

	ld	hl,0		; start with null aceess bits
	exx
	ld	hl,0		; and null mask
	exx
	ld	b,4		; number of groups
par4p2:	inc	de
	call	getnb		; skip spaces, get char
	cp	']'
	jr	z,par4p4
	cp	','		; group separator?
	jr	z,par4p3	; branch if yes
	cp	'*'		; wildcard?
	jr	nz,par4p5	; no
	ld	a,l
	and	0Fh		; protection bits set on this field?
	jp	nz,par0e	; yes, error
	exx
	ld	a,l
	exx
	ld	c,a
	and	0Fh		; already set?
	jp	nz,par0e	; yes, error
	ld	a,c
	or	0Fh		; else set mask
	exx
	ld	l,a
	exx
	jr	par4p2		; and loop to process next

par4p5:	call	gtrwed		; get single protection bit
	jp	c,par0e
	ld	a,l
	and	c		; already set?
	jp	nz,par0e	; yes, error
	exx
	ld	a,l
	exx
	and	0Fh		; wildcard seen on this field?
	jp	nz,par0e	; yes, error
	ld	a,l
	or	c
	ld	l,a		; else set bit
	jr	par4p2		; and loop to process next

par4p3:	add	hl,hl		; shift access bits
	add	hl,hl
	add	hl,hl
	add	hl,hl
	exx
	add	hl,hl		; and mask
	add	hl,hl
	add	hl,hl
	add	hl,hl
	exx
	djnz	par4p2		; and loop to process next group
	jp	par0e

par4p4:	dec	b
	jp	nz,par0e	; all groups must have been specified
	ld	(SWVAL),hl	; store result
	exx
	ld	(SWVAL+2),hl
	exx
	inc	de
	ex	de,hl
	ld	(lnptr),hl
	ret

gtrwed:	call	UCASE
	ld	c,08h
	cp	'R'		; Read = 80h
	ret	z
	srl	c
	cp	'W'		; Write = 04h
	ret	z
	srl	c
	cp	'E'		; Extend = 02h
	ret	z
	srl	c
	cp	'D'		; Delete = 01h
	ret	z
	scf
	ret

par4n:	; get 32-bit decimal value

	ld	(lnptr),hl
	call	GETDEC
	jp	c,par0e
	ld	(SWVAL),hl
	exx
	ld	(SWVAL+2),hl
	exx
	ld	hl,(lnptr)
	ret

par4u:	; get UIC specification [g,u]

	ex	de,hl
	call	getnb
	cp	'['		; opening bracket required
	jp	nz,par0e
	inc	de
	call	par8b		; get group
	jp	c,par0e
	or	a
	jp	z,par0e		; zero is not allowed
	ld	(SWVAL+1),a	; store group ID
	ld	a,c
	ld	(SWVAL+3),a	; store group wildcard, if present
	call	getnb
	cp	','		; comma separator required
	jp	nz,par0e
	inc	de
	call	par8b		; get user
	jp	c,par0e
	or	a
	jp	z,par0e		; zero is not allowed
	ld	(SWVAL),a	; store user ID
	ld	a,c
	ld	(SWVAL+2),a	; store user wildcard, if present
	call	getnb
	cp	']'		; closing bracket required
	jp	nz,par0e
	ex	de,hl
	inc	hl
	ld	(lnptr),hl
	ret

par8b:	call	getnb
	cp	'*'		; wildcard?
	jr	nz,par8b1	; no
	inc	de		; else skip it
	ld	c,0FFh		; and set mask
	ld	a,1
	or	a
	ret
par8b1:	ld	(lnptr),de
	call	GETDEC		; get decimal value
	ret	c
	ld	c,0
	exx
	ld	a,h		; ensure is a 8-bit value
	or	l
	exx
	or	h
	ld	a,l
	ret	z
	scf
	ret

swtab:	; directory listing switches

	db	'LI',00h,(0 SHL 4) OR S1.LI
	db	'DI',00h,(0 SHL 4) OR S1.LI
	db	'BR',00h,(0 SHL 4) OR S1.BR
	db	'FU',00h,(0 SHL 4) OR S1.FU
	db	'FR',00h,(0 SHL 4) OR S1.FR
	db	'SH',00h,(0 SHL 4) OR S1.SH
	db	'VI',00h,(0 SHL 4) OR S1.VI
	db	'ID',00h,(0 SHL 4) OR S1.ID
	db	'NM',00h,(0 SHL 4) OR S1.NM

	; simple file operations

	db	'DE',00h,(1 SHL 4) OR S2.DE
	db	'PU',01h,(1 SHL 4) OR S2.PU
	db	'SD',00h,(1 SHL 4) OR S2.SD
	db	'UN',00h,(1 SHL 4) OR S2.UN
	db	'PR',03h,(1 SHL 4) OR S2.PR
	db	'OW',02h,(1 SHL 4) OR S2.OW
	db	'CR',01h,(1 SHL 4) OR S2.CR
	db	'TR',01h,(1 SHL 4) OR S2.TR

	; copy operations

	db	'CO',01h,(2 SHL 4) OR S3.CO
	db	'VF',00h,(2 SHL 4) OR S3.VF
	db	'VE',00h,(2 SHL 4) OR S3.VE
	db	'NV',00h,(2 SHL 4) OR S3.NV
	db	'AP',00h,(2 SHL 4) OR S3.AP
	db	'ME',00h,(2 SHL 4) OR S3.ME
	db	'SU',00h,(2 SHL 4) OR S3.SU
	db	'BF',01h,(2 SHL 4) OR S3.BF

	db	'MV',00h,(3 SHL 4) OR S4.MV
	db	'RE',00h,(3 SHL 4) OR S4.RE
	db	'CD',00h,(3 SHL 4) OR S4.CD
	db	'FO',00h,(3 SHL 4) OR S4.FO
	db	'LD',00h,(3 SHL 4) OR S4.LD
	db	'BL',01h,(3 SHL 4) OR S4.BL

	; directory operations

	db	'MD',00h,(4 SHL 4) OR S5.MD
	db	'DF',00h,(4 SHL 4) OR S5.DF
	db	'WI',00h,(4 SHL 4) OR S5.WI

	db	0	; end of table

tmerr:	db	'Too many input filespecs',0
swerr:	db	'Invalid switch',0
tmserr:	db	'Too many command switches - ambiguous',0

; HL = D * E

mult8:	ld	hl,0
	ld	a,d
	ld	d,0
mnext:	or	a
	ret	z
	rra
	jr	nc,shift
	add	hl,de
shift:	ex	de,hl
	add	hl,hl
	ex	de,hl
	jr	mnext

;-----------------------------------------------------------------------

	dseg

GTKBUF:	ds	GTKSZ		; buffer for task info

GDAT:	GCML$	lnbuf,80,'PIP',LUNCML,3

tmplun:	ds	1		; caller's LUN during error output
lnbuf:	ds	82		; buffer for command line
lnptr:	ds	2		; command line pointer

LFNB:	ds	FNSZ		; space for left filespec
RFNB:	ds	FNSZ*MAXRPA	; space for right filespecs
NRPARM:	ds	1		; number of right parameters
ASGN:	ds	1		; true if '=' seen
SWBITS:	ds	5		; space for switch bits
SWVAL:	ds	4		; switch argument
CRFNB:	ds	2		; pointer to current RFNB
ERRFNB:	ds	2		; pointer to error FNB, if any

SRCFDB:	ds	FDBSZ		; src FDB for file operations
DSTFDB:	ds	FDBSZ		; dst FDB for file operations
NFILES:	ds	2		; file count for dir/file operations

	ds	512		; stack space, enough for at least
				;  3-level recursive SEARCH call
stack	equ	$

	end
