;**********************************************************************;
;                                                                      ;
;   This file is part of SYSLIB, a system library for the RSX180 OS.   ;
;   Copyright (C) 1985-2020, Hector Peraza.                            ;
;                                                                      ;
;   This library is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU Library General Public        ;
;   License as published by the Free Software Foundation; either       ;
;   version 2 of the License, or (at your option) any later version.   ;
;                                                                      ;
;   This library is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU Library General Public License for more details.               ;
;                                                                      ;
;   You should have received a copy of the GNU Library General Public  ;
;   License along with this program; if not, write to the Free         ;
;   Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. ;
;                                                                      ;
;***********************************************************************

;  Output character in C to console, buffered version.
;  The character will be actually output when the buffer
;  is full or explicitely flushed. Flushing also happens
;  automatically when a CR character is output.
;
;  Note that TTFLSH needs to be called before the
;  application exits (and/or at appropriate moments)
;  to ensure that all the information is displayed.
;
;  Assumes console is assigned to LUN 5.

	.Z80

	include	SYSFN.INC
	include	QIO.INC

	public	PUTCH,TTFLSH,TTCLR,TTLUN

	extrn	QIOBLK,QIOSB

CR	equ	0Dh

	cseg

PUTCH:	push	hl
	ld	hl,(BUFPTR)
	ld	(hl),c		; store char in buffer
	inc	hl		; advance pointer
	ld	(BUFPTR),hl
	pop	hl
	ld	a,(BUFCNT)
	inc	a		; increase byte counter
	ld	(BUFCNT),a
	cp	128		; buffer full?
	jr	nc,TTFLSH	; output it if yes
	ld	a,c
	cp	CR		; CR?
	ret	nz		; return if not, else flush buffer
TTFLSH:	ld	a,(BUFCNT)
	or	a		; check in case the function is called
	ret	z		; separately
	push	ix
	push	bc
	push	de
	push	hl
snd0:	ld	ix,QIOBLK
	ld	(ix+Q.FUNC),IO.WVB ; function code
	ld	(ix+Q.SUBF),0	; subfunction
	ld	(ix+Q.EFN),3	; flag number
	ld	(ix+Q.WAIT),1	; wait for completion
	xor	a
	ld	(ix+Q.AST),a	; no AST
	ld	(ix+Q.AST+1),a
	ld	(ix+Q.VFC),a	; no carriage control
	ld	(ix+Q.VFC+1),a
	ld	hl,QIOSB
	ld	(ix+Q.IOSB),l	; set result address
	ld	(ix+Q.IOSB+1),h
	inc	hl
	ld	(hl),a		; clear counter of bytes sent
	inc	hl
	ld	(hl),a		;
	ld	a,(TTLUN)
	ld	(ix+Q.LUN),a	; set LUN
	ld	hl,BUF
	ld	(ix+Q.BUF),l	; buffer address
	ld	(ix+Q.BUF+1),h
	ld	a,(BUFCNT)
	ld	(ix+Q.LEN),a	; bytes to write
	ld	(ix+Q.LEN+1),0
	push	ix
	pop	hl
	SC	.QIO		; .QIOW
;;	jr	c,snd1		; if queuing failed
	ld	hl,(QIOSB+2)	; fetch byte count
;;	ld	a,(QIOSB)	; fetch return code
	ld	a,h
	or	l		; anything sent?
	jr	z,snd0		; keep trying if not
	ld	a,(BUFCNT)
	sub	l		; all bytes sent?
	ld	(BUFCNT),a
	ld	de,BUF
	jr	z,snd1		; return if yes
	ld	c,a		; else prepare counter of bytes to move
	ld	b,0
	ld	h,b		; just in case
	add	hl,de		; HL = src (BUF+sent), DE = dst (BUF)
	ldir			; shift buffer, we'll send the remainder later
snd1:	ld	(BUFPTR),de	; set new buffer pointer (BUF+diff)
	pop	hl
	pop	de
	pop	bc
	pop	ix
	ret

TTCLR:	push	hl
	ld	hl,BUF
	ld	(BUFPTR),hl
	xor	a
	ld	(BUFCNT),a
	pop	hl
	ret

	dseg

TTLUN:	db	5		; default LUN for TI:
BUFCNT:	db	0		; note: initialized to zero!
BUFPTR:	dw	BUF		; note: initialized to BUF!
BUF:	ds	128

	end
