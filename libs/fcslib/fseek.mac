;**********************************************************************;
;                                                                      ;
;   This file is part of FCSLIB, a file I/O library for the RSX180 OS. ;
;   Copyright (C) 1985-2020, Hector Peraza.                            ;
;                                                                      ;
;   This library is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU Library General Public        ;
;   License as published by the Free Software Foundation; either       ;
;   version 2 of the License, or (at your option) any later version.   ;
;                                                                      ;
;   This library is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU Library General Public License for more details.               ;
;                                                                      ;
;   You should have received a copy of the GNU Library General Public  ;
;   License along with this program; if not, write to the Free         ;
;   Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. ;
;                                                                      ;
;**********************************************************************;

;  Seek to the specified byte position.

	.Z80

	include	SYSFN.INC
	include	FCB.INC
	include	FCSLIB.INC
	include	ERRORS.INC

	public	FSEEK

	extrn	?CMP24,FWRBLK

	cseg

; Seek file to specified position.

; Input:
;   IX = pointer to file I/O structure
;   DEBC = 32-bit byte position
; Returns:
;   CY set on error and error code in A

FSEEK:	ld	a,(ix+FC.MODE)
	bit	FM.DV,a		; device mode?
  IF 0
	ld	a,E.BADOP	; return error if yes
	scf
	ret	nz
  ELSE
	jr	z,fs1		; branch if yes
	xor	a		; else return success (ignore operation)
	ret
fs1:
  ENDIF
	ld	(ix+FC.CUR),c
	ld	a,b
	and	1
	ld	(ix+FC.CUR+1),a	   ; new byte position = pos % 512

	push	hl
	ld	l,b
	ld	h,e
	ld	b,d
	srl	b
	rr	h
	rr	l		   ; BHL = new block number = pos / 512

	bit	FS.BV,(ix+FC.MODE) ; buffer valid?
	jr	z,fs3		   ; no, set new block number and return

	ld	e,(ix+FC.BLK)	   ; else get current block number
	ld	d,(ix+FC.BLK+1)
	ld	c,(ix+FC.BLK+2)
	call	?CMP24		   ; same?
	jr	z,fs4		   ; yes, return

	bit	FS.BM,(ix+FC.MODE) ; buffer modified?
	jr	z,fs2		   ; no, invalidate buffer, set blkno and return

	call	FWRBLK		   ; else write changes back
	jr	c,fs5

fs2:	res	FS.BV,(ix+FC.MODE) ; invalidate buffer
fs3:	ld	(ix+FC.BLK),l	   ; set new block number
	ld	(ix+FC.BLK+1),h
	ld	(ix+FC.BLK+2),b
fs4:	xor	a		   ; and return success
fs5:	pop	hl
	ret

	end
