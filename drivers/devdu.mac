;**********************************************************************;
;                                                                      ;
;   This file is part of RSX180, a multi-tasking OS for the Z180.      ;
;   Copyright (C) 1985-2020, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

;----------------------------------------------------------------------;
;                                                                      ;
;   DEV DU: GIDE hard disk driver (P112 version)                       ;
;                                                                      ;
;----------------------------------------------------------------------;

	.Z80

	include	Z180.INC
	include	DCB.INC
	include	QIO.INC
	include	IOPKT.INC
	include	TCB.INC
	include	PCB.INC
	include	SYSCONF.INC
	include	ERRORS.INC

	extrn	SETHVC,GETPKT,IODONE,$ERSEQ,$UPUTW,$MCOPY,$SBANK,$VALTB

; This driver assumes that the hard disk has been partitioned using the
; FDISK utility. The initialization routine validates the partition table
; and sequentially assigns partitions to units. Hard-disk geometry tables
; are updated, device unit numbers enabled or disabled accordingly.
;
; Partition units are in 16-sector logical tracks (8K), as in UZI180.

; IDE Task File Register definitions

IDEBase	equ	50h		; GIDE base address

IdeDOR	equ	IDEBase+6	; Digital Output Register
IdeDat	equ	IDEBase+8	; Data Register
IdeErr	equ	IDEBase+9	; Error Register
IdeSCnt	equ	IDEBase+0Ah	; Sector Count
IdeSNum	equ	IDEBase+0Bh	; Sector Number
IdeCLo	equ	IDEBase+0Ch	; Cylinder Low
IdeCHi	equ	IDEBase+0Dh	; Cylinder High
IdeSDH	equ	IDEBase+0Eh	; Drive and Head
IdeCmd	equ	IDEBase+0Fh	; Command / Status

; IDE Hard Disk commands

CmdHome	equ	10h		; Recalibrate
CmdRd	equ	20h		; Read Sector
CmdWr	equ	30h		; Write Sector
CmdInit	equ	91h		; Initialize Drive Params
CmdId	equ	0ECh		; Read ID

; Error codes

TIMOUT	equ	80h		; timeout accessing hard disk
WPRT	equ	02h		; write attempted on write-protected volume

; Misc equates

HDTMO	equ	1 * TCKSEC	; GIDE command timeout

; Device-dependent UCB parameters

UX.BFP	equ	UCBSZ + 0	; address of buffer in user space (2 bytes)
UX.BBR	equ	UX.BFP + 2	; user bank (1 byte)
UX.CNT	equ	UX.BBR + 1	; byte count (2 bytes)
UX.PBAS	equ	UX.CNT + 2	; partition base (2 bytes)
UX.PSIZ	equ	UX.PBAS + 2	; partition size (2 bytes)

DSBLWR	equ	0	; disable write function (used during debug)

; TODO:
; - retry up to 5 times on error?

; Macro: wait for ready (Non-Busy) signal active with timeout

WaitRdy	macro	onerr
	local	wait
	ld	hl,dcnt
	ld	(hl),HDTMO
wait:	ld	a,(hl)
	or	a
	jr	z,onerr
	in	a,(IdeCmd)
	rla
	jr	c,wait
	endm

; Macro: wait for DRQ signal with timeout

WaitDrq	macro	onerr
	local	wait
	ld	hl,dcnt
	ld	(hl),HDTMO
wait:	ld	a,(hl)
	or	a
	jr	z,onerr
	in	a,(IdeCmd)
	bit	3,a
	jr	z,wait
	endm

;-----------------------------------------------------------------------

	CSEG

; Device descriptor table - must be at the start of the file

DEVDU::	db	'DU',8		; device name and number of units
	dw	UCBDU0		; address of UCB list
	jp	INIT		; entry points
	jp	IOREQ
	jp	IOKILL
	jp	TMOUT

	DSEG

UCBDU0:	dw	UCBDU1		; link to next UCB
	db	0		; unit 0
	db	(1 SHL US.OFL)	; status byte
	ds	2		; back pointer to DCB (set by kernel)
	dw	SCB		; pointer to SCB
	dw	0		; redirect pointer
	db	0		; control bits
	dw	(1 SHL DV.REC) OR (1 SHL DV.DIR) OR (1 SHL DV.MNT)
	dw	0		; TCB address of attached task
	dw	0		; TCB address of ACP task
	dw	0		; LCB address of owner
	dw	0		; UX.BFP
	db	0		; UX.BBR
	dw	0		; UX.CNT
	dw	0		; UX.PBAS
	dw	0		; UX.PSIZ

UCBDU1:	dw	UCBDU2		; link to next UCB
	db	1		; unit 1
	db	(1 SHL US.OFL)	; status byte
	ds	2		; back pointer to DCB (set by kernel)
	dw	SCB		; pointer to SCB
	dw	0		; redirect pointer
	db	0		; control bits
	dw	(1 SHL DV.REC) OR (1 SHL DV.DIR) OR (1 SHL DV.MNT)
	dw	0		; TCB address of attached task
	dw	0		; TCB address of ACP task
	dw	0		; LCB address of owner
	dw	0		; UX.BFP
	db	0		; UX.BBR
	dw	0		; UX.CNT
	dw	0		; UX.PBAS
	dw	0		; UX.PSIZ

UCBDU2:	dw	UCBDU3		; link to next UCB
	db	2		; unit 2
	db	(1 SHL US.OFL)	; status byte
	ds	2		; back pointer to DCB (set by kernel)
	dw	SCB		; pointer to SCB
	dw	0		; redirect pointer
	db	0		; control bits
	dw	(1 SHL DV.REC) OR (1 SHL DV.DIR) OR (1 SHL DV.MNT)
	dw	0		; TCB address of attached task
	dw	0		; TCB address of ACP task
	dw	0		; LCB address of owner
	dw	0		; UX.BFP
	db	0		; UX.BBR
	dw	0		; UX.CNT
	dw	0		; UX.PBAS
	dw	0		; UX.PSIZ

UCBDU3:	dw	UCBDU4		; link to next UCB
	db	3		; unit 3
	db	(1 SHL US.OFL)	; status byte
	ds	2		; back pointer to DCB (set by kernel)
	dw	SCB		; pointer to SCB
	dw	0		; redirect pointer
	db	0		; control bits
	dw	(1 SHL DV.REC) OR (1 SHL DV.DIR) OR (1 SHL DV.MNT)
	dw	0		; TCB address of attached task
	dw	0		; TCB address of ACP task
	dw	0		; LCB address of owner
	dw	0		; UX.BFP
	db	0		; UX.BBR
	dw	0		; UX.CNT
	dw	0		; UX.PBAS
	dw	0		; UX.PSIZ

UCBDU4:	dw	UCBDU5		; link to next UCB
	db	4		; unit 4
	db	(1 SHL US.OFL)	; status byte
	ds	2		; back pointer to DCB (set by kernel)
	dw	SCB		; pointer to SCB
	dw	0		; redirect pointer
	db	0		; control bits
	dw	(1 SHL DV.REC) OR (1 SHL DV.DIR) OR (1 SHL DV.MNT)
	dw	0		; TCB address of attached task
	dw	0		; TCB address of ACP task
	dw	0		; LCB address of owner
	dw	0		; UX.BFP
	db	0		; UX.BBR
	dw	0		; UX.CNT
	dw	0		; UX.PBAS
	dw	0		; UX.PSIZ

UCBDU5:	dw	UCBDU6		; link to next UCB
	db	5		; unit 5
	db	(1 SHL US.OFL)	; status byte
	ds	2		; back pointer to DCB (set by kernel)
	dw	SCB		; pointer to SCB
	dw	0		; redirect pointer
	db	0		; control bits
	dw	(1 SHL DV.REC) OR (1 SHL DV.DIR) OR (1 SHL DV.MNT)
	dw	0		; TCB address of attached task
	dw	0		; TCB address of ACP task
	dw	0		; LCB address of owner
	dw	0		; UX.BFP
	db	0		; UX.BBR
	dw	0		; UX.CNT
	dw	0		; UX.PBAS
	dw	0		; UX.PSIZ

UCBDU6:	dw	UCBDU7		; link to next UCB
	db	6		; unit 6
	db	(1 SHL US.OFL)	; status byte
	ds	2		; back pointer to DCB (set by kernel)
	dw	SCB		; pointer to SCB
	dw	0		; redirect pointer
	db	0		; control bits
	dw	(1 SHL DV.REC) OR (1 SHL DV.DIR) OR (1 SHL DV.MNT)
	dw	0		; TCB address of attached task
	dw	0		; TCB address of ACP task
	dw	0		; LCB address of owner
	dw	0		; UX.BFP
	db	0		; UX.BBR
	dw	0		; UX.CNT
	dw	0		; UX.PBAS
	dw	0		; UX.PSIZ

UCBDU7:	dw	0		; link to next UCB
	db	7		; unit 7
	db	(1 SHL US.OFL)	; status byte
	ds	2		; back pointer to DCB (set by kernel)
	dw	SCB		; pointer to SCB
	dw	0		; redirect pointer
	db	0		; control bits
	dw	(1 SHL DV.REC) OR (1 SHL DV.DIR) OR (1 SHL DV.MNT)
	dw	0		; TCB address of attached task
	dw	0		; TCB address of ACP task
	dw	0		; LCB address of owner
	dw	0		; UX.BFP
	db	0		; UX.BBR
	dw	0		; UX.CNT
	dw	0		; UX.PBAS
	dw	0		; UX.PSIZ

SCB:	db	0		; status byte
	dw	0		; head of I/O packet list
	dw	0		; address of current I/O packet

	CSEG

;-----------------------------------------------------------------------

INIT:	ld	(DUDCB),de	; store DCB address
	ld	iy,UCBDU0
ini1:	call	uinit		; initialize unit
	ld	l,(iy+U.LNK)
	ld	h,(iy+U.LNK+1)
	push	hl
	pop	iy
	ld	a,h
	or	l
	jr	nz,ini1
	xor	a
	ld	(dcnt),a
	ld	hl,(DUDCB)
	ld	de,D.TCNT
	add	hl,de
	ld	de,1		; arrange for the timeout entry to be
	ld	(hl),e		;  called each clock tick
	inc	hl
	ld	(hl),d
	call	GINIT		; read partition table and setup device units
	ld	a,(ERFLAG)	; return with GINIT error/success code
	or	a
	ret

; init single unit

uinit:	res	US.BSY,(iy+U.ST); clear busy bit
	ld	l,(iy+U.SCB)
	ld	h,(iy+U.SCB+1)
	push	hl
	pop	ix
	xor	a
	ld	(ix+S.ST),a	; clear status byte
	ld	(ix+S.CPKT),a	; clear current packet address
	ld	(ix+S.CPKT+1),a
	ret

;-----------------------------------------------------------------------

; Handle I/O request. Called by the kernel with IY = UCB address.

IOREQ:	call	GETPKT		; dequeue I/O packet, return address in IX
	ret	c		; return if unit busy or no work to do
	set	US.BSY,(iy+U.ST); set busy bit
	ld	c,(ix+I.TCB)	; get TCB address of requesting task
	ld	b,(ix+I.TCB+1)	;  into BC
	ld	hl,T.PCB
	add	hl,bc		; index into PCB field
	ld	e,(hl)		; get PCB address into DE
	inc	hl
	ld	d,(hl)
	ld	hl,P.BASE
	add	hl,de		; index into subpartition base
	ld	a,(hl)
	ld	(iy+UX.BBR),a	; save it into UX.BBR
	ld	de,I.QDB
	add	ix,de		; point to QDB area of I/O packet
	ld	e,(ix+Q.BUF)
	ld	d,(ix+Q.BUF+1)	; get buffer address
	ld	(iy+UX.BFP),e	;  into UX.BFP
	ld	(iy+UX.BFP+1),d
  IF 1
	ld	hl,T.ATTR
	add	hl,bc
	bit	TA.PRV,(hl)	; task privileged?
	jr	z,iorq0		; branch if not
	ld	hl,T.ST
	add	hl,bc
	bit	TS.SUP,(hl)	; task in supervisor mode?
	jr	z,iorq0		; branch if not
	ld	a,(SCBAR##)
	dec	a
	cp	d		; UX.BFP in kernel space?
	jr	nc,iorq0	; branch if not
	ld	a,($SBANK)
	ld	(iy+UX.BBR),a	; else adjust bank
iorq0:
  ENDIF
	ld	l,(ix+Q.LEN)
	ld	h,(ix+Q.LEN+1)	; get byte count
	ld	(iy+UX.CNT),l	;  into UX.CNT
	ld	(iy+UX.CNT+1),h
	ld	e,(ix+Q.BLK)
	ld	d,(ix+Q.BLK+1)	; get 32-bit block number
	ld	l,(ix+Q.BLK+2)
	ld	h,(ix+Q.BLK+3)
	ld	(LBN),de	;  into variable LBN
	ld	(LBN+2),hl
	xor	a
	ld	(ERFLAG),a	; clear error bits
	ld	a,(ix+Q.FUNC)	; check function code
	cp	IO.IDN
	jp	z,HDIDN
	cp	IO.RPB
	jp	z,HDRPB
	cp	IO.WPB
	jp	z,HDWPB
	bit	US.OFL,(iy+U.ST); check unit status
	ld	bc,E.OFL	; error if unit offline
	jp	nz,iorq1
	cp	IO.RLB
	jp	z,HDRLB
	cp	IO.WLB
	jp	z,HDWLB
	cp	IO.SEC
	jp	z,HDSEC
	ld	bc,E.BADOP	; error code = invalid operation
iorq1:	ld	de,0
	jp	iend1		; free packet and return error code
				;  (exit via IODONE)

;-----------------------------------------------------------------------

; Cancel current I/O operation.

IOKILL:	; disk I/O operations are normally allowed to complete.
	ret

;-----------------------------------------------------------------------

; End I/O operation:

iend:	ld	a,(ERFLAG)	; get error bits
	add	a,0FFh
	sbc	a,a		; set all bits if nonzero
	and	E.IO
	ld	c,a		; error/success code in BC
	ld	b,0
	call	getcnt		; transfer count in DE
iend1:	res	US.BSY,(iy+U.ST)
	jp	IODONE		; store result and end operation

getcnt:	ld	a,c
	or	a
	ld	de,512
	ret	z
	ld	de,0
	ret

;-----------------------------------------------------------------------

; Sense characteristics (right now returns the partition size in blocks)

HDSEC:	ld	hl,4
	call	CHKLEN		; ensure user buffer can hold a long word
	jp	c,iend
	call	CHKBUF		; ensure buffer is within task limits
	jp	c,iend
	ld	l,(iy+UX.PSIZ)	; get partition size
	ld	h,(iy+UX.PSIZ+1)
	xor	a
	add	hl,hl		; convert from 8K tracks to blocks
	adc	a,a
	add	hl,hl
	adc	a,a
	add	hl,hl
	adc	a,a
	add	hl,hl
	adc	a,a		; *16 with 20-bit result in AHL
	ld	c,a
	ld	b,0
	push	bc		; push hi-word
	push	hl		; push lo-word
	ld	l,(iy+UX.BFP)
	ld	h,(iy+UX.BFP+1)
	ld	e,(iy+UX.BBR)
	di
	pop	bc
	call	$UPUTW		; store lo-word
	pop	bc
	call	$UPUTW		; store hi-word
	ei
	ld	de,4
	ld	bc,E.OK
	jp	iend1		; finish operation

;-----------------------------------------------------------------------

; Read drive identification information to memory buffer UX.BFP in bank
; UX.BBR.

HDIDN:	call	CHKBUF		; ensure buffer is within task limits
	jp	c,iend
	call	IDENT		; read drive identification
	jr	HDRD1		; finish via common code

; Read physical block (number in LBN) from specified unit (IY = UCB) to
; memory buffer UX.BFP in bank UX.BBR.

HDRPB:	ld	hl,(LBN)
	ld	(PBN),hl	; set PBN variable
	ld	hl,(LBN+2)
	ld	(PBN+2),hl
	jr	HDRD		; continue via common code

; Read logical block (number in LBN) from specified unit (IY = UCB) to
; memory buffer UX.BFP in bank UX.BBR.

HDRLB:	call	CHKBLK		; ensure blkno is within partition limits
	jp	c,iend		;  and that user buffer is large enough
	call	L2PBN		; compute physical block number
HDRD:	call	CHKBUF		; ensure buffer is within task limits
	jp	c,iend
	call	DSKRD		; read one physical block from hard disk
HDRD1:	jp	c,iend		; finish operation if there were errors
	di
	exx
	ld	a,($SBANK)
	ld	l,a		; set src bank for $MCOPY
	ld	e,(iy+UX.BBR)	; set dst bank
	exx
	ld	hl,hdbuf
	ld	e,(iy+UX.BFP)
	ld	d,(iy+UX.BFP+1)
	ld	bc,512
	call	$MCOPY		; copy block to user space
	ei
	jp	iend		; and finish operation

; Write physical block (number in LBN) from memory buffer UX.BFP, bank
; UX.BBR to specified unit (IY = UCB).

HDWPB:	ld	hl,(LBN)
	ld	(PBN),hl	; set PBN variable
	ld	hl,(LBN+2)
	ld	(PBN+2),hl
	jr	HDWR		; continue via common code

; Write logical block (number in LBN) from memory buffer UX.BFP, bank
; UX.BBR to specified unit (IY = UCB).

HDWLB:	call	CHKBLK		; ensure blkno is within partition limits
	jp	c,iend		;  and that user buffer is large enough
	call	L2PBN		; compute physical block number
HDWR:	call	CHKBUF		; ensure buffer is within task limits
	jp	c,iend
	di
	exx
	ld	l,(iy+UX.BBR)	; src bank
	ld	a,($SBANK)
	ld	e,a		; dst bank
	exx
	ld	l,(iy+UX.BFP)
	ld	h,(iy+UX.BFP+1)
	ld	de,hdbuf
	ld	bc,512
	call	$MCOPY		; get block from user space
	ei
	call	DSKWR		; write to physical block
	jp	iend		; finish operation

; Ensure block number is within partition boundaries, and that the user
; buffer is large enough.

CHKBLK:	ld	hl,512
	call	CHKLEN		; at least one full block
	ret	c
	xor	a
	ld	l,(iy+UX.PSIZ)
	ld	h,(iy+UX.PSIZ+1)
	add	hl,hl		; convert 8K "tracks" to 512-byte blocks
	adc	a,a		;  (multiply by 8192/512 = 16)
	add	hl,hl
	adc	a,a
	add	hl,hl
	adc	a,a
	add	hl,hl
	adc	a,a
	ld	c,a
	ld	b,0
	ex	de,hl		; 20-bit partition size in blocks in BCDE
	call	CMPBLK		; LBN must be < UX.PSIZ*16
	ccf
	ret	nc
	ld	a,2
	jp	SETERR

CMPBLK:	ld	hl,LBN+3
	ld	a,(hl)
	cp	b
	ret	nz		; CY if LBN < part. size in BCDE (OK)
	dec	hl
	ld	a,(hl)
	cp	c
	ret	nz
	dec	hl
	ld	a,(hl)
	cp	d
	ret	nz
	dec	hl
	ld	a,(hl)
	cp	e
	ret

; Ensure user buffer is large enough. Called with HL = length.

CHKLEN:	ld	e,(iy+UX.CNT)
	ld	d,(iy+UX.CNT+1)
	call	cphlde		; CY if buf size < length
	ret	nc
	ld	a,3
	jp	SETERR

cphlde:	ld	a,d
	cp	h
	ret	nz		; CY if HL > DE
	ld	a,e
	cp	l
	ret

; Ensure user buffer is within task limits.

CHKBUF:	ld	l,(iy+U.SCB)	; get SCB address
	ld	h,(iy+U.SCB+1)
	ld	bc,S.CPKT
	add	hl,bc
	ld	a,(hl)		; fetch current packet address
	inc	hl
	ld	h,(hl)
	ld	l,a
	push	hl
	pop	ix
	ld	e,(ix+I.QDB+Q.BUF) ; get buffer address
	ld	d,(ix+I.QDB+Q.BUF+1)
	ld	c,(ix+I.QDB+Q.LEN) ; get buffer size
	ld	b,(ix+I.QDB+Q.LEN+1)
	ld	l,(ix+I.TCB)	   ; get TCB address
	ld	h,(ix+I.TCB+1)
	push	hl
	pop	ix		   ; into IX
	or	a		   ; clear CY
	bit	TA.PRV,(ix+T.ATTR) ; task privileged?
	jr	z,cb1		   ; no
	bit	TS.SUP,(ix+T.ST)   ; kernel database mapped to task space?
	ret	nz		; yes, allow operation
cb1:	call	$VALTB		; validate task buffer
	ret	nc
	ld	a,4
	jp	SETERR

; Convert logical block number in LBN to physical block number in PBN.

L2PBN:	ld	l,(iy+UX.PBAS)	; get track offset for this logical unit
	ld	h,(iy+UX.PBAS+1);  into HL
	xor	a		; form 20-bit value into AHL
	add	hl,hl		; multiply by 16
	adc	a,a		;  with 20-bit result
	add	hl,hl
	adc	a,a
	add	hl,hl
	adc	a,a
	add	hl,hl
	adc	a,a
	ld	c,a
	ld	de,(LBN)	; get relative block number (0-based)
	add	hl,de		; add desired relative block number
	ld	(PBN),hl
	ld	a,(LBN+2)
	adc	a,c		; to 20-bit resulting block number
	ld	l,a
	ld	h,0
	ld	(PBN+2),hl
	ret

;-----------------------------------------------------------------------

; Read one physical sector from hard disk.

; Input:
;   IY  = UCB address
;   PBN = Physical block number
; Output:
;   ERFLAG = Operation status. Zero means success.
; Modifies A, HL and BC

DSKRD:	call	HDPREP		; prepare task file registers
	ret	c
	WaitRdy	rderr
	ld	a,CmdRd
	out	(IdeCmd),a	; command: read sector data
	WaitDrq	rderr		; wait for DRQ to become active
	ld	hl,hdbuf	; get address of local buffer
	ld	bc,IdeDat	; B = 0 (counter), C = I/O address
	inir
	inir			; read 512 data bytes (2 x 256)
	WaitRdy	rderr
	in	a,(IdeCmd)	; check final drive status
	and	10001001b	; Busy, DRQ, or Error?
	jp	SETERR

rderr:	ld	a,1
	jp	SETERR

;-----------------------------------------------------------------------

; Write one physical sector to hard disk.

; Input:
;   IY  = UCB address
;   PBN = Physical block number
; Output:
;   ERFLAG = Operation status. Zero means success.
; Modifies A, HL, BC and DE.

DSKWR:
  IF NOT DSBLWR
	call	HDPREP		; prepare task file registers
	ret	c
	WaitRdy	wrerr
	ld	a,CmdWr
	out	(IdeCmd),a	; command: write sector data
	WaitDrq	wrerr		; wait for data requested
	ld	hl,hdbuf	; get destination address
	ld	bc,IdeDat	; B = 0 (counter), C = I/O address
	otir
	otir			; write 512 data bytes (2 x 256)
	WaitRdy	wrerr
   if 1
	WaitRdy	wrerr
   endif
	in	a,(IdeCmd)	; check final drive status
	and	10001001b	; Busy, DRQ, or Error?
	jp	SETERR
  ENDIF

wrerr:	ld	a,1
	jp	SETERR

;-----------------------------------------------------------------------

; Prepare hard disk for data transfer. The physical sector address
; is written to the appropriate IDE registers.

HDPREP:	WaitRdy	prerr
	ld	hl,(PBN)	; get 32-bit physical block number (0-based)
	ld	de,(PBN+2)	;  into DEHL

; This routine computes Head, Sector and Track from a sequential block number
; defined by: Trk_Offset * 16 + Block#.
;
; The Physical characteristics needed are:
;   Heads  = Number_of_Heads and
;   Secs   = Sectors_per_Track
;
; Computation of the CHS address is per:
;
;   Sector := (Block# MOD hdSPT)+1    (* Quotient1 := Block# DIV hdSPT    *)
;   Head   := Quotient1 MOD hdHds     (* Quotient2 := Quotient1 DIV hdHds *)
;   Track  := Quotient2
;
; Prepare for disk Read/Write by preloading all registers

	ld	a,(Secs)	; load number of sectors per track
	ld	c,a
	call	divide		; divide DEHL by C
	inc	a		; make sector number base at 1
	out	(IdeSNum),a	; send to GIDE register
	ld	a,(Heads)	; get number of heads
	ld	c,a
	call	divide		; divide DEHL (quotient from above) by C
	or	0A0h		; assume unit 0, master
	out	(IdeSDH),a	; send to GIDE register
	ld	a,l
	out	(IdeCLo),a
	ld	a,h
	out	(IdeCHi),a	; send cylinder number to GIDE
  if 1
	ld	a,d
	or	e
	ld	a,2
	jp	nz,SETERR
  endif
	ld	a,0AAh
	out	(IdeErr),a	; activate retries w/pattern in GIDE error reg
	ld	a,1		; one sector to read or write
	out	(IdeSCnt),a	; set sector count
	or	a		; return with CY clear
	ret

prerr:	scf
	ret

; Divide 32-bit number by 7-bit number returning quotient and remainder
; Enter: DEHL = 32-bit unsigned dividend
;	 C = 7-bit unsigned divisor
; Exit : DEHL = 32-bit quotient
;	 A = 8-bit remainder
; Uses : AF,BC,HL

divide:	ld	b,32+1		; 33 times thru loop
	xor	a		; clear remainder and carry
div1:	adc	a,a		; shift accum left + carry
	sbc	a,c		;  subtract divisor
	jr	nc,div2		;   jump if it worked
	add	a,c		; else restore accum & carry
div2:	ccf			; flip carry bit
	adc	hl,hl		;  shift any carry into
	rl	e		;   dividend/quotient
	rl	d
	djnz	div1		;  ..loop til done
	ret

;-----------------------------------------------------------------------

; Add error bits to ERFLAG variable and update error count in $ERSEQ.

SETERR:	or	a
	ret	z
	push	hl
	ld	hl,ERFLAG
	or	(hl)
	ld	(hl),a
	ld	hl,($ERSEQ)
	inc	hl
	ld	($ERSEQ),hl
	pop	hl
	scf
	ret

;-----------------------------------------------------------------------

; This routine is called at each clock interrupt to implement various
; timeout functions.

TMOUT:	ld	hl,(DUDCB)
	ld	de,D.TCNT
	add	hl,de
	ld	de,1		; re-arm the timeout process
	ld	(hl),e
	inc	hl
	ld	(hl),d
	ld	hl,dcnt		; check GIDE access timeout counter
	ld	a,(hl)
	or	a		; timed out?
	ret	z		; return if yes
	dec	(hl)		; else count down
	ret

;-----------------------------------------------------------------------

; Initialise the IDE hard disk, read the partition table and search
; for RSX180 partitions.

GINIT:
;;	call	IDENT		; identify disk geometry
;;	ret	c
;;	call	HDINIT		; initialize disk with geom params
	call	RDPTBL		; read the partition table
	ret	c
	call	CHKPT		; validate the partition table
	ret	nz		; return if no partition table found (all
				;  units are offline at this point)

	; copy the hard disk geometry values

	ld	hl,(hdbuf+5)
	ld	de,hdbuf
	add	hl,de		; point to disk geometry values
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	(Cyls),de
	ld	a,(hl)
	inc	hl
	ld	(Heads),a
	ld	a,(hl)
	ld	(Secs),a

	; now scan the partition table, identify partitions and setup the
	; disk parameter tables accordingly (note relative drive number = 0
	; still in C)

	ld	hl,(hdbuf+3)
	ld	de,hdbuf
	add	hl,de		; point to partition table
	ld	iy,UCBDU0
pscan:	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	(iy+UX.PBAS),e	; store partition start
	ld	(iy+UX.PBAS+1),d
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	(iy+UX.PSIZ),e	; store partition size
	ld	(iy+UX.PSIZ+1),d
	ld	a,d		; zero size = unused
	or	e
	res	US.OFL,(iy+U.ST)
	jr	nz,online
	set	US.OFL,(iy+U.ST)
online:	ld	a,(hl)
	inc	hl
	inc	hl
;;	cp	0D8h		; RSX180 partition? [we recognize any partition
;;	jr	nz,next		;  type, so we can mount/access them foreign]
next:	ld	e,(iy+U.LNK)
	ld	d,(iy+U.LNK+1)
	push	de
	pop	iy
	ld	a,d
	or	e
	jr	nz,pscan
	ret

psign:	db	'P112GIDE'	; partition table signature

; Validate partition table. Returns Z if valid.

CHKPT:	ld	hl,hdbuf+7
	ld	de,psign
	ld	b,8
pchk:	ld	a,(de)
	cp	(hl)
	ret	nz
	inc	hl
	inc	de
	djnz	pchk
	ret

; Hard disk initialization

HDINIT:	IF	0	; rely on BOOT ROM initialization for now...
	ld	a,6
	out	(IdeDOR),a	; set software reset
	ld	b,0
	djnz	$		; wait a short time (3 us minimum)
	ld	a,2
	out	(IdeDOR),a	; deactivate software reset
	ld	hl,1000
hdi1:	ld	b,0
	djnz	$
	dec	hl
	ld	a,h
	or	l		; timeout expired?
	jr	z,hdi_ex	; yes: set unit offline
	in	a,(IdeCmd)
	bit	7,a
	jr	nz,hdi1		; otherwise wait for Non-Busy
	and	11111001b
	cp	01010000b	; Status: Ready & NoError ?
	jr	nz,hdi1		; no --> keep waiting
	ld	a,(Secs)
	out	(IdeSCnt),a	; set sector count
	ld	hl,(Cyls)
	ld	a,l
	out	(IdeCLo),a
	ld	a,h
	out	(IdeCHi),a	; set cylinder count
	ld	a,(Heads)
	dec	a		; Heads-1
	or	0A0h
	out	(IdeSDH),a	; set number of heads
	ld	a,cmdinit	; command: Initialise
	out	(IdeCmd),a	; output command: set params
	ENDIF
	ret

; Read ID from Hard Disk

IDENT:	WaitRdy	iderr
	ld	a,CmdId
	out	(IdeCmd),a	; command: read sector data
	WaitDrq	iderr		; wait for DRQ to become active
	ld	hl,hdbuf	; get target address
	ld	bc,IdeDat	; B = 0 (counter), C = I/O address
	inir
	inir			; read 512 data bytes (2 x 256)
	WaitRdy	iderr
	in	a,(IdeCmd)	; check final drive status
	and	10001001b	; Busy, DRQ, or Error?
	ret	z		; no: everything is ok
iderr:	ld	a,1		; return with A=1 and CY set on error
	scf
	ret

; Read partition table (C/H/S = 0/0/0)
; Returns with CY set on error

RDPTBL:	WaitRdy	pterr
	ld	a,1		; sector base is at 1
	out	(IdeSNum),a	; send to GIDE register
	dec	a		; head 0
	or	0A0h		; assume unit 0, master
	out	(IdeSDH),a	; send to GIDE register
	ld	a,0		; cylinder 0
	out	(IdeCLo),a
	out	(IdeCHi),a	; send cylinder number to GIDE
	ld	a,0AAh
	out	(IdeErr),a	; activate retries w/pattern in GIDE error reg
	ld	a,1		; one sector to read or write
	out	(IdeSCnt),a	; set sector count
	WaitRdy	pterr
	ld	a,CmdRd
	out	(IdeCmd),a	; command: read sector data
	WaitDrq	pterr		; wait for DRQ to become active
	ld	hl,hdbuf	; get target address
	ld	bc,IdeDat	; B = 0 (counter), C = I/O address
	inir
	inir			; read 512 data bytes (2 x 256)
	WaitRdy	pterr
	in	a,(IdeCmd)	; check final drive status
	and	10001001b	; Busy, DRQ, or Error?
	jp	SETERR		; set error bits an return

pterr:	ld	a,1
	jp	SETERR

;-----------------------------------------------------------------------

	DSEG

DUDCB:	ds	2		; address of our DCB

LBN:	ds	4		; number of logical block to read
PBN:	ds	4		; number of physical block to read
ERFLAG:	ds	1		; error flags

dcnt:	ds	1		; GIDE I/O timeout counter

hdbuf:	ds	512		; local buffer for disk I/O transfer

; Hard disk geometry definitions

Cyls:	dw	1024		; (WD Tidbit-60) will be filled with
Heads:	db	7		;  actual values read from disk
Secs:	db	17

	END
