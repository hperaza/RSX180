;**********************************************************************;
;                                                                      ;
;   This file is part of RSX180, a multi-tasking OS for the Z180.      ;
;   Copyright (C) 1985-2020, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

;----------------------------------------------------------------------;
;                                                                      ;
;   DEV LP: printer driver (P112 version).                             ;
;                                                                      ;
;----------------------------------------------------------------------;

	.Z180

Z80182	equ	1
	INCLUDE	Z180.INC

	include	IOPKT.INC
	include	QIO.INC
	include	TCB.INC
	include	PCB.INC
	include	DCB.INC
	include	ERRORS.INC

DPORT	equ	8Ch		; data port
SPORT	equ	8Dh		; status port
CPORT	equ	8Eh		; control port

	extrn	GETPKT,IODONE,$UGETB,LNKFQB,$VALTB

;-----------------------------------------------------------------------

	cseg

DEVLP::	db	'LP',1		; device name and number of units
	dw	ucb		; address of UCB list
	jp	init
	jp	ioreq
	jp	iokill
	jp	tmout

	dseg

ucb:	dw	0		; end of list
	db	0		; unit 0
	db	0		; status byte
	ds	2		; back pointer to DCB (set by kernel)
	dw	scb		; pointer to status block
	dw	0		; redirect pointer
	db	0		; control bits
	dw	0		; device characteristics
	dw	0		; TCB of attached task
	dw	0		; no ACP
	dw	0		; no owner

scb:	db	0		; status byte
	dw	0		; head of I/O packet list
	dw	0		; address of current I/O packet

fblk:	dw	0
	db	0
	dw	iend
	dw	ucb		; IY

	cseg

;-----------------------------------------------------------------------

; Initialization.

init:	ld	(lpdcb),de	; remember our DCB address
	ld	iy,ucb
	res	US.BSY,(iy+U.ST); reset busy bit
	ld	ix,scb
	xor	a
	ld	(ix+S.ST),a	; clear status byte
	ld	(ix+S.CPKT),a	; clear current packet address
	ld	(ix+S.CPKT+1),a
	ld	a,8
	out0	(CPORT),a	; /INIT low
	ld	bc,0010h
dly:	djnz	dly		; long pause
	dec	c
	jr	nz,dly
	ld	a,0Ch
	out0	(CPORT),a	; /INIT high
	in0	a,(SPORT)
	in0	a,(SPORT)
	ret

;-----------------------------------------------------------------------

; I/O request handling. Called by the kernel with IY = UCB address.

ioreq:	call	GETPKT		; dequeue I/O packet, return address in IX
	ret	c		; return if unit busy or no work to do
	set	US.BSY,(iy+U.ST)
	ld	l,(ix+I.TCB)	; get TCB address of requesting task
	ld	h,(ix+I.TCB+1)
	ld	(utcb),hl
	ld	de,T.PCB
	add	hl,de		; index into PCB field
	ld	e,(hl)
	inc	hl
	ld	e,(hl)
	ld	hl,P.BASE
	add	hl,de		; index into subpartition base
	ld	a,(hl)
	ld	(bank),a	; save it
	ld	de,I.QDB
	add	ix,de		; point to QDB
	ld	l,(ix+Q.BUF)	; get buffer address
	ld	h,(ix+Q.BUF+1)
	ld	(bufp),hl
	ld	c,(ix+Q.LEN)	; get number of bytes to transfer
	ld	b,(ix+Q.LEN+1)
	ld	(cnt),bc
	ld	hl,0
	ld	(cr),hl		; clear count of bytes processed
	ld	a,(ix+Q.FUNC)	; check function code
	cp	IO.RLB
	jp	z,lprlb
	cp	IO.WLB
	jp	z,lpwlb
	jp	ierr		; free packet and send error code to user

;-----------------------------------------------------------------------

; Kill outstanding I/O. Called by the kernel with IY = UCB.

iokill:	ld	hl,0
	ld	(cnt),hl	; end any I/O packet processing in progress
	ld	hl,(lpdcb)
	ld	de,D.TCNT
	add	hl,de
	xor	a		; disable the timer
	ld	(hl),a
	inc	hl
	ld	(hl),a
	bit	US.BSY,(iy+U.ST)
	ld	bc,E.ABOP
	call	nz,iend1	; and free I/O packet
	xor	a
	ret

;-----------------------------------------------------------------------

; Handle read function.

lprlb:	jp	ierr		; return error

;-----------------------------------------------------------------------

; Handle write function.

lpwlb:	ld	ix,(utcb)
	ld	de,(bufp)
	ld	bc,(cnt)
	call	$VALTB		; validate user buffer
	jp	c,ierr
	ld	a,b
	or	c		; anything to send?
	jp	z,iend		; end packet processing if not
armt:	ld	hl,(lpdcb)	; else arm the timer
	ld	de,D.TCNT
	add	hl,de
	ld	de,1		; call the timeout entry point every
	ld	(hl),e		;  clock tick until all data has been sent
	inc	hl
	ld	(hl),d
	xor	a
	ret

;-----------------------------------------------------------------------

; Timeout entry point. Data is sent to the printer here.

tmout:	ld	hl,armt		; return via 'armt' routine
	push	hl		;  to re-arm the timeout timer
next:	in0	a,(SPORT)	; get status
	rlca			; busy?
	ret	nc		; return if not

	ld	hl,(bufp)	; get user buffer address into HL
	ld	a,(bank)
	ld	e,a		; and bank in E
	di
	call	$UGETB		; get char from user space
	ei
	inc	hl
	ld	(bufp),hl

	out0	(DPORT),a	; latch data
	ld	a,0Dh
	out0	(CPORT),a	; STB = 1
	nop
	nop			; pause
	ld	a,0Ch
	out0	(CPORT),a	; STB = 0

	ld	hl,(cr)
	inc	hl
	ld	(cr),hl

	ld	hl,(cnt)
	dec	hl
	ld	(cnt),hl
	ld	a,h
	or	l		; all sent?
	jr	nz,next		; loop if not

	pop	hl		; else discard 'armt' return address
	ld	ix,fblk
	jp	LNKFQB		; and schedule a call to iend

iend:	ld	bc,0
	jr	iend1
ierr:	ld	bc,E.BADOP	; error/success code in BC
iend1:	ld	de,(cr)		; transfer count in DE
	res	US.BSY,(iy+U.ST)
	jp	IODONE		; store result and end operation

;-----------------------------------------------------------------------

	dseg

lpdcb:	ds	2

bufp:	ds	2	; buffer address in user space
utcb:	ds	2	; TCB address of requesting task
bank:	ds	1	; user bank
cnt:	ds	2	; byte count (remaining)
cr:	ds	2	; bytes processed

	end
